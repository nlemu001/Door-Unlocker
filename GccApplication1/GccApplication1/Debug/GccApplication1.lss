
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00001f46  00001fda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064b  00800298  00800298  00002172  2**0
                  ALLOC
  3 .stab         00000e40  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000330f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000418  00000000  00000000  0000333e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d1a  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126d  00000000  00000000  00008470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000032d4  00000000  00000000  000096dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b40  00000000  00000000  0000c9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000014dc  00000000  00000000  0000d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000035a7  00000000  00000000  0000e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000428  00000000  00000000  00011f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_13>
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e4       	ldi	r30, 0x46	; 70
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 39       	cpi	r26, 0x98	; 152
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a8 e9       	ldi	r26, 0x98	; 152
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3e       	cpi	r26, 0xE3	; 227
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4f d7       	rcall	.+3742   	; 0xf62 <main>
      c4:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d4:	40 91 98 02 	lds	r20, 0x0298
      d8:	50 91 99 02 	lds	r21, 0x0299
      dc:	9e 01       	movw	r18, r28
      de:	24 0f       	add	r18, r20
      e0:	35 1f       	adc	r19, r21
      e2:	2c 3d       	cpi	r18, 0xDC	; 220
      e4:	85 e0       	ldi	r24, 0x05	; 5
      e6:	38 07       	cpc	r19, r24
      e8:	58 f4       	brcc	.+22     	; 0x100 <pvPortMalloc+0x36>
      ea:	42 17       	cp	r20, r18
      ec:	53 07       	cpc	r21, r19
      ee:	58 f4       	brcc	.+22     	; 0x106 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f0:	ea 01       	movw	r28, r20
      f2:	c6 56       	subi	r28, 0x66	; 102
      f4:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
      f6:	30 93 99 02 	sts	0x0299, r19
      fa:	20 93 98 02 	sts	0x0298, r18
      fe:	05 c0       	rjmp	.+10     	; 0x10a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     100:	c0 e0       	ldi	r28, 0x00	; 0
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <pvPortMalloc+0x40>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10e:	8c 2f       	mov	r24, r28
     110:	9d 2f       	mov	r25, r29
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     118:	08 95       	ret

0000011a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     11a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11c:	03 96       	adiw	r24, 0x03	; 3
     11e:	92 83       	std	Z+2, r25	; 0x02
     120:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	3f ef       	ldi	r19, 0xFF	; 255
     126:	34 83       	std	Z+4, r19	; 0x04
     128:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     12a:	96 83       	std	Z+6, r25	; 0x06
     12c:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12e:	90 87       	std	Z+8, r25	; 0x08
     130:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     132:	10 82       	st	Z, r1
     134:	08 95       	ret

00000136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     136:	fc 01       	movw	r30, r24
     138:	11 86       	std	Z+9, r1	; 0x09
     13a:	10 86       	std	Z+8, r1	; 0x08
     13c:	08 95       	ret

0000013e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     146:	21 81       	ldd	r18, Z+1	; 0x01
     148:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     14a:	e9 01       	movw	r28, r18
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	9b 81       	ldd	r25, Y+3	; 0x03
     150:	13 96       	adiw	r26, 0x03	; 3
     152:	9c 93       	st	X, r25
     154:	8e 93       	st	-X, r24
     156:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	92 81       	ldd	r25, Z+2	; 0x02
     15c:	15 96       	adiw	r26, 0x05	; 5
     15e:	9c 93       	st	X, r25
     160:	8e 93       	st	-X, r24
     162:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	ec 01       	movw	r28, r24
     16a:	7d 83       	std	Y+5, r23	; 0x05
     16c:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16e:	e9 01       	movw	r28, r18
     170:	7b 83       	std	Y+3, r23	; 0x03
     172:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     174:	72 83       	std	Z+2, r23	; 0x02
     176:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     178:	19 96       	adiw	r26, 0x09	; 9
     17a:	fc 93       	st	X, r31
     17c:	ee 93       	st	-X, r30
     17e:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     180:	80 81       	ld	r24, Z
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	80 83       	st	Z, r24
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     192:	48 81       	ld	r20, Y
     194:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     196:	4f 3f       	cpi	r20, 0xFF	; 255
     198:	2f ef       	ldi	r18, 0xFF	; 255
     19a:	52 07       	cpc	r21, r18
     19c:	31 f4       	brne	.+12     	; 0x1aa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19e:	dc 01       	movw	r26, r24
     1a0:	17 96       	adiw	r26, 0x07	; 7
     1a2:	ed 91       	ld	r30, X+
     1a4:	fc 91       	ld	r31, X
     1a6:	18 97       	sbiw	r26, 0x08	; 8
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1aa:	fc 01       	movw	r30, r24
     1ac:	33 96       	adiw	r30, 0x03	; 3
     1ae:	dc 01       	movw	r26, r24
     1b0:	15 96       	adiw	r26, 0x05	; 5
     1b2:	2d 91       	ld	r18, X+
     1b4:	3c 91       	ld	r19, X
     1b6:	16 97       	sbiw	r26, 0x06	; 6
     1b8:	d9 01       	movw	r26, r18
     1ba:	2d 91       	ld	r18, X+
     1bc:	3c 91       	ld	r19, X
     1be:	42 17       	cp	r20, r18
     1c0:	53 07       	cpc	r21, r19
     1c2:	50 f0       	brcs	.+20     	; 0x1d8 <vListInsert+0x4c>
     1c4:	02 80       	ldd	r0, Z+2	; 0x02
     1c6:	f3 81       	ldd	r31, Z+3	; 0x03
     1c8:	e0 2d       	mov	r30, r0
     1ca:	a2 81       	ldd	r26, Z+2	; 0x02
     1cc:	b3 81       	ldd	r27, Z+3	; 0x03
     1ce:	2d 91       	ld	r18, X+
     1d0:	3c 91       	ld	r19, X
     1d2:	42 17       	cp	r20, r18
     1d4:	53 07       	cpc	r21, r19
     1d6:	b0 f7       	brcc	.-20     	; 0x1c4 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d8:	a2 81       	ldd	r26, Z+2	; 0x02
     1da:	b3 81       	ldd	r27, Z+3	; 0x03
     1dc:	bb 83       	std	Y+3, r27	; 0x03
     1de:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1e0:	15 96       	adiw	r26, 0x05	; 5
     1e2:	dc 93       	st	X, r29
     1e4:	ce 93       	st	-X, r28
     1e6:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e8:	fd 83       	std	Y+5, r31	; 0x05
     1ea:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ec:	d3 83       	std	Z+3, r29	; 0x03
     1ee:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1f0:	99 87       	std	Y+9, r25	; 0x09
     1f2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 81       	ld	r18, Z
     1f8:	2f 5f       	subi	r18, 0xFF	; 255
     1fa:	20 83       	st	Z, r18
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     202:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     204:	a2 81       	ldd	r26, Z+2	; 0x02
     206:	b3 81       	ldd	r27, Z+3	; 0x03
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	95 81       	ldd	r25, Z+5	; 0x05
     20c:	15 96       	adiw	r26, 0x05	; 5
     20e:	9c 93       	st	X, r25
     210:	8e 93       	st	-X, r24
     212:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     214:	a4 81       	ldd	r26, Z+4	; 0x04
     216:	b5 81       	ldd	r27, Z+5	; 0x05
     218:	82 81       	ldd	r24, Z+2	; 0x02
     21a:	93 81       	ldd	r25, Z+3	; 0x03
     21c:	13 96       	adiw	r26, 0x03	; 3
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24
     222:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     224:	a0 85       	ldd	r26, Z+8	; 0x08
     226:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     228:	11 96       	adiw	r26, 0x01	; 1
     22a:	8d 91       	ld	r24, X+
     22c:	9c 91       	ld	r25, X
     22e:	12 97       	sbiw	r26, 0x02	; 2
     230:	8e 17       	cp	r24, r30
     232:	9f 07       	cpc	r25, r31
     234:	31 f4       	brne	.+12     	; 0x242 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     236:	84 81       	ldd	r24, Z+4	; 0x04
     238:	95 81       	ldd	r25, Z+5	; 0x05
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	9c 93       	st	X, r25
     23e:	8e 93       	st	-X, r24
     240:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     242:	11 86       	std	Z+9, r1	; 0x09
     244:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     246:	8c 91       	ld	r24, X
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	8c 93       	st	X, r24
     24c:	08 95       	ret

0000024e <SetBit>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     24e:	44 23       	and	r20, r20
     250:	51 f0       	breq	.+20     	; 0x266 <SetBit+0x18>
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	9a 01       	movw	r18, r20
     258:	02 c0       	rjmp	.+4      	; 0x25e <SetBit+0x10>
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	6a 95       	dec	r22
     260:	e2 f7       	brpl	.-8      	; 0x25a <SetBit+0xc>
     262:	82 2b       	or	r24, r18
     264:	08 95       	ret
     266:	21 e0       	ldi	r18, 0x01	; 1
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	a9 01       	movw	r20, r18
     26c:	02 c0       	rjmp	.+4      	; 0x272 <SetBit+0x24>
     26e:	44 0f       	add	r20, r20
     270:	55 1f       	adc	r21, r21
     272:	6a 95       	dec	r22
     274:	e2 f7       	brpl	.-8      	; 0x26e <SetBit+0x20>
     276:	ba 01       	movw	r22, r20
     278:	60 95       	com	r22
     27a:	86 23       	and	r24, r22
     27c:	08 95       	ret

0000027e <GetBit>:
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	a9 01       	movw	r20, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <GetBit+0xc>
     286:	44 0f       	add	r20, r20
     288:	55 1f       	adc	r21, r21
     28a:	6a 95       	dec	r22
     28c:	e2 f7       	brpl	.-8      	; 0x286 <GetBit+0x8>
     28e:	84 23       	and	r24, r20
     290:	08 95       	ret

00000292 <GetKeypadKey>:
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	64 e0       	ldi	r22, 0x04	; 4
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	da df       	rcall	.-76     	; 0x24e <SetBit>
     29a:	88 b9       	out	0x08, r24	; 8
     29c:	00 00       	nop
     29e:	86 b1       	in	r24, 0x06	; 6
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	80 95       	com	r24
     2a4:	ec df       	rcall	.-40     	; 0x27e <GetBit>
     2a6:	81 11       	cpse	r24, r1
     2a8:	6e c0       	rjmp	.+220    	; 0x386 <GetKeypadKey+0xf4>
     2aa:	86 b1       	in	r24, 0x06	; 6
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	80 95       	com	r24
     2b0:	e6 df       	rcall	.-52     	; 0x27e <GetBit>
     2b2:	81 11       	cpse	r24, r1
     2b4:	6a c0       	rjmp	.+212    	; 0x38a <GetKeypadKey+0xf8>
     2b6:	86 b1       	in	r24, 0x06	; 6
     2b8:	62 e0       	ldi	r22, 0x02	; 2
     2ba:	80 95       	com	r24
     2bc:	e0 df       	rcall	.-64     	; 0x27e <GetBit>
     2be:	81 11       	cpse	r24, r1
     2c0:	66 c0       	rjmp	.+204    	; 0x38e <GetKeypadKey+0xfc>
     2c2:	86 b1       	in	r24, 0x06	; 6
     2c4:	63 e0       	ldi	r22, 0x03	; 3
     2c6:	80 95       	com	r24
     2c8:	da df       	rcall	.-76     	; 0x27e <GetBit>
     2ca:	81 11       	cpse	r24, r1
     2cc:	62 c0       	rjmp	.+196    	; 0x392 <GetKeypadKey+0x100>
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	65 e0       	ldi	r22, 0x05	; 5
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	bc df       	rcall	.-136    	; 0x24e <SetBit>
     2d6:	88 b9       	out	0x08, r24	; 8
     2d8:	00 00       	nop
     2da:	86 b1       	in	r24, 0x06	; 6
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	80 95       	com	r24
     2e0:	ce df       	rcall	.-100    	; 0x27e <GetBit>
     2e2:	81 11       	cpse	r24, r1
     2e4:	58 c0       	rjmp	.+176    	; 0x396 <GetKeypadKey+0x104>
     2e6:	86 b1       	in	r24, 0x06	; 6
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	80 95       	com	r24
     2ec:	c8 df       	rcall	.-112    	; 0x27e <GetBit>
     2ee:	81 11       	cpse	r24, r1
     2f0:	54 c0       	rjmp	.+168    	; 0x39a <GetKeypadKey+0x108>
     2f2:	86 b1       	in	r24, 0x06	; 6
     2f4:	62 e0       	ldi	r22, 0x02	; 2
     2f6:	80 95       	com	r24
     2f8:	c2 df       	rcall	.-124    	; 0x27e <GetBit>
     2fa:	81 11       	cpse	r24, r1
     2fc:	50 c0       	rjmp	.+160    	; 0x39e <GetKeypadKey+0x10c>
     2fe:	86 b1       	in	r24, 0x06	; 6
     300:	63 e0       	ldi	r22, 0x03	; 3
     302:	80 95       	com	r24
     304:	bc df       	rcall	.-136    	; 0x27e <GetBit>
     306:	81 11       	cpse	r24, r1
     308:	4c c0       	rjmp	.+152    	; 0x3a2 <GetKeypadKey+0x110>
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	66 e0       	ldi	r22, 0x06	; 6
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	9e df       	rcall	.-196    	; 0x24e <SetBit>
     312:	88 b9       	out	0x08, r24	; 8
     314:	00 00       	nop
     316:	86 b1       	in	r24, 0x06	; 6
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	80 95       	com	r24
     31c:	b0 df       	rcall	.-160    	; 0x27e <GetBit>
     31e:	81 11       	cpse	r24, r1
     320:	42 c0       	rjmp	.+132    	; 0x3a6 <GetKeypadKey+0x114>
     322:	86 b1       	in	r24, 0x06	; 6
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	80 95       	com	r24
     328:	aa df       	rcall	.-172    	; 0x27e <GetBit>
     32a:	81 11       	cpse	r24, r1
     32c:	3e c0       	rjmp	.+124    	; 0x3aa <GetKeypadKey+0x118>
     32e:	86 b1       	in	r24, 0x06	; 6
     330:	62 e0       	ldi	r22, 0x02	; 2
     332:	80 95       	com	r24
     334:	a4 df       	rcall	.-184    	; 0x27e <GetBit>
     336:	81 11       	cpse	r24, r1
     338:	3a c0       	rjmp	.+116    	; 0x3ae <GetKeypadKey+0x11c>
     33a:	86 b1       	in	r24, 0x06	; 6
     33c:	63 e0       	ldi	r22, 0x03	; 3
     33e:	80 95       	com	r24
     340:	9e df       	rcall	.-196    	; 0x27e <GetBit>
     342:	81 11       	cpse	r24, r1
     344:	36 c0       	rjmp	.+108    	; 0x3b2 <GetKeypadKey+0x120>
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	67 e0       	ldi	r22, 0x07	; 7
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	80 df       	rcall	.-256    	; 0x24e <SetBit>
     34e:	88 b9       	out	0x08, r24	; 8
     350:	00 00       	nop
     352:	86 b1       	in	r24, 0x06	; 6
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	80 95       	com	r24
     358:	92 df       	rcall	.-220    	; 0x27e <GetBit>
     35a:	81 11       	cpse	r24, r1
     35c:	2c c0       	rjmp	.+88     	; 0x3b6 <GetKeypadKey+0x124>
     35e:	86 b1       	in	r24, 0x06	; 6
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	80 95       	com	r24
     364:	8c df       	rcall	.-232    	; 0x27e <GetBit>
     366:	81 11       	cpse	r24, r1
     368:	28 c0       	rjmp	.+80     	; 0x3ba <GetKeypadKey+0x128>
     36a:	86 b1       	in	r24, 0x06	; 6
     36c:	62 e0       	ldi	r22, 0x02	; 2
     36e:	80 95       	com	r24
     370:	86 df       	rcall	.-244    	; 0x27e <GetBit>
     372:	81 11       	cpse	r24, r1
     374:	24 c0       	rjmp	.+72     	; 0x3be <GetKeypadKey+0x12c>
     376:	86 b1       	in	r24, 0x06	; 6
     378:	63 e0       	ldi	r22, 0x03	; 3
     37a:	80 95       	com	r24
     37c:	80 df       	rcall	.-256    	; 0x27e <GetBit>
     37e:	88 23       	and	r24, r24
     380:	01 f1       	breq	.+64     	; 0x3c2 <GetKeypadKey+0x130>
     382:	84 e4       	ldi	r24, 0x44	; 68
     384:	08 95       	ret
     386:	81 e3       	ldi	r24, 0x31	; 49
     388:	08 95       	ret
     38a:	84 e3       	ldi	r24, 0x34	; 52
     38c:	08 95       	ret
     38e:	87 e3       	ldi	r24, 0x37	; 55
     390:	08 95       	ret
     392:	8a e2       	ldi	r24, 0x2A	; 42
     394:	08 95       	ret
     396:	82 e3       	ldi	r24, 0x32	; 50
     398:	08 95       	ret
     39a:	85 e3       	ldi	r24, 0x35	; 53
     39c:	08 95       	ret
     39e:	88 e3       	ldi	r24, 0x38	; 56
     3a0:	08 95       	ret
     3a2:	80 e3       	ldi	r24, 0x30	; 48
     3a4:	08 95       	ret
     3a6:	83 e3       	ldi	r24, 0x33	; 51
     3a8:	08 95       	ret
     3aa:	86 e3       	ldi	r24, 0x36	; 54
     3ac:	08 95       	ret
     3ae:	89 e3       	ldi	r24, 0x39	; 57
     3b0:	08 95       	ret
     3b2:	83 e2       	ldi	r24, 0x23	; 35
     3b4:	08 95       	ret
     3b6:	81 e4       	ldi	r24, 0x41	; 65
     3b8:	08 95       	ret
     3ba:	82 e4       	ldi	r24, 0x42	; 66
     3bc:	08 95       	ret
     3be:	83 e4       	ldi	r24, 0x43	; 67
     3c0:	08 95       	ret
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	08 95       	ret

000003c6 <delay_ms>:
     3c6:	18 16       	cp	r1, r24
     3c8:	19 06       	cpc	r1, r25
     3ca:	5c f0       	brlt	.+22     	; 0x3e2 <delay_ms+0x1c>
     3cc:	08 95       	ret
     3ce:	00 00       	nop
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	31 09       	sbc	r19, r1
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <delay_ms+0x8>
     3d6:	4f 5f       	subi	r20, 0xFF	; 255
     3d8:	5f 4f       	sbci	r21, 0xFF	; 255
     3da:	48 17       	cp	r20, r24
     3dc:	59 07       	cpc	r21, r25
     3de:	29 f4       	brne	.+10     	; 0x3ea <delay_ms+0x24>
     3e0:	08 95       	ret
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	67 e0       	ldi	r22, 0x07	; 7
     3e8:	73 e0       	ldi	r23, 0x03	; 3
     3ea:	9b 01       	movw	r18, r22
     3ec:	f0 cf       	rjmp	.-32     	; 0x3ce <delay_ms+0x8>

000003ee <LCD_WriteCommand>:
     3ee:	16 98       	cbi	0x02, 6	; 2
     3f0:	85 b9       	out	0x05, r24	; 5
     3f2:	17 9a       	sbi	0x02, 7	; 2
     3f4:	00 00       	nop
     3f6:	17 98       	cbi	0x02, 7	; 2
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	e4 cf       	rjmp	.-56     	; 0x3c6 <delay_ms>

000003fe <LCD_ClearScreen>:
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	f6 cf       	rjmp	.-20     	; 0x3ee <LCD_WriteCommand>

00000402 <LCD_init>:
     402:	84 e6       	ldi	r24, 0x64	; 100
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	df df       	rcall	.-66     	; 0x3c6 <delay_ms>
     408:	88 e3       	ldi	r24, 0x38	; 56
     40a:	f1 df       	rcall	.-30     	; 0x3ee <LCD_WriteCommand>
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	ef df       	rcall	.-34     	; 0x3ee <LCD_WriteCommand>
     410:	8f e0       	ldi	r24, 0x0F	; 15
     412:	ed df       	rcall	.-38     	; 0x3ee <LCD_WriteCommand>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	eb df       	rcall	.-42     	; 0x3ee <LCD_WriteCommand>
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	d4 cf       	rjmp	.-88     	; 0x3c6 <delay_ms>

0000041e <LCD_WriteData>:
     41e:	16 9a       	sbi	0x02, 6	; 2
     420:	85 b9       	out	0x05, r24	; 5
     422:	17 9a       	sbi	0x02, 7	; 2
     424:	00 00       	nop
     426:	17 98       	cbi	0x02, 7	; 2
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	cc cf       	rjmp	.-104    	; 0x3c6 <delay_ms>

0000042e <LCD_Cursor>:
     42e:	81 31       	cpi	r24, 0x11	; 17
     430:	10 f4       	brcc	.+4      	; 0x436 <LCD_Cursor+0x8>
     432:	81 58       	subi	r24, 0x81	; 129
     434:	dc cf       	rjmp	.-72     	; 0x3ee <LCD_WriteCommand>
     436:	81 55       	subi	r24, 0x51	; 81
     438:	da cf       	rjmp	.-76     	; 0x3ee <LCD_WriteCommand>

0000043a <LCD_DisplayString>:
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	18 2f       	mov	r17, r24
     442:	eb 01       	movw	r28, r22
     444:	dc df       	rcall	.-72     	; 0x3fe <LCD_ClearScreen>
     446:	98 81       	ld	r25, Y
     448:	99 23       	and	r25, r25
     44a:	51 f0       	breq	.+20     	; 0x460 <LCD_DisplayString+0x26>
     44c:	81 2f       	mov	r24, r17
     44e:	18 2f       	mov	r17, r24
     450:	1f 5f       	subi	r17, 0xFF	; 255
     452:	ed df       	rcall	.-38     	; 0x42e <LCD_Cursor>
     454:	89 91       	ld	r24, Y+
     456:	e3 df       	rcall	.-58     	; 0x41e <LCD_WriteData>
     458:	81 2f       	mov	r24, r17
     45a:	98 81       	ld	r25, Y
     45c:	91 11       	cpse	r25, r1
     45e:	f7 cf       	rjmp	.-18     	; 0x44e <LCD_DisplayString+0x14>
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <initUSART>:
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	81 f0       	breq	.+32     	; 0x48c <initUSART+0x24>
     46c:	e1 ec       	ldi	r30, 0xC1	; 193
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	88 61       	ori	r24, 0x18	; 24
     474:	80 83       	st	Z, r24
     476:	e2 ec       	ldi	r30, 0xC2	; 194
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	86 60       	ori	r24, 0x06	; 6
     47e:	80 83       	st	Z, r24
     480:	83 e3       	ldi	r24, 0x33	; 51
     482:	80 93 c4 00 	sts	0x00C4, r24
     486:	10 92 c5 00 	sts	0x00C5, r1
     48a:	08 95       	ret
     48c:	e9 ec       	ldi	r30, 0xC9	; 201
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	88 61       	ori	r24, 0x18	; 24
     494:	80 83       	st	Z, r24
     496:	ea ec       	ldi	r30, 0xCA	; 202
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	86 60       	ori	r24, 0x06	; 6
     49e:	80 83       	st	Z, r24
     4a0:	83 e3       	ldi	r24, 0x33	; 51
     4a2:	80 93 cc 00 	sts	0x00CC, r24
     4a6:	10 92 cd 00 	sts	0x00CD, r1
     4aa:	08 95       	ret

000004ac <USART_IsSendReady>:
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	21 f0       	breq	.+8      	; 0x4b8 <USART_IsSendReady+0xc>
     4b0:	80 91 c0 00 	lds	r24, 0x00C0
     4b4:	80 72       	andi	r24, 0x20	; 32
     4b6:	08 95       	ret
     4b8:	80 91 c8 00 	lds	r24, 0x00C8
     4bc:	80 72       	andi	r24, 0x20	; 32
     4be:	08 95       	ret

000004c0 <USART_HasTransmitted>:
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	21 f0       	breq	.+8      	; 0x4cc <USART_HasTransmitted+0xc>
     4c4:	80 91 c0 00 	lds	r24, 0x00C0
     4c8:	80 74       	andi	r24, 0x40	; 64
     4ca:	08 95       	ret
     4cc:	80 91 c8 00 	lds	r24, 0x00C8
     4d0:	80 74       	andi	r24, 0x40	; 64
     4d2:	08 95       	ret

000004d4 <USART_HasReceived>:
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	21 f0       	breq	.+8      	; 0x4e0 <USART_HasReceived+0xc>
     4d8:	80 91 c0 00 	lds	r24, 0x00C0
     4dc:	80 78       	andi	r24, 0x80	; 128
     4de:	08 95       	ret
     4e0:	80 91 c8 00 	lds	r24, 0x00C8
     4e4:	80 78       	andi	r24, 0x80	; 128
     4e6:	08 95       	ret

000004e8 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     4e8:	61 30       	cpi	r22, 0x01	; 1
     4ea:	41 f0       	breq	.+16     	; 0x4fc <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     4ec:	e0 ec       	ldi	r30, 0xC0	; 192
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	90 81       	ld	r25, Z
     4f2:	95 ff       	sbrs	r25, 5
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <USART_Send+0x8>
		UDR0 = sendMe;
     4f6:	80 93 c6 00 	sts	0x00C6, r24
     4fa:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     4fc:	e8 ec       	ldi	r30, 0xC8	; 200
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	90 81       	ld	r25, Z
     502:	95 ff       	sbrs	r25, 5
     504:	fd cf       	rjmp	.-6      	; 0x500 <USART_Send+0x18>
		UDR1 = sendMe;
     506:	80 93 ce 00 	sts	0x00CE, r24
     50a:	08 95       	ret

0000050c <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	41 f0       	breq	.+16     	; 0x520 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     510:	e0 ec       	ldi	r30, 0xC0	; 192
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	88 23       	and	r24, r24
     518:	ec f7       	brge	.-6      	; 0x514 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     51a:	80 91 c6 00 	lds	r24, 0x00C6
     51e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     520:	e8 ec       	ldi	r30, 0xC8	; 200
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	88 23       	and	r24, r24
     528:	ec f7       	brge	.-6      	; 0x524 <USART_Receive+0x18>
		return UDR1;
     52a:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     52e:	08 95       	ret

00000530 <verify_code>:
enum sendState 	{send_init, send} send_state;
enum receiveState {rec_init, receive} rec_state;

// Helper Methods
bool verify_code()
{
     530:	df 92       	push	r13
     532:	ef 92       	push	r14
     534:	ff 92       	push	r15
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <verify_code+0x10>
     540:	00 d0       	rcall	.+0      	; 0x542 <verify_code+0x12>
     542:	00 d0       	rcall	.+0      	; 0x544 <verify_code+0x14>
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	bool first, sec, third, fourth, fifth = false;
	char temp = '\0';
	char temp_code[6] = {' ',' ',' ',' ',' ','\0'};
     548:	86 e0       	ldi	r24, 0x06	; 6
     54a:	e7 e4       	ldi	r30, 0x47	; 71
     54c:	f1 e0       	ldi	r31, 0x01	; 1
     54e:	de 01       	movw	r26, r28
     550:	11 96       	adiw	r26, 0x01	; 1
     552:	01 90       	ld	r0, Z+
     554:	0d 92       	st	X+, r0
     556:	8a 95       	dec	r24
     558:	e1 f7       	brne	.-8      	; 0x552 <verify_code+0x22>
	LCD_DisplayString(1, enter_cur_code_string);
     55a:	60 91 35 01 	lds	r22, 0x0135
     55e:	70 91 36 01 	lds	r23, 0x0136
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	6a df       	rcall	.-300    	; 0x43a <LCD_DisplayString>
     566:	8e 01       	movw	r16, r28
     568:	0f 5f       	subi	r16, 0xFF	; 255
     56a:	1f 4f       	sbci	r17, 0xFF	; 255
enum tempState 	{temp_init, read_btn, temp_increase, temp_decrease} temp_state;
enum sendState 	{send_init, send} send_state;
enum receiveState {rec_init, receive} rec_state;

// Helper Methods
bool verify_code()
     56c:	7e 01       	movw	r14, r28
     56e:	86 e0       	ldi	r24, 0x06	; 6
     570:	e8 0e       	add	r14, r24
     572:	f1 1c       	adc	r15, r1
	// Verifying current passcode
	for(int i = 0; i < 5; i++)
	{
		while(true)
		{
			temp = GetKeypadKey();
     574:	8e de       	rcall	.-740    	; 0x292 <GetKeypadKey>
     576:	d8 2e       	mov	r13, r24
			delay_ms(300);
     578:	8c e2       	ldi	r24, 0x2C	; 44
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	24 df       	rcall	.-440    	; 0x3c6 <delay_ms>
			if(temp != '\0') break;
     57e:	dd 20       	and	r13, r13
     580:	c9 f3       	breq	.-14     	; 0x574 <verify_code+0x44>
		}
		temp_code[i] = temp;
     582:	f8 01       	movw	r30, r16
     584:	d1 92       	st	Z+, r13
     586:	8f 01       	movw	r16, r30

		LCD_DisplayString(1, temp_code);
     588:	be 01       	movw	r22, r28
     58a:	6f 5f       	subi	r22, 0xFF	; 255
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	54 df       	rcall	.-344    	; 0x43a <LCD_DisplayString>
	bool first, sec, third, fourth, fifth = false;
	char temp = '\0';
	char temp_code[6] = {' ',' ',' ',' ',' ','\0'};
	LCD_DisplayString(1, enter_cur_code_string);
	// Verifying current passcode
	for(int i = 0; i < 5; i++)
     592:	0e 15       	cp	r16, r14
     594:	1f 05       	cpc	r17, r15
     596:	71 f7       	brne	.-36     	; 0x574 <verify_code+0x44>
		temp_code[i] = temp;

		LCD_DisplayString(1, temp_code);
		temp = '\0';
	}
	if(!(temp_code[0] == code[0] && temp_code[1] == code[1] && temp_code[2] == code[2] && 
     598:	99 81       	ldd	r25, Y+1	; 0x01
     59a:	80 91 21 01 	lds	r24, 0x0121
     59e:	98 13       	cpse	r25, r24
     5a0:	14 c0       	rjmp	.+40     	; 0x5ca <verify_code+0x9a>
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	80 91 22 01 	lds	r24, 0x0122
     5a8:	98 13       	cpse	r25, r24
     5aa:	0f c0       	rjmp	.+30     	; 0x5ca <verify_code+0x9a>
     5ac:	9b 81       	ldd	r25, Y+3	; 0x03
     5ae:	80 91 23 01 	lds	r24, 0x0123
     5b2:	98 13       	cpse	r25, r24
     5b4:	0a c0       	rjmp	.+20     	; 0x5ca <verify_code+0x9a>
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	80 91 24 01 	lds	r24, 0x0124
     5bc:	98 13       	cpse	r25, r24
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <verify_code+0x9a>
     5c0:	9d 81       	ldd	r25, Y+5	; 0x05
     5c2:	80 91 25 01 	lds	r24, 0x0125
     5c6:	98 17       	cp	r25, r24
     5c8:	41 f0       	breq	.+16     	; 0x5da <verify_code+0xaa>
		temp_code[3] == code[3] && temp_code[4] == code[4]))
		{
			LCD_DisplayString(1, invalid_code_string);
     5ca:	60 91 31 01 	lds	r22, 0x0131
     5ce:	70 91 32 01 	lds	r23, 0x0132
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	32 df       	rcall	.-412    	; 0x43a <LCD_DisplayString>
			return false;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <verify_code+0xac>
		}
	
	return true;
     5da:	81 e0       	ldi	r24, 0x01	; 1
}
     5dc:	26 96       	adiw	r28, 0x06	; 6
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	08 95       	ret

000005f8 <change_code>:

void change_code()
{
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <change_code+0x14>
     60c:	00 d0       	rcall	.+0      	; 0x60e <change_code+0x16>
     60e:	00 d0       	rcall	.+0      	; 0x610 <change_code+0x18>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	char temp = '\0';
	char n_code[6] = {' ',' ',' ',' ',' ','\0'};	
     614:	86 e0       	ldi	r24, 0x06	; 6
     616:	e7 e4       	ldi	r30, 0x47	; 71
     618:	f1 e0       	ldi	r31, 0x01	; 1
     61a:	de 01       	movw	r26, r28
     61c:	11 96       	adiw	r26, 0x01	; 1
     61e:	01 90       	ld	r0, Z+
     620:	0d 92       	st	X+, r0
     622:	8a 95       	dec	r24
     624:	e1 f7       	brne	.-8      	; 0x61e <change_code+0x26>
	LCD_DisplayString(1, enter_new_code_string);
     626:	60 91 33 01 	lds	r22, 0x0133
     62a:	70 91 34 01 	lds	r23, 0x0134
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	04 df       	rcall	.-504    	; 0x43a <LCD_DisplayString>
     632:	8e 01       	movw	r16, r28
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255
     638:	0f 2e       	mov	r0, r31
     63a:	f1 e2       	ldi	r31, 0x21	; 33
     63c:	ef 2e       	mov	r14, r31
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	ff 2e       	mov	r15, r31
     642:	f0 2d       	mov	r31, r0
		}
	
	return true;
}

void change_code()
     644:	6e 01       	movw	r12, r28
     646:	86 e0       	ldi	r24, 0x06	; 6
     648:	c8 0e       	add	r12, r24
     64a:	d1 1c       	adc	r13, r1
	LCD_DisplayString(1, enter_new_code_string);
	for(int i = 0; i < 5; i++)
	{
		while(true)
		{
			temp = GetKeypadKey();
     64c:	22 de       	rcall	.-956    	; 0x292 <GetKeypadKey>
     64e:	b8 2e       	mov	r11, r24
			delay_ms(300);
     650:	8c e2       	ldi	r24, 0x2C	; 44
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	b8 de       	rcall	.-656    	; 0x3c6 <delay_ms>
			if(temp != '\0') break;
     656:	bb 20       	and	r11, r11
     658:	c9 f3       	breq	.-14     	; 0x64c <change_code+0x54>
		}
		n_code[i] = temp;
     65a:	f8 01       	movw	r30, r16
     65c:	b1 92       	st	Z+, r11
     65e:	8f 01       	movw	r16, r30
		code[i] = temp;
     660:	f7 01       	movw	r30, r14
     662:	b1 92       	st	Z+, r11
     664:	7f 01       	movw	r14, r30
		if(temp != '#')
     666:	f3 e2       	ldi	r31, 0x23	; 35
     668:	bf 16       	cp	r11, r31
     66a:	29 f0       	breq	.+10     	; 0x676 <change_code+0x7e>
			LCD_DisplayString(1, n_code);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	e2 de       	rcall	.-572    	; 0x43a <LCD_DisplayString>
void change_code()
{
	char temp = '\0';
	char n_code[6] = {' ',' ',' ',' ',' ','\0'};	
	LCD_DisplayString(1, enter_new_code_string);
	for(int i = 0; i < 5; i++)
     676:	0c 15       	cp	r16, r12
     678:	1d 05       	cpc	r17, r13
     67a:	41 f7       	brne	.-48     	; 0x64c <change_code+0x54>
		code[i] = temp;
		if(temp != '#')
			LCD_DisplayString(1, n_code);
		temp = '\0';
	}
}
     67c:	26 96       	adiw	r28, 0x06	; 6
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	08 95       	ret

0000069c <Key_Tick>:

// State Machines
void Key_Tick()
{
	// Transitions
	switch(key_state)
     69c:	80 91 e2 08 	lds	r24, 0x08E2
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	69 f1       	breq	.+90     	; 0x6fe <Key_Tick+0x62>
     6a4:	28 f4       	brcc	.+10     	; 0x6b0 <Key_Tick+0x14>
     6a6:	88 23       	and	r24, r24
     6a8:	41 f0       	breq	.+16     	; 0x6ba <Key_Tick+0x1e>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	89 f5       	brne	.+98     	; 0x710 <Key_Tick+0x74>
     6ae:	24 c0       	rjmp	.+72     	; 0x6f8 <Key_Tick+0x5c>
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	41 f1       	breq	.+80     	; 0x704 <Key_Tick+0x68>
     6b4:	84 30       	cpi	r24, 0x04	; 4
     6b6:	61 f5       	brne	.+88     	; 0x710 <Key_Tick+0x74>
     6b8:	28 c0       	rjmp	.+80     	; 0x70a <Key_Tick+0x6e>
	{
		case INITK:
			if(GetKeypadKey() == 'A')
     6ba:	eb dd       	rcall	.-1066   	; 0x292 <GetKeypadKey>
     6bc:	81 34       	cpi	r24, 0x41	; 65
     6be:	21 f4       	brne	.+8      	; 0x6c8 <Key_Tick+0x2c>
				key_state = set_a;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 e2 08 	sts	0x08E2, r24
     6c6:	2f c0       	rjmp	.+94     	; 0x726 <Key_Tick+0x8a>
			else if(GetKeypadKey() == 'B')
     6c8:	e4 dd       	rcall	.-1080   	; 0x292 <GetKeypadKey>
     6ca:	82 34       	cpi	r24, 0x42	; 66
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <Key_Tick+0x3a>
				key_state = set_b;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	80 93 e2 08 	sts	0x08E2, r24
     6d4:	2c c0       	rjmp	.+88     	; 0x72e <Key_Tick+0x92>
			else if(GetKeypadKey() == 'C')
     6d6:	dd dd       	rcall	.-1094   	; 0x292 <GetKeypadKey>
     6d8:	83 34       	cpi	r24, 0x43	; 67
     6da:	21 f4       	brne	.+8      	; 0x6e4 <Key_Tick+0x48>
				key_state = set_c;
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	80 93 e2 08 	sts	0x08E2, r24
     6e2:	29 c0       	rjmp	.+82     	; 0x736 <Key_Tick+0x9a>
			else if(GetKeypadKey() == 'D')
     6e4:	d6 dd       	rcall	.-1108   	; 0x292 <GetKeypadKey>
     6e6:	84 34       	cpi	r24, 0x44	; 68
     6e8:	21 f4       	brne	.+8      	; 0x6f2 <Key_Tick+0x56>
				key_state = set_d;
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	80 93 e2 08 	sts	0x08E2, r24
     6f0:	26 c0       	rjmp	.+76     	; 0x73e <Key_Tick+0xa2>
			else
				key_state = INITK;
     6f2:	10 92 e2 08 	sts	0x08E2, r1
     6f6:	08 95       	ret
			break;
		case set_a:
			key_state = INITK;
     6f8:	10 92 e2 08 	sts	0x08E2, r1
			break;
     6fc:	08 95       	ret
		case set_b:
			key_state = INITK;
     6fe:	10 92 e2 08 	sts	0x08E2, r1
			break;
     702:	08 95       	ret
		case set_c:
			key_state = INITK;
     704:	10 92 e2 08 	sts	0x08E2, r1
			break;
     708:	08 95       	ret
		case set_d:
			key_state = INITK;
     70a:	10 92 e2 08 	sts	0x08E2, r1
			break;
     70e:	08 95       	ret
	}

	// Actions
	switch(key_state)
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	69 f0       	breq	.+26     	; 0x72e <Key_Tick+0x92>
     714:	18 f4       	brcc	.+6      	; 0x71c <Key_Tick+0x80>
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	a9 f4       	brne	.+42     	; 0x744 <Key_Tick+0xa8>
     71a:	05 c0       	rjmp	.+10     	; 0x726 <Key_Tick+0x8a>
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	59 f0       	breq	.+22     	; 0x736 <Key_Tick+0x9a>
     720:	84 30       	cpi	r24, 0x04	; 4
     722:	81 f4       	brne	.+32     	; 0x744 <Key_Tick+0xa8>
     724:	0c c0       	rjmp	.+24     	; 0x73e <Key_Tick+0xa2>
	{
		case INITK:
			break;
		case set_a:
			choice = 'A';
     726:	81 e4       	ldi	r24, 0x41	; 65
     728:	80 93 dc 08 	sts	0x08DC, r24
			break;
     72c:	08 95       	ret
		case set_b:
			choice = 'B';
     72e:	82 e4       	ldi	r24, 0x42	; 66
     730:	80 93 dc 08 	sts	0x08DC, r24
			break;
     734:	08 95       	ret
		case set_c:
			choice = 'C';
     736:	83 e4       	ldi	r24, 0x43	; 67
     738:	80 93 dc 08 	sts	0x08DC, r24
			break;
     73c:	08 95       	ret
		case set_d:
			choice = 'D';
     73e:	84 e4       	ldi	r24, 0x44	; 68
     740:	80 93 dc 08 	sts	0x08DC, r24
     744:	08 95       	ret

00000746 <LCD_tick>:
}

void LCD_tick()
{
	// Actions
	switch(lcd_state)
     746:	80 91 d3 08 	lds	r24, 0x08D3
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	09 f4       	brne	.+2      	; 0x750 <LCD_tick+0xa>
     74e:	4f c0       	rjmp	.+158    	; 0x7ee <LCD_tick+0xa8>
     750:	38 f0       	brcs	.+14     	; 0x760 <LCD_tick+0x1a>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	09 f4       	brne	.+2      	; 0x758 <LCD_tick+0x12>
     756:	68 c0       	rjmp	.+208    	; 0x828 <LCD_tick+0xe2>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	09 f0       	breq	.+2      	; 0x75e <LCD_tick+0x18>
     75c:	7f c0       	rjmp	.+254    	; 0x85c <LCD_tick+0x116>
     75e:	73 c0       	rjmp	.+230    	; 0x846 <LCD_tick+0x100>
	{
		case LCDinit:
			//(page == 1) ? LCD_DisplayString(1, page_one) : LCD_DisplayString(1, page_two);
			if(fan == 1) {LCD_DisplayString(1, fan_one); delay_ms(1500);}
     760:	80 91 d5 08 	lds	r24, 0x08D5
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	49 f4       	brne	.+18     	; 0x77a <LCD_tick+0x34>
     768:	60 91 2d 01 	lds	r22, 0x012D
     76c:	70 91 2e 01 	lds	r23, 0x012E
     770:	64 de       	rcall	.-824    	; 0x43a <LCD_DisplayString>
     772:	8c ed       	ldi	r24, 0xDC	; 220
     774:	95 e0       	ldi	r25, 0x05	; 5
     776:	27 de       	rcall	.-946    	; 0x3c6 <delay_ms>
     778:	37 c0       	rjmp	.+110    	; 0x7e8 <LCD_tick+0xa2>
			else if(fan == 2) {LCD_DisplayString(1, fan_two); delay_ms(1500);}
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	51 f4       	brne	.+20     	; 0x792 <LCD_tick+0x4c>
     77e:	60 91 2b 01 	lds	r22, 0x012B
     782:	70 91 2c 01 	lds	r23, 0x012C
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	58 de       	rcall	.-848    	; 0x43a <LCD_DisplayString>
     78a:	8c ed       	ldi	r24, 0xDC	; 220
     78c:	95 e0       	ldi	r25, 0x05	; 5
     78e:	1b de       	rcall	.-970    	; 0x3c6 <delay_ms>
     790:	2b c0       	rjmp	.+86     	; 0x7e8 <LCD_tick+0xa2>
			else if(fan == 3) {LCD_DisplayString(1, fan_three); delay_ms(1500);}
     792:	83 30       	cpi	r24, 0x03	; 3
     794:	51 f4       	brne	.+20     	; 0x7aa <LCD_tick+0x64>
     796:	60 91 29 01 	lds	r22, 0x0129
     79a:	70 91 2a 01 	lds	r23, 0x012A
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	4c de       	rcall	.-872    	; 0x43a <LCD_DisplayString>
     7a2:	8c ed       	ldi	r24, 0xDC	; 220
     7a4:	95 e0       	ldi	r25, 0x05	; 5
     7a6:	0f de       	rcall	.-994    	; 0x3c6 <delay_ms>
     7a8:	1f c0       	rjmp	.+62     	; 0x7e8 <LCD_tick+0xa2>
			else if(fan == 4) {LCD_DisplayString(1, fan_four); delay_ms(1500);}
     7aa:	84 30       	cpi	r24, 0x04	; 4
     7ac:	51 f4       	brne	.+20     	; 0x7c2 <LCD_tick+0x7c>
     7ae:	60 91 27 01 	lds	r22, 0x0127
     7b2:	70 91 28 01 	lds	r23, 0x0128
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	40 de       	rcall	.-896    	; 0x43a <LCD_DisplayString>
     7ba:	8c ed       	ldi	r24, 0xDC	; 220
     7bc:	95 e0       	ldi	r25, 0x05	; 5
     7be:	03 de       	rcall	.-1018   	; 0x3c6 <delay_ms>
     7c0:	13 c0       	rjmp	.+38     	; 0x7e8 <LCD_tick+0xa2>
			else if(page == 1)
     7c2:	80 91 e0 08 	lds	r24, 0x08E0
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	31 f4       	brne	.+12     	; 0x7d6 <LCD_tick+0x90>
				LCD_DisplayString(1, page_one);
     7ca:	60 91 41 01 	lds	r22, 0x0141
     7ce:	70 91 42 01 	lds	r23, 0x0142
     7d2:	33 de       	rcall	.-922    	; 0x43a <LCD_DisplayString>
     7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <LCD_tick+0xa2>
			else if(page == 2)
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	09 f0       	breq	.+2      	; 0x7dc <LCD_tick+0x96>
     7da:	51 c0       	rjmp	.+162    	; 0x87e <LCD_tick+0x138>
				LCD_DisplayString(1, page_two);
     7dc:	60 91 3f 01 	lds	r22, 0x013F
     7e0:	70 91 40 01 	lds	r23, 0x0140
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	29 de       	rcall	.-942    	; 0x43a <LCD_DisplayString>
			else 
				break;
			fan = 0;
     7e8:	10 92 d5 08 	sts	0x08D5, r1
			break;
     7ec:	37 c0       	rjmp	.+110    	; 0x85c <LCD_tick+0x116>
		case door:
			if(verify_code())
     7ee:	a0 de       	rcall	.-704    	; 0x530 <verify_code>
     7f0:	88 23       	and	r24, r24
     7f2:	b9 f0       	breq	.+46     	; 0x822 <LCD_tick+0xdc>
			{
				motor_engage = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 e1 08 	sts	0x08E1, r24
				(locked) ? LCD_DisplayString(1, lock_string) : LCD_DisplayString(1, unlock_string);
     7fa:	80 91 da 08 	lds	r24, 0x08DA
     7fe:	88 23       	and	r24, r24
     800:	39 f0       	breq	.+14     	; 0x810 <LCD_tick+0xca>
     802:	60 91 3b 01 	lds	r22, 0x013B
     806:	70 91 3c 01 	lds	r23, 0x013C
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	16 de       	rcall	.-980    	; 0x43a <LCD_DisplayString>
     80e:	06 c0       	rjmp	.+12     	; 0x81c <LCD_tick+0xd6>
     810:	60 91 3d 01 	lds	r22, 0x013D
     814:	70 91 3e 01 	lds	r23, 0x013E
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	0f de       	rcall	.-994    	; 0x43a <LCD_DisplayString>
				delay_ms(1500);
     81c:	8c ed       	ldi	r24, 0xDC	; 220
     81e:	95 e0       	ldi	r25, 0x05	; 5
     820:	d2 dd       	rcall	.-1116   	; 0x3c6 <delay_ms>
			}
			choice = NULL;
     822:	10 92 dc 08 	sts	0x08DC, r1
			break;
     826:	1a c0       	rjmp	.+52     	; 0x85c <LCD_tick+0x116>
		case ch_code:
			LCD_DisplayString(1, change_code_string);
     828:	60 91 39 01 	lds	r22, 0x0139
     82c:	70 91 3a 01 	lds	r23, 0x013A
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	03 de       	rcall	.-1018   	; 0x43a <LCD_DisplayString>
			delay_ms(1500);
     834:	8c ed       	ldi	r24, 0xDC	; 220
     836:	95 e0       	ldi	r25, 0x05	; 5
     838:	c6 dd       	rcall	.-1140   	; 0x3c6 <delay_ms>
			if(verify_code())
     83a:	7a de       	rcall	.-780    	; 0x530 <verify_code>
     83c:	81 11       	cpse	r24, r1
				change_code();
     83e:	dc de       	rcall	.-584    	; 0x5f8 <change_code>
			choice = NULL;
     840:	10 92 dc 08 	sts	0x08DC, r1
			break;
     844:	0b c0       	rjmp	.+22     	; 0x85c <LCD_tick+0x116>
		case n_page:
			page = (page == 1) ? 2 : 1;
     846:	80 91 e0 08 	lds	r24, 0x08E0
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	11 f4       	brne	.+4      	; 0x852 <LCD_tick+0x10c>
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	01 c0       	rjmp	.+2      	; 0x854 <LCD_tick+0x10e>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 e0 08 	sts	0x08E0, r24
			choice = NULL;
     858:	10 92 dc 08 	sts	0x08DC, r1
		case set_thermo:
			break;
	}
	
	// Transitions
	switch(lcd_state)
     85c:	80 91 d3 08 	lds	r24, 0x08D3
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	c1 f1       	breq	.+112    	; 0x8d4 <LCD_tick+0x18e>
     864:	30 f4       	brcc	.+12     	; 0x872 <LCD_tick+0x12c>
     866:	88 23       	and	r24, r24
     868:	51 f0       	breq	.+20     	; 0x87e <LCD_tick+0x138>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	09 f0       	breq	.+2      	; 0x870 <LCD_tick+0x12a>
     86e:	43 c0       	rjmp	.+134    	; 0x8f6 <LCD_tick+0x1b0>
     870:	2e c0       	rjmp	.+92     	; 0x8ce <LCD_tick+0x188>
     872:	83 30       	cpi	r24, 0x03	; 3
     874:	91 f1       	breq	.+100    	; 0x8da <LCD_tick+0x194>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	09 f0       	breq	.+2      	; 0x87c <LCD_tick+0x136>
     87a:	3d c0       	rjmp	.+122    	; 0x8f6 <LCD_tick+0x1b0>
     87c:	31 c0       	rjmp	.+98     	; 0x8e0 <LCD_tick+0x19a>
	{
		case LCDinit:
			if(choice == '\0' || choice == NULL)
     87e:	80 91 dc 08 	lds	r24, 0x08DC
     882:	88 23       	and	r24, r24
     884:	c1 f1       	breq	.+112    	; 0x8f6 <LCD_tick+0x1b0>
				break;
			else if(choice == 'A')
     886:	81 34       	cpi	r24, 0x41	; 65
     888:	21 f4       	brne	.+8      	; 0x892 <LCD_tick+0x14c>
				lcd_state = door;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 d3 08 	sts	0x08D3, r24
     890:	08 95       	ret
			else if(choice == 'B')
     892:	82 34       	cpi	r24, 0x42	; 66
     894:	21 f4       	brne	.+8      	; 0x89e <LCD_tick+0x158>
				lcd_state = ch_code;
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	80 93 d3 08 	sts	0x08D3, r24
     89c:	08 95       	ret
			else if(choice == 'C')
     89e:	83 34       	cpi	r24, 0x43	; 67
     8a0:	21 f4       	brne	.+8      	; 0x8aa <LCD_tick+0x164>
				lcd_state = n_page;
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	80 93 d3 08 	sts	0x08D3, r24
     8a8:	08 95       	ret
			else if(choice == 'D')
     8aa:	84 34       	cpi	r24, 0x44	; 68
     8ac:	21 f5       	brne	.+72     	; 0x8f6 <LCD_tick+0x1b0>
			{
				LCD_DisplayString(1, set_thermo_string);
     8ae:	60 91 37 01 	lds	r22, 0x0137
     8b2:	70 91 38 01 	lds	r23, 0x0138
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	c0 dd       	rcall	.-1152   	; 0x43a <LCD_DisplayString>
				delay_ms(1500);
     8ba:	8c ed       	ldi	r24, 0xDC	; 220
     8bc:	95 e0       	ldi	r25, 0x05	; 5
     8be:	83 dd       	rcall	.-1274   	; 0x3c6 <delay_ms>
				lcd_state = set_thermo;
     8c0:	84 e0       	ldi	r24, 0x04	; 4
     8c2:	80 93 d3 08 	sts	0x08D3, r24
				setting_temp = true;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 d9 08 	sts	0x08D9, r24
     8cc:	08 95       	ret
			}
			else
				break;
			break;
		case door:
			lcd_state = LCDinit;
     8ce:	10 92 d3 08 	sts	0x08D3, r1
			break;
     8d2:	08 95       	ret
		case ch_code:
			lcd_state = LCDinit;
     8d4:	10 92 d3 08 	sts	0x08D3, r1
			break;
     8d8:	08 95       	ret
		case n_page:
			lcd_state = LCDinit;
     8da:	10 92 d3 08 	sts	0x08D3, r1
			break;
     8de:	08 95       	ret
		case set_thermo:
			if(!setting_temp)
     8e0:	80 91 d9 08 	lds	r24, 0x08D9
     8e4:	81 11       	cpse	r24, r1
     8e6:	07 c0       	rjmp	.+14     	; 0x8f6 <LCD_tick+0x1b0>
			{
				lcd_state = LCDinit;				
     8e8:	10 92 d3 08 	sts	0x08D3, r1
				choice = NULL;
     8ec:	10 92 dc 08 	sts	0x08DC, r1
				send_byte = true;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 d2 08 	sts	0x08D2, r24
     8f6:	08 95       	ret

000008f8 <Motor_Tick>:
}

void Motor_Tick()
{
	// Transitions
	switch(motor_state)
     8f8:	80 91 d7 08 	lds	r24, 0x08D7
     8fc:	84 30       	cpi	r24, 0x04	; 4
     8fe:	09 f4       	brne	.+2      	; 0x902 <Motor_Tick+0xa>
     900:	99 c0       	rjmp	.+306    	; 0xa34 <Motor_Tick+0x13c>
     902:	50 f4       	brcc	.+20     	; 0x918 <Motor_Tick+0x20>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	51 f1       	breq	.+84     	; 0x95c <Motor_Tick+0x64>
     908:	98 f0       	brcs	.+38     	; 0x930 <Motor_Tick+0x38>
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	09 f4       	brne	.+2      	; 0x910 <Motor_Tick+0x18>
     90e:	4a c0       	rjmp	.+148    	; 0x9a4 <Motor_Tick+0xac>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	09 f0       	breq	.+2      	; 0x916 <Motor_Tick+0x1e>
     914:	42 c1       	rjmp	.+644    	; 0xb9a <Motor_Tick+0x2a2>
     916:	6a c0       	rjmp	.+212    	; 0x9ec <Motor_Tick+0xf4>
     918:	86 30       	cpi	r24, 0x06	; 6
     91a:	09 f4       	brne	.+2      	; 0x91e <Motor_Tick+0x26>
     91c:	d3 c0       	rjmp	.+422    	; 0xac4 <Motor_Tick+0x1cc>
     91e:	08 f4       	brcc	.+2      	; 0x922 <Motor_Tick+0x2a>
     920:	ad c0       	rjmp	.+346    	; 0xa7c <Motor_Tick+0x184>
     922:	87 30       	cpi	r24, 0x07	; 7
     924:	09 f4       	brne	.+2      	; 0x928 <Motor_Tick+0x30>
     926:	f2 c0       	rjmp	.+484    	; 0xb0c <Motor_Tick+0x214>
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	09 f0       	breq	.+2      	; 0x92e <Motor_Tick+0x36>
     92c:	36 c1       	rjmp	.+620    	; 0xb9a <Motor_Tick+0x2a2>
     92e:	12 c1       	rjmp	.+548    	; 0xb54 <Motor_Tick+0x25c>
	{
		case motor_init:
			if(motor_engage && locked)
     930:	80 91 e1 08 	lds	r24, 0x08E1
     934:	88 23       	and	r24, r24
     936:	09 f4       	brne	.+2      	; 0x93a <Motor_Tick+0x42>
     938:	4b c1       	rjmp	.+662    	; 0xbd0 <Motor_Tick+0x2d8>
     93a:	80 91 da 08 	lds	r24, 0x08DA
     93e:	88 23       	and	r24, r24
     940:	31 f0       	breq	.+12     	; 0x94e <Motor_Tick+0x56>
			{
				motor_state = L0;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 d7 08 	sts	0x08D7, r24
				direction = 1;
     948:	80 93 d6 08 	sts	0x08D6, r24
     94c:	26 c1       	rjmp	.+588    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(motor_engage && !locked)
			{
				motor_state = L7;
     94e:	88 e0       	ldi	r24, 0x08	; 8
     950:	80 93 d7 08 	sts	0x08D7, r24
				direction = 2;
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	80 93 d6 08 	sts	0x08D6, r24
     95a:	1f c1       	rjmp	.+574    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else
				break;
			break;
		case L0:
			if(motor_cnt == one_eighty)
     95c:	20 91 d0 08 	lds	r18, 0x08D0
     960:	30 91 d1 08 	lds	r19, 0x08D1
     964:	80 91 dd 08 	lds	r24, 0x08DD
     968:	90 91 de 08 	lds	r25, 0x08DE
     96c:	28 17       	cp	r18, r24
     96e:	39 07       	cpc	r19, r25
     970:	69 f4       	brne	.+26     	; 0x98c <Motor_Tick+0x94>
			{
				motor_state = motor_init;
     972:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     976:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 91 d6 08 	lds	r25, 0x08D6
     980:	91 30       	cpi	r25, 0x01	; 1
     982:	09 f4       	brne	.+2      	; 0x986 <Motor_Tick+0x8e>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	80 93 da 08 	sts	0x08DA, r24
     98a:	07 c1       	rjmp	.+526    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     98c:	80 91 d6 08 	lds	r24, 0x08D6
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	21 f4       	brne	.+8      	; 0x99c <Motor_Tick+0xa4>
				motor_state = L1;
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	80 93 d7 08 	sts	0x08D7, r24
     99a:	2d c1       	rjmp	.+602    	; 0xbf6 <Motor_Tick+0x2fe>
			else
				motor_state = L7;
     99c:	88 e0       	ldi	r24, 0x08	; 8
     99e:	80 93 d7 08 	sts	0x08D7, r24
     9a2:	7d c1       	rjmp	.+762    	; 0xc9e <Motor_Tick+0x3a6>
			break;
		case L1:
			if(motor_cnt == one_eighty)
     9a4:	20 91 d0 08 	lds	r18, 0x08D0
     9a8:	30 91 d1 08 	lds	r19, 0x08D1
     9ac:	80 91 dd 08 	lds	r24, 0x08DD
     9b0:	90 91 de 08 	lds	r25, 0x08DE
     9b4:	28 17       	cp	r18, r24
     9b6:	39 07       	cpc	r19, r25
     9b8:	69 f4       	brne	.+26     	; 0x9d4 <Motor_Tick+0xdc>
			{
				motor_state = motor_init;
     9ba:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     9be:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 91 d6 08 	lds	r25, 0x08D6
     9c8:	91 30       	cpi	r25, 0x01	; 1
     9ca:	09 f4       	brne	.+2      	; 0x9ce <Motor_Tick+0xd6>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	80 93 da 08 	sts	0x08DA, r24
     9d2:	e3 c0       	rjmp	.+454    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     9d4:	80 91 d6 08 	lds	r24, 0x08D6
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	21 f4       	brne	.+8      	; 0x9e4 <Motor_Tick+0xec>
				motor_state = L2;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	80 93 d7 08 	sts	0x08D7, r24
     9e2:	17 c1       	rjmp	.+558    	; 0xc12 <Motor_Tick+0x31a>
			else
				motor_state = L0;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 d7 08 	sts	0x08D7, r24
     9ea:	f7 c0       	rjmp	.+494    	; 0xbda <Motor_Tick+0x2e2>
			break;
		case L2:
			if(motor_cnt == one_eighty)
     9ec:	20 91 d0 08 	lds	r18, 0x08D0
     9f0:	30 91 d1 08 	lds	r19, 0x08D1
     9f4:	80 91 dd 08 	lds	r24, 0x08DD
     9f8:	90 91 de 08 	lds	r25, 0x08DE
     9fc:	28 17       	cp	r18, r24
     9fe:	39 07       	cpc	r19, r25
     a00:	69 f4       	brne	.+26     	; 0xa1c <Motor_Tick+0x124>
			{
				motor_state = motor_init;
     a02:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     a06:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 91 d6 08 	lds	r25, 0x08D6
     a10:	91 30       	cpi	r25, 0x01	; 1
     a12:	09 f4       	brne	.+2      	; 0xa16 <Motor_Tick+0x11e>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	80 93 da 08 	sts	0x08DA, r24
     a1a:	bf c0       	rjmp	.+382    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     a1c:	80 91 d6 08 	lds	r24, 0x08D6
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	21 f4       	brne	.+8      	; 0xa2c <Motor_Tick+0x134>
				motor_state = L3;
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	80 93 d7 08 	sts	0x08D7, r24
     a2a:	01 c1       	rjmp	.+514    	; 0xc2e <Motor_Tick+0x336>
			else
				motor_state = L1;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	80 93 d7 08 	sts	0x08D7, r24
     a32:	e1 c0       	rjmp	.+450    	; 0xbf6 <Motor_Tick+0x2fe>
			break;
		case L3:
			if(motor_cnt == one_eighty)
     a34:	20 91 d0 08 	lds	r18, 0x08D0
     a38:	30 91 d1 08 	lds	r19, 0x08D1
     a3c:	80 91 dd 08 	lds	r24, 0x08DD
     a40:	90 91 de 08 	lds	r25, 0x08DE
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	69 f4       	brne	.+26     	; 0xa64 <Motor_Tick+0x16c>
			{
				motor_state = motor_init;
     a4a:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     a4e:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 91 d6 08 	lds	r25, 0x08D6
     a58:	91 30       	cpi	r25, 0x01	; 1
     a5a:	09 f4       	brne	.+2      	; 0xa5e <Motor_Tick+0x166>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	80 93 da 08 	sts	0x08DA, r24
     a62:	9b c0       	rjmp	.+310    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     a64:	80 91 d6 08 	lds	r24, 0x08D6
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	21 f4       	brne	.+8      	; 0xa74 <Motor_Tick+0x17c>
				motor_state = L4;
     a6c:	85 e0       	ldi	r24, 0x05	; 5
     a6e:	80 93 d7 08 	sts	0x08D7, r24
     a72:	eb c0       	rjmp	.+470    	; 0xc4a <Motor_Tick+0x352>
			else
				motor_state = L2;
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	80 93 d7 08 	sts	0x08D7, r24
     a7a:	cb c0       	rjmp	.+406    	; 0xc12 <Motor_Tick+0x31a>
			break;
		case L4:
			if(motor_cnt == one_eighty)
     a7c:	20 91 d0 08 	lds	r18, 0x08D0
     a80:	30 91 d1 08 	lds	r19, 0x08D1
     a84:	80 91 dd 08 	lds	r24, 0x08DD
     a88:	90 91 de 08 	lds	r25, 0x08DE
     a8c:	28 17       	cp	r18, r24
     a8e:	39 07       	cpc	r19, r25
     a90:	69 f4       	brne	.+26     	; 0xaac <Motor_Tick+0x1b4>
			{
				motor_state = motor_init;
     a92:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     a96:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 91 d6 08 	lds	r25, 0x08D6
     aa0:	91 30       	cpi	r25, 0x01	; 1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <Motor_Tick+0x1ae>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	80 93 da 08 	sts	0x08DA, r24
     aaa:	77 c0       	rjmp	.+238    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     aac:	80 91 d6 08 	lds	r24, 0x08D6
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	21 f4       	brne	.+8      	; 0xabc <Motor_Tick+0x1c4>
				motor_state = L5;
     ab4:	86 e0       	ldi	r24, 0x06	; 6
     ab6:	80 93 d7 08 	sts	0x08D7, r24
     aba:	d5 c0       	rjmp	.+426    	; 0xc66 <Motor_Tick+0x36e>
			else
				motor_state = L3;
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	80 93 d7 08 	sts	0x08D7, r24
     ac2:	b5 c0       	rjmp	.+362    	; 0xc2e <Motor_Tick+0x336>
			break;
		case L5:
			if(motor_cnt == one_eighty)
     ac4:	20 91 d0 08 	lds	r18, 0x08D0
     ac8:	30 91 d1 08 	lds	r19, 0x08D1
     acc:	80 91 dd 08 	lds	r24, 0x08DD
     ad0:	90 91 de 08 	lds	r25, 0x08DE
     ad4:	28 17       	cp	r18, r24
     ad6:	39 07       	cpc	r19, r25
     ad8:	69 f4       	brne	.+26     	; 0xaf4 <Motor_Tick+0x1fc>
			{
				motor_state = motor_init;
     ada:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     ade:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 91 d6 08 	lds	r25, 0x08D6
     ae8:	91 30       	cpi	r25, 0x01	; 1
     aea:	09 f4       	brne	.+2      	; 0xaee <Motor_Tick+0x1f6>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	80 93 da 08 	sts	0x08DA, r24
     af2:	53 c0       	rjmp	.+166    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     af4:	80 91 d6 08 	lds	r24, 0x08D6
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	21 f4       	brne	.+8      	; 0xb04 <Motor_Tick+0x20c>
				motor_state = L6;
     afc:	87 e0       	ldi	r24, 0x07	; 7
     afe:	80 93 d7 08 	sts	0x08D7, r24
     b02:	bf c0       	rjmp	.+382    	; 0xc82 <Motor_Tick+0x38a>
			else
				motor_state = L4;
     b04:	85 e0       	ldi	r24, 0x05	; 5
     b06:	80 93 d7 08 	sts	0x08D7, r24
     b0a:	9f c0       	rjmp	.+318    	; 0xc4a <Motor_Tick+0x352>
			break;
		case L6:
			if(motor_cnt == one_eighty)
     b0c:	20 91 d0 08 	lds	r18, 0x08D0
     b10:	30 91 d1 08 	lds	r19, 0x08D1
     b14:	80 91 dd 08 	lds	r24, 0x08DD
     b18:	90 91 de 08 	lds	r25, 0x08DE
     b1c:	28 17       	cp	r18, r24
     b1e:	39 07       	cpc	r19, r25
     b20:	69 f4       	brne	.+26     	; 0xb3c <Motor_Tick+0x244>
			{
				motor_state = motor_init;
     b22:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     b26:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 91 d6 08 	lds	r25, 0x08D6
     b30:	91 30       	cpi	r25, 0x01	; 1
     b32:	09 f4       	brne	.+2      	; 0xb36 <Motor_Tick+0x23e>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	80 93 da 08 	sts	0x08DA, r24
     b3a:	2f c0       	rjmp	.+94     	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     b3c:	80 91 d6 08 	lds	r24, 0x08D6
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	21 f4       	brne	.+8      	; 0xb4c <Motor_Tick+0x254>
				motor_state = L7;
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	80 93 d7 08 	sts	0x08D7, r24
     b4a:	a9 c0       	rjmp	.+338    	; 0xc9e <Motor_Tick+0x3a6>
			else
				motor_state = L5;
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	80 93 d7 08 	sts	0x08D7, r24
     b52:	89 c0       	rjmp	.+274    	; 0xc66 <Motor_Tick+0x36e>
			break;
		case L7:
			if(motor_cnt == one_eighty)
     b54:	20 91 d0 08 	lds	r18, 0x08D0
     b58:	30 91 d1 08 	lds	r19, 0x08D1
     b5c:	80 91 dd 08 	lds	r24, 0x08DD
     b60:	90 91 de 08 	lds	r25, 0x08DE
     b64:	28 17       	cp	r18, r24
     b66:	39 07       	cpc	r19, r25
     b68:	69 f4       	brne	.+26     	; 0xb84 <Motor_Tick+0x28c>
			{
				motor_state = motor_init;
     b6a:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     b6e:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 91 d6 08 	lds	r25, 0x08D6
     b78:	91 30       	cpi	r25, 0x01	; 1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <Motor_Tick+0x286>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	80 93 da 08 	sts	0x08DA, r24
     b82:	0b c0       	rjmp	.+22     	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     b84:	80 91 d6 08 	lds	r24, 0x08D6
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <Motor_Tick+0x29a>
				motor_state = L0;
     b8c:	80 93 d7 08 	sts	0x08D7, r24
     b90:	24 c0       	rjmp	.+72     	; 0xbda <Motor_Tick+0x2e2>
			else
				motor_state = L6;
     b92:	87 e0       	ldi	r24, 0x07	; 7
     b94:	80 93 d7 08 	sts	0x08D7, r24
     b98:	74 c0       	rjmp	.+232    	; 0xc82 <Motor_Tick+0x38a>
			break;
	}
	// Actions (Phases are left-shifted two bits to 
	//          accomodate LCD output of A0, A1)
	switch(motor_state)
     b9a:	80 91 d7 08 	lds	r24, 0x08D7
     b9e:	84 30       	cpi	r24, 0x04	; 4
     ba0:	09 f4       	brne	.+2      	; 0xba4 <Motor_Tick+0x2ac>
     ba2:	45 c0       	rjmp	.+138    	; 0xc2e <Motor_Tick+0x336>
     ba4:	48 f4       	brcc	.+18     	; 0xbb8 <Motor_Tick+0x2c0>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	c1 f0       	breq	.+48     	; 0xbda <Motor_Tick+0x2e2>
     baa:	90 f0       	brcs	.+36     	; 0xbd0 <Motor_Tick+0x2d8>
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	19 f1       	breq	.+70     	; 0xbf6 <Motor_Tick+0x2fe>
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <Motor_Tick+0x2be>
     bb4:	81 c0       	rjmp	.+258    	; 0xcb8 <Motor_Tick+0x3c0>
     bb6:	2d c0       	rjmp	.+90     	; 0xc12 <Motor_Tick+0x31a>
     bb8:	86 30       	cpi	r24, 0x06	; 6
     bba:	09 f4       	brne	.+2      	; 0xbbe <Motor_Tick+0x2c6>
     bbc:	54 c0       	rjmp	.+168    	; 0xc66 <Motor_Tick+0x36e>
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <Motor_Tick+0x2ca>
     bc0:	44 c0       	rjmp	.+136    	; 0xc4a <Motor_Tick+0x352>
     bc2:	87 30       	cpi	r24, 0x07	; 7
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <Motor_Tick+0x2d0>
     bc6:	5d c0       	rjmp	.+186    	; 0xc82 <Motor_Tick+0x38a>
     bc8:	88 30       	cpi	r24, 0x08	; 8
     bca:	09 f0       	breq	.+2      	; 0xbce <Motor_Tick+0x2d6>
     bcc:	75 c0       	rjmp	.+234    	; 0xcb8 <Motor_Tick+0x3c0>
     bce:	67 c0       	rjmp	.+206    	; 0xc9e <Motor_Tick+0x3a6>
	{
		case motor_init:
			motor_cnt = 0;
     bd0:	10 92 d1 08 	sts	0x08D1, r1
     bd4:	10 92 d0 08 	sts	0x08D0, r1
			//PORTA = PORTA & 0x03;
			break;
     bd8:	08 95       	ret
		case L0:
			motor_phase = 0x04;
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     be0:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     be2:	80 91 d0 08 	lds	r24, 0x08D0
     be6:	90 91 d1 08 	lds	r25, 0x08D1
     bea:	03 96       	adiw	r24, 0x03	; 3
     bec:	90 93 d1 08 	sts	0x08D1, r25
     bf0:	80 93 d0 08 	sts	0x08D0, r24
			break;
     bf4:	08 95       	ret
		case L1:
			motor_phase = 0x0C;
     bf6:	8c e0       	ldi	r24, 0x0C	; 12
     bf8:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     bfc:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     bfe:	80 91 d0 08 	lds	r24, 0x08D0
     c02:	90 91 d1 08 	lds	r25, 0x08D1
     c06:	03 96       	adiw	r24, 0x03	; 3
     c08:	90 93 d1 08 	sts	0x08D1, r25
     c0c:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c10:	08 95       	ret
		case L2:
			motor_phase = 0x08;
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c18:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c1a:	80 91 d0 08 	lds	r24, 0x08D0
     c1e:	90 91 d1 08 	lds	r25, 0x08D1
     c22:	03 96       	adiw	r24, 0x03	; 3
     c24:	90 93 d1 08 	sts	0x08D1, r25
     c28:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c2c:	08 95       	ret
		case L3:
			motor_phase = 0x18;
     c2e:	88 e1       	ldi	r24, 0x18	; 24
     c30:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c34:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c36:	80 91 d0 08 	lds	r24, 0x08D0
     c3a:	90 91 d1 08 	lds	r25, 0x08D1
     c3e:	03 96       	adiw	r24, 0x03	; 3
     c40:	90 93 d1 08 	sts	0x08D1, r25
     c44:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c48:	08 95       	ret
		case L4:
			motor_phase = 0x10;
     c4a:	80 e1       	ldi	r24, 0x10	; 16
     c4c:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c50:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c52:	80 91 d0 08 	lds	r24, 0x08D0
     c56:	90 91 d1 08 	lds	r25, 0x08D1
     c5a:	03 96       	adiw	r24, 0x03	; 3
     c5c:	90 93 d1 08 	sts	0x08D1, r25
     c60:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c64:	08 95       	ret
		case L5:
			motor_phase = 0x30;
     c66:	80 e3       	ldi	r24, 0x30	; 48
     c68:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c6c:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c6e:	80 91 d0 08 	lds	r24, 0x08D0
     c72:	90 91 d1 08 	lds	r25, 0x08D1
     c76:	03 96       	adiw	r24, 0x03	; 3
     c78:	90 93 d1 08 	sts	0x08D1, r25
     c7c:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c80:	08 95       	ret
		case L6:
			motor_phase = 0x20;
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c88:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c8a:	80 91 d0 08 	lds	r24, 0x08D0
     c8e:	90 91 d1 08 	lds	r25, 0x08D1
     c92:	03 96       	adiw	r24, 0x03	; 3
     c94:	90 93 d1 08 	sts	0x08D1, r25
     c98:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c9c:	08 95       	ret
		case L7:
			motor_phase = 0x24;
     c9e:	84 e2       	ldi	r24, 0x24	; 36
     ca0:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     ca4:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     ca6:	80 91 d0 08 	lds	r24, 0x08D0
     caa:	90 91 d1 08 	lds	r25, 0x08D1
     cae:	03 96       	adiw	r24, 0x03	; 3
     cb0:	90 93 d1 08 	sts	0x08D1, r25
     cb4:	80 93 d0 08 	sts	0x08D0, r24
     cb8:	08 95       	ret

00000cba <temp_tick>:
}

void temp_tick()
{
	// Transitions
	switch(temp_state)
     cba:	80 91 db 08 	lds	r24, 0x08DB
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	71 f0       	breq	.+28     	; 0xcde <temp_tick+0x24>
     cc2:	28 f0       	brcs	.+10     	; 0xcce <temp_tick+0x14>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	19 f1       	breq	.+70     	; 0xd0e <temp_tick+0x54>
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	49 f5       	brne	.+82     	; 0xd1e <temp_tick+0x64>
     ccc:	24 c0       	rjmp	.+72     	; 0xd16 <temp_tick+0x5c>
	{
		case temp_init:
			if(setting_temp)
     cce:	80 91 d9 08 	lds	r24, 0x08D9
     cd2:	88 23       	and	r24, r24
     cd4:	71 f1       	breq	.+92     	; 0xd32 <temp_tick+0x78>
				temp_state = read_btn;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 db 08 	sts	0x08DB, r24
     cdc:	2d c0       	rjmp	.+90     	; 0xd38 <temp_tick+0x7e>
			break;
		case read_btn:
			if(~PIND & 0x40)
     cde:	4e 99       	sbic	0x09, 6	; 9
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <temp_tick+0x30>
				temp_state = temp_increase;
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	80 93 db 08 	sts	0x08DB, r24
     ce8:	44 c0       	rjmp	.+136    	; 0xd72 <temp_tick+0xb8>
			else if(~PIND & 0x20)
     cea:	4d 99       	sbic	0x09, 5	; 9
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <temp_tick+0x3c>
				temp_state = temp_decrease;
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	80 93 db 08 	sts	0x08DB, r24
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <temp_tick+0xc4>
			else if(GetKeypadKey() == '#')
     cf6:	cd da       	rcall	.-2662   	; 0x292 <GetKeypadKey>
     cf8:	83 32       	cpi	r24, 0x23	; 35
     cfa:	89 f4       	brne	.+34     	; 0xd1e <temp_tick+0x64>
			{
				LCD_DisplayString(1, new_temp_received);
     cfc:	60 91 2f 01 	lds	r22, 0x012F
     d00:	70 91 30 01 	lds	r23, 0x0130
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	99 db       	rcall	.-2254   	; 0x43a <LCD_DisplayString>
				temp_state = temp_init;
     d08:	10 92 db 08 	sts	0x08DB, r1
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <temp_tick+0x78>
			}
			else
				break;
			break;
		case temp_increase:
			temp_state = read_btn;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 db 08 	sts	0x08DB, r24
			break;
     d14:	11 c0       	rjmp	.+34     	; 0xd38 <temp_tick+0x7e>
		case temp_decrease:
			temp_state = read_btn;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 db 08 	sts	0x08DB, r24
			break;
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <temp_tick+0x7e>
		default:
			break;
	}

	// State Actions
	switch(temp_state)
     d1e:	80 91 db 08 	lds	r24, 0x08DB
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	49 f0       	breq	.+18     	; 0xd38 <temp_tick+0x7e>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <temp_tick+0x78>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	19 f1       	breq	.+70     	; 0xd72 <temp_tick+0xb8>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	61 f5       	brne	.+88     	; 0xd88 <temp_tick+0xce>
     d30:	26 c0       	rjmp	.+76     	; 0xd7e <temp_tick+0xc4>
	{
		case temp_init:
			setting_temp = false;
     d32:	10 92 d9 08 	sts	0x08D9, r1
			break;
     d36:	08 95       	ret
		case read_btn:
			snprintf(buffer, sizeof(buffer), "%d", new_temp);
     d38:	80 91 26 01 	lds	r24, 0x0126
     d3c:	1f 92       	push	r1
     d3e:	8f 93       	push	r24
     d40:	8d e4       	ldi	r24, 0x4D	; 77
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	9f 93       	push	r25
     d46:	8f 93       	push	r24
     d48:	1f 92       	push	r1
     d4a:	81 e2       	ldi	r24, 0x21	; 33
     d4c:	8f 93       	push	r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	9f 93       	push	r25
     d54:	8f 93       	push	r24
     d56:	21 d6       	rcall	.+3138   	; 0x199a <snprintf>
			LCD_DisplayString(1, buffer);
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	71 e0       	ldi	r23, 0x01	; 1
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	6d db       	rcall	.-2342   	; 0x43a <LCD_DisplayString>
			break;
     d60:	8d b7       	in	r24, 0x3d	; 61
     d62:	9e b7       	in	r25, 0x3e	; 62
     d64:	08 96       	adiw	r24, 0x08	; 8
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	9e bf       	out	0x3e, r25	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	8d bf       	out	0x3d, r24	; 61
     d70:	08 95       	ret
		case temp_increase:
			new_temp += 1;
     d72:	80 91 26 01 	lds	r24, 0x0126
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 26 01 	sts	0x0126, r24
			break;
     d7c:	08 95       	ret
		case temp_decrease:
			new_temp -= 1;
     d7e:	80 91 26 01 	lds	r24, 0x0126
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	80 93 26 01 	sts	0x0126, r24
     d88:	08 95       	ret

00000d8a <send_tick>:
}

void send_tick ()
{
	// Actions
	switch(send_state)
     d8a:	80 91 d8 08 	lds	r24, 0x08D8
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	21 f4       	brne	.+8      	; 0xd9a <send_tick+0x10>
	{
		case send_init:
			break;
		case send:
			USART_Send(new_temp, 0);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	80 91 26 01 	lds	r24, 0x0126
     d98:	a7 db       	rcall	.-2226   	; 0x4e8 <USART_Send>
		default:
			break;
	}

	// Transitions
	switch(send_state)
     d9a:	80 91 d8 08 	lds	r24, 0x08D8
     d9e:	88 23       	and	r24, r24
     da0:	19 f0       	breq	.+6      	; 0xda8 <send_tick+0x1e>
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	c1 f4       	brne	.+48     	; 0xdd6 <send_tick+0x4c>
     da6:	0f c0       	rjmp	.+30     	; 0xdc6 <send_tick+0x3c>
	{
		case send_init:
			if (USART_IsSendReady(0) && send_byte)
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	80 db       	rcall	.-2304   	; 0x4ac <USART_IsSendReady>
     dac:	88 23       	and	r24, r24
     dae:	41 f0       	breq	.+16     	; 0xdc0 <send_tick+0x36>
     db0:	80 91 d2 08 	lds	r24, 0x08D2
     db4:	88 23       	and	r24, r24
     db6:	21 f0       	breq	.+8      	; 0xdc0 <send_tick+0x36>
				send_state = send;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 d8 08 	sts	0x08D8, r24
     dbe:	08 95       	ret
			else 
				send_state = send_init;
     dc0:	10 92 d8 08 	sts	0x08D8, r1
     dc4:	08 95       	ret
			break;
		case send:
			while(!USART_HasTransmitted(0)){}
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	7b db       	rcall	.-2314   	; 0x4c0 <USART_HasTransmitted>
     dca:	88 23       	and	r24, r24
     dcc:	e1 f3       	breq	.-8      	; 0xdc6 <send_tick+0x3c>
			send_state = send_init;
     dce:	10 92 d8 08 	sts	0x08D8, r1
			send_byte = false;
     dd2:	10 92 d2 08 	sts	0x08D2, r1
     dd6:	08 95       	ret

00000dd8 <SendTask>:
	}
}

void SendTask() 
{
	send_state = send_init;
     dd8:	10 92 d8 08 	sts	0x08D8, r1
	send_byte = false;
     ddc:	10 92 d2 08 	sts	0x08D2, r1
	initUSART(0);
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	42 db       	rcall	.-2428   	; 0x468 <initUSART>
	for ( ; ; ) 
	{
		send_tick();
     de4:	d2 df       	rcall	.-92     	; 0xd8a <send_tick>
		vTaskDelay(300);
     de6:	8c e2       	ldi	r24, 0x2C	; 44
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	48 d5       	rcall	.+2704   	; 0x187c <vTaskDelay>
     dec:	fb cf       	rjmp	.-10     	; 0xde4 <SendTask+0xc>

00000dee <receive_SM>:
}

void receive_SM()
{
	// SM Transitions
	switch(rec_state)
     dee:	80 91 d4 08 	lds	r24, 0x08D4
     df2:	88 23       	and	r24, r24
     df4:	19 f0       	breq	.+6      	; 0xdfc <receive_SM+0xe>
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	79 f4       	brne	.+30     	; 0xe18 <receive_SM+0x2a>
     dfa:	0b c0       	rjmp	.+22     	; 0xe12 <receive_SM+0x24>
	{
		case rec_init:
			if (USART_HasReceived(0)) {rec_state = receive;}
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	6a db       	rcall	.-2348   	; 0x4d4 <USART_HasReceived>
     e00:	88 23       	and	r24, r24
     e02:	21 f0       	breq	.+8      	; 0xe0c <receive_SM+0x1e>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 d4 08 	sts	0x08D4, r24
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <receive_SM+0x2e>
			else rec_state = rec_init;
     e0c:	10 92 d4 08 	sts	0x08D4, r1
     e10:	08 95       	ret
			break;
		case receive:
			rec_state = rec_init;
     e12:	10 92 d4 08 	sts	0x08D4, r1
			break;
     e16:	08 95       	ret
		default:
			break;
	}
	
	// SM Actions
	switch(rec_state)
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	21 f4       	brne	.+8      	; 0xe24 <receive_SM+0x36>
	{
		case rec_init:
			break;
		case receive:
			fan = USART_Receive(0);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	76 db       	rcall	.-2324   	; 0x50c <USART_Receive>
     e20:	80 93 d5 08 	sts	0x08D5, r24
     e24:	08 95       	ret

00000e26 <RecTask>:
	}
}

void RecTask() 
{
	rec_state = rec_init;
     e26:	10 92 d4 08 	sts	0x08D4, r1
	fan = 0;
     e2a:	10 92 d5 08 	sts	0x08D5, r1
	initUSART(0);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	1b db       	rcall	.-2506   	; 0x468 <initUSART>
	for (;;) 
	{
		receive_SM();
     e32:	dd df       	rcall	.-70     	; 0xdee <receive_SM>
		vTaskDelay(100);
     e34:	84 e6       	ldi	r24, 0x64	; 100
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	21 d5       	rcall	.+2626   	; 0x187c <vTaskDelay>
     e3a:	fb cf       	rjmp	.-10     	; 0xe32 <RecTask+0xc>

00000e3c <key_Init>:
}

// Task inits
void key_Init()
{
	key_state = INITK;
     e3c:	10 92 e2 08 	sts	0x08E2, r1
	choice = NULL;
     e40:	10 92 dc 08 	sts	0x08DC, r1
     e44:	08 95       	ret

00000e46 <KeyTask>:
	}
}

void KeyTask() 
{
	key_Init();
     e46:	fa df       	rcall	.-12     	; 0xe3c <key_Init>
	for(;;)
	{
		Key_Tick();
     e48:	29 dc       	rcall	.-1966   	; 0x69c <Key_Tick>
		vTaskDelay(100);
     e4a:	84 e6       	ldi	r24, 0x64	; 100
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	16 d5       	rcall	.+2604   	; 0x187c <vTaskDelay>
     e50:	fb cf       	rjmp	.-10     	; 0xe48 <KeyTask+0x2>

00000e52 <motor_Init>:
	choice = NULL;
}

void motor_Init()
{
	motor_state = motor_init;
     e52:	10 92 d7 08 	sts	0x08D7, r1
	motor_phase = 0x00;
     e56:	10 92 df 08 	sts	0x08DF, r1
	one_eighty = 3072;
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	9c e0       	ldi	r25, 0x0C	; 12
     e5e:	90 93 de 08 	sts	0x08DE, r25
     e62:	80 93 dd 08 	sts	0x08DD, r24
	direction = 0;
     e66:	10 92 d6 08 	sts	0x08D6, r1
	motor_cnt = 0;
     e6a:	10 92 d1 08 	sts	0x08D1, r1
     e6e:	10 92 d0 08 	sts	0x08D0, r1
     e72:	08 95       	ret

00000e74 <MotorTask>:
}

// Tasks
void MotorTask()
{
	motor_Init();
     e74:	ee df       	rcall	.-36     	; 0xe52 <motor_Init>
	for(;;)
	{
		Motor_Tick();
     e76:	40 dd       	rcall	.-1408   	; 0x8f8 <Motor_Tick>
		vTaskDelay(3);
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	ff d4       	rcall	.+2558   	; 0x187c <vTaskDelay>
     e7e:	fb cf       	rjmp	.-10     	; 0xe76 <MotorTask+0x2>

00000e80 <LCD_task_init>:
	motor_cnt = 0;
}

void LCD_task_init()
{
	locked = true;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 da 08 	sts	0x08DA, r24
	page = 1;
     e86:	80 93 e0 08 	sts	0x08E0, r24
	lcd_state = LCDinit;
     e8a:	10 92 d3 08 	sts	0x08D3, r1
     e8e:	08 95       	ret

00000e90 <LCDTask>:
	}
}

void LCDTask()
{
	LCD_task_init();
     e90:	f7 df       	rcall	.-18     	; 0xe80 <LCD_task_init>
	LCD_init();
     e92:	b7 da       	rcall	.-2706   	; 0x402 <LCD_init>
	LCD_DisplayString(1, s);
     e94:	60 91 43 01 	lds	r22, 0x0143
     e98:	70 91 44 01 	lds	r23, 0x0144
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	cd da       	rcall	.-2662   	; 0x43a <LCD_DisplayString>
	delay_ms(3000);
     ea0:	88 eb       	ldi	r24, 0xB8	; 184
     ea2:	9b e0       	ldi	r25, 0x0B	; 11
     ea4:	90 da       	rcall	.-2784   	; 0x3c6 <delay_ms>
	for(;;) 
	{
		LCD_tick();
     ea6:	4f dc       	rcall	.-1890   	; 0x746 <LCD_tick>
		vTaskDelay(500);
     ea8:	84 ef       	ldi	r24, 0xF4	; 244
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	e7 d4       	rcall	.+2510   	; 0x187c <vTaskDelay>
     eae:	fb cf       	rjmp	.-10     	; 0xea6 <LCDTask+0x16>

00000eb0 <temp_Init>:
	lcd_state = LCDinit;
}

void temp_Init()
{
	temp_state = temp_init;
     eb0:	10 92 db 08 	sts	0x08DB, r1
	setting_temp = false;
     eb4:	10 92 d9 08 	sts	0x08D9, r1
     eb8:	08 95       	ret

00000eba <TempTask>:
	}
}

void TempTask()
{
	temp_Init();
     eba:	fa df       	rcall	.-12     	; 0xeb0 <temp_Init>
	for(;;)
	{
		temp_tick();
     ebc:	fe de       	rcall	.-516    	; 0xcba <temp_tick>
		vTaskDelay(300);
     ebe:	8c e2       	ldi	r24, 0x2C	; 44
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	dc d4       	rcall	.+2488   	; 0x187c <vTaskDelay>
     ec4:	fb cf       	rjmp	.-10     	; 0xebc <TempTask+0x2>

00000ec6 <StartSecPulse>:
	}
}

// RTOS Start
void StartSecPulse(unsigned portBASE_TYPE Priority)
{
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	cf 93       	push	r28
	xTaskCreate(KeyTask, 		(signed portCHAR *)"KeyTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     ed6:	a1 2c       	mov	r10, r1
     ed8:	b1 2c       	mov	r11, r1
     eda:	c1 2c       	mov	r12, r1
     edc:	d1 2c       	mov	r13, r1
     ede:	e1 2c       	mov	r14, r1
     ee0:	f1 2c       	mov	r15, r1
     ee2:	08 2f       	mov	r16, r24
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	45 e5       	ldi	r20, 0x55	; 85
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	60 e5       	ldi	r22, 0x50	; 80
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	83 e2       	ldi	r24, 0x23	; 35
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	ff d1       	rcall	.+1022   	; 0x12f4 <xTaskGenericCreate>
	xTaskCreate(LCDTask, 		(signed portCHAR *)"LCDTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	45 e5       	ldi	r20, 0x55	; 85
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	68 e5       	ldi	r22, 0x58	; 88
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	88 e4       	ldi	r24, 0x48	; 72
     f04:	97 e0       	ldi	r25, 0x07	; 7
     f06:	f6 d1       	rcall	.+1004   	; 0x12f4 <xTaskGenericCreate>
	xTaskCreate(MotorTask, 		(signed portCHAR *)"MotorTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	45 e5       	ldi	r20, 0x55	; 85
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	60 e6       	ldi	r22, 0x60	; 96
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	8a e3       	ldi	r24, 0x3A	; 58
     f16:	97 e0       	ldi	r25, 0x07	; 7
     f18:	ed d1       	rcall	.+986    	; 0x12f4 <xTaskGenericCreate>
	xTaskCreate(TempTask,	 	(signed portCHAR *)"TempTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	45 e5       	ldi	r20, 0x55	; 85
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	6a e6       	ldi	r22, 0x6A	; 106
     f24:	71 e0       	ldi	r23, 0x01	; 1
     f26:	8d e5       	ldi	r24, 0x5D	; 93
     f28:	97 e0       	ldi	r25, 0x07	; 7
     f2a:	e4 d1       	rcall	.+968    	; 0x12f4 <xTaskGenericCreate>
	xTaskCreate(SendTask, 		(signed portCHAR *)"SendTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	45 e5       	ldi	r20, 0x55	; 85
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	63 e7       	ldi	r22, 0x73	; 115
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	8c ee       	ldi	r24, 0xEC	; 236
     f3a:	96 e0       	ldi	r25, 0x06	; 6
     f3c:	db d1       	rcall	.+950    	; 0x12f4 <xTaskGenericCreate>
	xTaskCreate(RecTask, 		(signed portCHAR *)"RecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	45 e5       	ldi	r20, 0x55	; 85
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	6c e7       	ldi	r22, 0x7C	; 124
     f48:	71 e0       	ldi	r23, 0x01	; 1
     f4a:	83 e1       	ldi	r24, 0x13	; 19
     f4c:	97 e0       	ldi	r25, 0x07	; 7
     f4e:	d2 d1       	rcall	.+932    	; 0x12f4 <xTaskGenericCreate>
}	
     f50:	cf 91       	pop	r28
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	bf 90       	pop	r11
     f5e:	af 90       	pop	r10
     f60:	08 95       	ret

00000f62 <main>:

int main(void) 
{
	DDRA = 0xFF; PORTA = 0x00; // Enable button on A7, A6
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	81 b9       	out	0x01, r24	; 1
     f66:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
     f68:	84 b9       	out	0x04, r24	; 4
     f6a:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F;
     f6c:	80 ef       	ldi	r24, 0xF0	; 240
     f6e:	87 b9       	out	0x07, r24	; 7
     f70:	9f e0       	ldi	r25, 0x0F	; 15
     f72:	98 b9       	out	0x08, r25	; 8
	DDRD = 0x0F; PORTD = 0xF0;
     f74:	9a b9       	out	0x0a, r25	; 10
     f76:	8b b9       	out	0x0b, r24	; 11

	//Start Tasks
	StartSecPulse(1);
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	a5 df       	rcall	.-182    	; 0xec6 <StartSecPulse>
	//RunSchedular 
	vTaskStartScheduler(); 
     f7c:	c3 d2       	rcall	.+1414   	; 0x1504 <vTaskStartScheduler>

	return 0; 
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	08 95       	ret

00000f84 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     f84:	31 e1       	ldi	r19, 0x11	; 17
     f86:	fc 01       	movw	r30, r24
     f88:	30 83       	st	Z, r19
     f8a:	31 97       	sbiw	r30, 0x01	; 1
     f8c:	22 e2       	ldi	r18, 0x22	; 34
     f8e:	20 83       	st	Z, r18
     f90:	fc 01       	movw	r30, r24
     f92:	32 97       	sbiw	r30, 0x02	; 2
     f94:	a3 e3       	ldi	r26, 0x33	; 51
     f96:	a0 83       	st	Z, r26
     f98:	fc 01       	movw	r30, r24
     f9a:	33 97       	sbiw	r30, 0x03	; 3
     f9c:	60 83       	st	Z, r22
     f9e:	fc 01       	movw	r30, r24
     fa0:	34 97       	sbiw	r30, 0x04	; 4
     fa2:	70 83       	st	Z, r23
     fa4:	fc 01       	movw	r30, r24
     fa6:	35 97       	sbiw	r30, 0x05	; 5
     fa8:	10 82       	st	Z, r1
     faa:	fc 01       	movw	r30, r24
     fac:	36 97       	sbiw	r30, 0x06	; 6
     fae:	60 e8       	ldi	r22, 0x80	; 128
     fb0:	60 83       	st	Z, r22
     fb2:	fc 01       	movw	r30, r24
     fb4:	37 97       	sbiw	r30, 0x07	; 7
     fb6:	10 82       	st	Z, r1
     fb8:	fc 01       	movw	r30, r24
     fba:	38 97       	sbiw	r30, 0x08	; 8
     fbc:	62 e0       	ldi	r22, 0x02	; 2
     fbe:	60 83       	st	Z, r22
     fc0:	fc 01       	movw	r30, r24
     fc2:	39 97       	sbiw	r30, 0x09	; 9
     fc4:	63 e0       	ldi	r22, 0x03	; 3
     fc6:	60 83       	st	Z, r22
     fc8:	fc 01       	movw	r30, r24
     fca:	3a 97       	sbiw	r30, 0x0a	; 10
     fcc:	64 e0       	ldi	r22, 0x04	; 4
     fce:	60 83       	st	Z, r22
     fd0:	fc 01       	movw	r30, r24
     fd2:	3b 97       	sbiw	r30, 0x0b	; 11
     fd4:	65 e0       	ldi	r22, 0x05	; 5
     fd6:	60 83       	st	Z, r22
     fd8:	fc 01       	movw	r30, r24
     fda:	3c 97       	sbiw	r30, 0x0c	; 12
     fdc:	66 e0       	ldi	r22, 0x06	; 6
     fde:	60 83       	st	Z, r22
     fe0:	fc 01       	movw	r30, r24
     fe2:	3d 97       	sbiw	r30, 0x0d	; 13
     fe4:	67 e0       	ldi	r22, 0x07	; 7
     fe6:	60 83       	st	Z, r22
     fe8:	fc 01       	movw	r30, r24
     fea:	3e 97       	sbiw	r30, 0x0e	; 14
     fec:	68 e0       	ldi	r22, 0x08	; 8
     fee:	60 83       	st	Z, r22
     ff0:	fc 01       	movw	r30, r24
     ff2:	3f 97       	sbiw	r30, 0x0f	; 15
     ff4:	69 e0       	ldi	r22, 0x09	; 9
     ff6:	60 83       	st	Z, r22
     ff8:	fc 01       	movw	r30, r24
     ffa:	70 97       	sbiw	r30, 0x10	; 16
     ffc:	60 e1       	ldi	r22, 0x10	; 16
     ffe:	60 83       	st	Z, r22
    1000:	fc 01       	movw	r30, r24
    1002:	71 97       	sbiw	r30, 0x11	; 17
    1004:	30 83       	st	Z, r19
    1006:	fc 01       	movw	r30, r24
    1008:	72 97       	sbiw	r30, 0x12	; 18
    100a:	32 e1       	ldi	r19, 0x12	; 18
    100c:	30 83       	st	Z, r19
    100e:	fc 01       	movw	r30, r24
    1010:	73 97       	sbiw	r30, 0x13	; 19
    1012:	33 e1       	ldi	r19, 0x13	; 19
    1014:	30 83       	st	Z, r19
    1016:	fc 01       	movw	r30, r24
    1018:	74 97       	sbiw	r30, 0x14	; 20
    101a:	34 e1       	ldi	r19, 0x14	; 20
    101c:	30 83       	st	Z, r19
    101e:	fc 01       	movw	r30, r24
    1020:	75 97       	sbiw	r30, 0x15	; 21
    1022:	35 e1       	ldi	r19, 0x15	; 21
    1024:	30 83       	st	Z, r19
    1026:	fc 01       	movw	r30, r24
    1028:	76 97       	sbiw	r30, 0x16	; 22
    102a:	36 e1       	ldi	r19, 0x16	; 22
    102c:	30 83       	st	Z, r19
    102e:	fc 01       	movw	r30, r24
    1030:	77 97       	sbiw	r30, 0x17	; 23
    1032:	37 e1       	ldi	r19, 0x17	; 23
    1034:	30 83       	st	Z, r19
    1036:	fc 01       	movw	r30, r24
    1038:	78 97       	sbiw	r30, 0x18	; 24
    103a:	38 e1       	ldi	r19, 0x18	; 24
    103c:	30 83       	st	Z, r19
    103e:	fc 01       	movw	r30, r24
    1040:	79 97       	sbiw	r30, 0x19	; 25
    1042:	39 e1       	ldi	r19, 0x19	; 25
    1044:	30 83       	st	Z, r19
    1046:	fc 01       	movw	r30, r24
    1048:	7a 97       	sbiw	r30, 0x1a	; 26
    104a:	30 e2       	ldi	r19, 0x20	; 32
    104c:	30 83       	st	Z, r19
    104e:	fc 01       	movw	r30, r24
    1050:	7b 97       	sbiw	r30, 0x1b	; 27
    1052:	31 e2       	ldi	r19, 0x21	; 33
    1054:	30 83       	st	Z, r19
    1056:	fc 01       	movw	r30, r24
    1058:	7c 97       	sbiw	r30, 0x1c	; 28
    105a:	20 83       	st	Z, r18
    105c:	fc 01       	movw	r30, r24
    105e:	7d 97       	sbiw	r30, 0x1d	; 29
    1060:	23 e2       	ldi	r18, 0x23	; 35
    1062:	20 83       	st	Z, r18
    1064:	fc 01       	movw	r30, r24
    1066:	7e 97       	sbiw	r30, 0x1e	; 30
    1068:	40 83       	st	Z, r20
    106a:	fc 01       	movw	r30, r24
    106c:	7f 97       	sbiw	r30, 0x1f	; 31
    106e:	50 83       	st	Z, r21
    1070:	fc 01       	movw	r30, r24
    1072:	b0 97       	sbiw	r30, 0x20	; 32
    1074:	26 e2       	ldi	r18, 0x26	; 38
    1076:	20 83       	st	Z, r18
    1078:	fc 01       	movw	r30, r24
    107a:	b1 97       	sbiw	r30, 0x21	; 33
    107c:	27 e2       	ldi	r18, 0x27	; 39
    107e:	20 83       	st	Z, r18
    1080:	fc 01       	movw	r30, r24
    1082:	b2 97       	sbiw	r30, 0x22	; 34
    1084:	28 e2       	ldi	r18, 0x28	; 40
    1086:	20 83       	st	Z, r18
    1088:	fc 01       	movw	r30, r24
    108a:	b3 97       	sbiw	r30, 0x23	; 35
    108c:	29 e2       	ldi	r18, 0x29	; 41
    108e:	20 83       	st	Z, r18
    1090:	fc 01       	movw	r30, r24
    1092:	b4 97       	sbiw	r30, 0x24	; 36
    1094:	20 e3       	ldi	r18, 0x30	; 48
    1096:	20 83       	st	Z, r18
    1098:	fc 01       	movw	r30, r24
    109a:	b5 97       	sbiw	r30, 0x25	; 37
    109c:	21 e3       	ldi	r18, 0x31	; 49
    109e:	20 83       	st	Z, r18
    10a0:	9c 01       	movw	r18, r24
    10a2:	26 52       	subi	r18, 0x26	; 38
    10a4:	31 09       	sbc	r19, r1
    10a6:	82 2f       	mov	r24, r18
    10a8:	93 2f       	mov	r25, r19
    10aa:	08 95       	ret

000010ac <xPortStartScheduler>:
    10ac:	10 92 89 00 	sts	0x0089, r1
    10b0:	8c e7       	ldi	r24, 0x7C	; 124
    10b2:	80 93 88 00 	sts	0x0088, r24
    10b6:	8b e0       	ldi	r24, 0x0B	; 11
    10b8:	80 93 81 00 	sts	0x0081, r24
    10bc:	ef e6       	ldi	r30, 0x6F	; 111
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	82 60       	ori	r24, 0x02	; 2
    10c4:	80 83       	st	Z, r24
    10c6:	a0 91 84 08 	lds	r26, 0x0884
    10ca:	b0 91 85 08 	lds	r27, 0x0885
    10ce:	cd 91       	ld	r28, X+
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	dd 91       	ld	r29, X+
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	9f 90       	pop	r9
    1104:	8f 90       	pop	r8
    1106:	7f 90       	pop	r7
    1108:	6f 90       	pop	r6
    110a:	5f 90       	pop	r5
    110c:	4f 90       	pop	r4
    110e:	3f 90       	pop	r3
    1110:	2f 90       	pop	r2
    1112:	1f 90       	pop	r1
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	08 95       	ret
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	08 95       	ret

00001120 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	0f 92       	push	r0
    1128:	1f 92       	push	r1
    112a:	11 24       	eor	r1, r1
    112c:	2f 92       	push	r2
    112e:	3f 92       	push	r3
    1130:	4f 92       	push	r4
    1132:	5f 92       	push	r5
    1134:	6f 92       	push	r6
    1136:	7f 92       	push	r7
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ef 93       	push	r30
    1166:	ff 93       	push	r31
    1168:	a0 91 84 08 	lds	r26, 0x0884
    116c:	b0 91 85 08 	lds	r27, 0x0885
    1170:	0d b6       	in	r0, 0x3d	; 61
    1172:	0d 92       	st	X+, r0
    1174:	0e b6       	in	r0, 0x3e	; 62
    1176:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1178:	9d d3       	rcall	.+1850   	; 0x18b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    117a:	a0 91 84 08 	lds	r26, 0x0884
    117e:	b0 91 85 08 	lds	r27, 0x0885
    1182:	cd 91       	ld	r28, X+
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	dd 91       	ld	r29, X+
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	6f 90       	pop	r6
    11be:	5f 90       	pop	r5
    11c0:	4f 90       	pop	r4
    11c2:	3f 90       	pop	r3
    11c4:	2f 90       	pop	r2
    11c6:	1f 90       	pop	r1
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    11ce:	08 95       	ret

000011d0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	0f 92       	push	r0
    11d8:	1f 92       	push	r1
    11da:	11 24       	eor	r1, r1
    11dc:	2f 92       	push	r2
    11de:	3f 92       	push	r3
    11e0:	4f 92       	push	r4
    11e2:	5f 92       	push	r5
    11e4:	6f 92       	push	r6
    11e6:	7f 92       	push	r7
    11e8:	8f 92       	push	r8
    11ea:	9f 92       	push	r9
    11ec:	af 92       	push	r10
    11ee:	bf 92       	push	r11
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    1218:	a0 91 84 08 	lds	r26, 0x0884
    121c:	b0 91 85 08 	lds	r27, 0x0885
    1220:	0d b6       	in	r0, 0x3d	; 61
    1222:	0d 92       	st	X+, r0
    1224:	0e b6       	in	r0, 0x3e	; 62
    1226:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1228:	9c d1       	rcall	.+824    	; 0x1562 <vTaskIncrementTick>
	vTaskSwitchContext();
    122a:	44 d3       	rcall	.+1672   	; 0x18b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    122c:	a0 91 84 08 	lds	r26, 0x0884
    1230:	b0 91 85 08 	lds	r27, 0x0885
    1234:	cd 91       	ld	r28, X+
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	dd 91       	ld	r29, X+
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	bf 90       	pop	r11
    1266:	af 90       	pop	r10
    1268:	9f 90       	pop	r9
    126a:	8f 90       	pop	r8
    126c:	7f 90       	pop	r7
    126e:	6f 90       	pop	r6
    1270:	5f 90       	pop	r5
    1272:	4f 90       	pop	r4
    1274:	3f 90       	pop	r3
    1276:	2f 90       	pop	r2
    1278:	1f 90       	pop	r1
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1280:	08 95       	ret

00001282 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1282:	a6 df       	rcall	.-180    	; 0x11d0 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1284:	18 95       	reti

00001286 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	ec 01       	movw	r28, r24
    128c:	e0 91 84 08 	lds	r30, 0x0884
    1290:	f0 91 85 08 	lds	r31, 0x0885
    1294:	93 83       	std	Z+3, r25	; 0x03
    1296:	82 83       	std	Z+2, r24	; 0x02
    1298:	80 91 7c 08 	lds	r24, 0x087C
    129c:	90 91 7d 08 	lds	r25, 0x087D
    12a0:	c8 17       	cp	r28, r24
    12a2:	d9 07       	cpc	r29, r25
    12a4:	68 f4       	brcc	.+26     	; 0x12c0 <prvAddCurrentTaskToDelayedList+0x3a>
    12a6:	60 91 84 08 	lds	r22, 0x0884
    12aa:	70 91 85 08 	lds	r23, 0x0885
    12ae:	80 91 80 08 	lds	r24, 0x0880
    12b2:	90 91 81 08 	lds	r25, 0x0881
    12b6:	6e 5f       	subi	r22, 0xFE	; 254
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    12be:	17 c0       	rjmp	.+46     	; 0x12ee <prvAddCurrentTaskToDelayedList+0x68>
    12c0:	60 91 84 08 	lds	r22, 0x0884
    12c4:	70 91 85 08 	lds	r23, 0x0885
    12c8:	80 91 82 08 	lds	r24, 0x0882
    12cc:	90 91 83 08 	lds	r25, 0x0883
    12d0:	6e 5f       	subi	r22, 0xFE	; 254
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    12d8:	80 91 45 01 	lds	r24, 0x0145
    12dc:	90 91 46 01 	lds	r25, 0x0146
    12e0:	c8 17       	cp	r28, r24
    12e2:	d9 07       	cpc	r29, r25
    12e4:	20 f4       	brcc	.+8      	; 0x12ee <prvAddCurrentTaskToDelayedList+0x68>
    12e6:	d0 93 46 01 	sts	0x0146, r29
    12ea:	c0 93 45 01 	sts	0x0145, r28
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret

000012f4 <xTaskGenericCreate>:
    12f4:	4f 92       	push	r4
    12f6:	5f 92       	push	r5
    12f8:	6f 92       	push	r6
    12fa:	7f 92       	push	r7
    12fc:	8f 92       	push	r8
    12fe:	9f 92       	push	r9
    1300:	af 92       	push	r10
    1302:	bf 92       	push	r11
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	4c 01       	movw	r8, r24
    1316:	3b 01       	movw	r6, r22
    1318:	5a 01       	movw	r10, r20
    131a:	29 01       	movw	r4, r18
    131c:	81 e2       	ldi	r24, 0x21	; 33
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    1324:	ec 01       	movw	r28, r24
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	09 f4       	brne	.+2      	; 0x132c <xTaskGenericCreate+0x38>
    132a:	da c0       	rjmp	.+436    	; 0x14e0 <xTaskGenericCreate+0x1ec>
    132c:	c1 14       	cp	r12, r1
    132e:	d1 04       	cpc	r13, r1
    1330:	09 f0       	breq	.+2      	; 0x1334 <xTaskGenericCreate+0x40>
    1332:	d3 c0       	rjmp	.+422    	; 0x14da <xTaskGenericCreate+0x1e6>
    1334:	c5 01       	movw	r24, r10
    1336:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    133a:	6c 01       	movw	r12, r24
    133c:	98 8f       	std	Y+24, r25	; 0x18
    133e:	8f 8b       	std	Y+23, r24	; 0x17
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	21 f4       	brne	.+8      	; 0x134c <xTaskGenericCreate+0x58>
    1344:	ce 01       	movw	r24, r28
    1346:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    134a:	ca c0       	rjmp	.+404    	; 0x14e0 <xTaskGenericCreate+0x1ec>
    134c:	a5 01       	movw	r20, r10
    134e:	65 ea       	ldi	r22, 0xA5	; 165
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	c6 01       	movw	r24, r12
    1354:	0c d3       	rcall	.+1560   	; 0x196e <memset>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	a8 1a       	sub	r10, r24
    135a:	b1 08       	sbc	r11, r1
    135c:	8f 89       	ldd	r24, Y+23	; 0x17
    135e:	98 8d       	ldd	r25, Y+24	; 0x18
    1360:	a8 0e       	add	r10, r24
    1362:	b9 1e       	adc	r11, r25
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	b3 01       	movw	r22, r6
    136a:	ce 01       	movw	r24, r28
    136c:	49 96       	adiw	r24, 0x19	; 25
    136e:	06 d3       	rcall	.+1548   	; 0x197c <strncpy>
    1370:	18 a2       	std	Y+32, r1	; 0x20
    1372:	10 2f       	mov	r17, r16
    1374:	04 30       	cpi	r16, 0x04	; 4
    1376:	08 f0       	brcs	.+2      	; 0x137a <xTaskGenericCreate+0x86>
    1378:	13 e0       	ldi	r17, 0x03	; 3
    137a:	1e 8b       	std	Y+22, r17	; 0x16
    137c:	6e 01       	movw	r12, r28
    137e:	e2 e0       	ldi	r30, 0x02	; 2
    1380:	ce 0e       	add	r12, r30
    1382:	d1 1c       	adc	r13, r1
    1384:	c6 01       	movw	r24, r12
    1386:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    138a:	ce 01       	movw	r24, r28
    138c:	0c 96       	adiw	r24, 0x0c	; 12
    138e:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    1392:	d9 87       	std	Y+9, r29	; 0x09
    1394:	c8 87       	std	Y+8, r28	; 0x08
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	81 1b       	sub	r24, r17
    139c:	91 09       	sbc	r25, r1
    139e:	9d 87       	std	Y+13, r25	; 0x0d
    13a0:	8c 87       	std	Y+12, r24	; 0x0c
    13a2:	db 8b       	std	Y+19, r29	; 0x13
    13a4:	ca 8b       	std	Y+18, r28	; 0x12
    13a6:	a2 01       	movw	r20, r4
    13a8:	b4 01       	movw	r22, r8
    13aa:	c5 01       	movw	r24, r10
    13ac:	eb dd       	rcall	.-1066   	; 0xf84 <pxPortInitialiseStack>
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	88 83       	st	Y, r24
    13b2:	e1 14       	cp	r14, r1
    13b4:	f1 04       	cpc	r15, r1
    13b6:	19 f0       	breq	.+6      	; 0x13be <xTaskGenericCreate+0xca>
    13b8:	f7 01       	movw	r30, r14
    13ba:	d1 83       	std	Z+1, r29	; 0x01
    13bc:	c0 83       	st	Z, r28
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	0f 92       	push	r0
    13c4:	80 91 7e 08 	lds	r24, 0x087E
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	80 93 7e 08 	sts	0x087E, r24
    13ce:	80 91 84 08 	lds	r24, 0x0884
    13d2:	90 91 85 08 	lds	r25, 0x0885
    13d6:	89 2b       	or	r24, r25
    13d8:	e1 f5       	brne	.+120    	; 0x1452 <xTaskGenericCreate+0x15e>
    13da:	d0 93 85 08 	sts	0x0885, r29
    13de:	c0 93 84 08 	sts	0x0884, r28
    13e2:	80 91 7e 08 	lds	r24, 0x087E
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	09 f0       	breq	.+2      	; 0x13ec <xTaskGenericCreate+0xf8>
    13ea:	42 c0       	rjmp	.+132    	; 0x1470 <xTaskGenericCreate+0x17c>
    13ec:	e1 2c       	mov	r14, r1
    13ee:	f1 2c       	mov	r15, r1
    13f0:	c7 01       	movw	r24, r14
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	8e 0d       	add	r24, r14
    1400:	9f 1d       	adc	r25, r15
    1402:	88 57       	subi	r24, 0x78	; 120
    1404:	97 4f       	sbci	r25, 0xF7	; 247
    1406:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    140a:	ff ef       	ldi	r31, 0xFF	; 255
    140c:	ef 1a       	sub	r14, r31
    140e:	ff 0a       	sbc	r15, r31
    1410:	84 e0       	ldi	r24, 0x04	; 4
    1412:	e8 16       	cp	r14, r24
    1414:	f1 04       	cpc	r15, r1
    1416:	61 f7       	brne	.-40     	; 0x13f0 <xTaskGenericCreate+0xfc>
    1418:	8c ea       	ldi	r24, 0xAC	; 172
    141a:	98 e0       	ldi	r25, 0x08	; 8
    141c:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1420:	85 eb       	ldi	r24, 0xB5	; 181
    1422:	98 e0       	ldi	r25, 0x08	; 8
    1424:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1428:	8e eb       	ldi	r24, 0xBE	; 190
    142a:	98 e0       	ldi	r25, 0x08	; 8
    142c:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1430:	87 ec       	ldi	r24, 0xC7	; 199
    1432:	98 e0       	ldi	r25, 0x08	; 8
    1434:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1438:	8c ea       	ldi	r24, 0xAC	; 172
    143a:	98 e0       	ldi	r25, 0x08	; 8
    143c:	90 93 83 08 	sts	0x0883, r25
    1440:	80 93 82 08 	sts	0x0882, r24
    1444:	85 eb       	ldi	r24, 0xB5	; 181
    1446:	98 e0       	ldi	r25, 0x08	; 8
    1448:	90 93 81 08 	sts	0x0881, r25
    144c:	80 93 80 08 	sts	0x0880, r24
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <xTaskGenericCreate+0x17c>
    1452:	80 91 7a 08 	lds	r24, 0x087A
    1456:	81 11       	cpse	r24, r1
    1458:	0b c0       	rjmp	.+22     	; 0x1470 <xTaskGenericCreate+0x17c>
    145a:	e0 91 84 08 	lds	r30, 0x0884
    145e:	f0 91 85 08 	lds	r31, 0x0885
    1462:	86 89       	ldd	r24, Z+22	; 0x16
    1464:	08 17       	cp	r16, r24
    1466:	20 f0       	brcs	.+8      	; 0x1470 <xTaskGenericCreate+0x17c>
    1468:	d0 93 85 08 	sts	0x0885, r29
    146c:	c0 93 84 08 	sts	0x0884, r28
    1470:	8e 89       	ldd	r24, Y+22	; 0x16
    1472:	90 91 86 08 	lds	r25, 0x0886
    1476:	98 17       	cp	r25, r24
    1478:	10 f4       	brcc	.+4      	; 0x147e <xTaskGenericCreate+0x18a>
    147a:	80 93 86 08 	sts	0x0886, r24
    147e:	90 91 87 08 	lds	r25, 0x0887
    1482:	9f 5f       	subi	r25, 0xFF	; 255
    1484:	90 93 87 08 	sts	0x0887, r25
    1488:	90 91 7b 08 	lds	r25, 0x087B
    148c:	98 17       	cp	r25, r24
    148e:	10 f4       	brcc	.+4      	; 0x1494 <xTaskGenericCreate+0x1a0>
    1490:	80 93 7b 08 	sts	0x087B, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9c 01       	movw	r18, r24
    1498:	22 0f       	add	r18, r18
    149a:	33 1f       	adc	r19, r19
    149c:	22 0f       	add	r18, r18
    149e:	33 1f       	adc	r19, r19
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	82 0f       	add	r24, r18
    14a6:	93 1f       	adc	r25, r19
    14a8:	b6 01       	movw	r22, r12
    14aa:	88 57       	subi	r24, 0x78	; 120
    14ac:	97 4f       	sbci	r25, 0xF7	; 247
    14ae:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    14b2:	0f 90       	pop	r0
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	80 91 7a 08 	lds	r24, 0x087A
    14ba:	88 23       	and	r24, r24
    14bc:	51 f0       	breq	.+20     	; 0x14d2 <xTaskGenericCreate+0x1de>
    14be:	e0 91 84 08 	lds	r30, 0x0884
    14c2:	f0 91 85 08 	lds	r31, 0x0885
    14c6:	86 89       	ldd	r24, Z+22	; 0x16
    14c8:	80 17       	cp	r24, r16
    14ca:	28 f4       	brcc	.+10     	; 0x14d6 <xTaskGenericCreate+0x1e2>
    14cc:	29 de       	rcall	.-942    	; 0x1120 <vPortYield>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	08 c0       	rjmp	.+16     	; 0x14e2 <xTaskGenericCreate+0x1ee>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <xTaskGenericCreate+0x1ee>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <xTaskGenericCreate+0x1ee>
    14da:	d8 8e       	std	Y+24, r13	; 0x18
    14dc:	cf 8a       	std	Y+23, r12	; 0x17
    14de:	36 cf       	rjmp	.-404    	; 0x134c <xTaskGenericCreate+0x58>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	bf 90       	pop	r11
    14f4:	af 90       	pop	r10
    14f6:	9f 90       	pop	r9
    14f8:	8f 90       	pop	r8
    14fa:	7f 90       	pop	r7
    14fc:	6f 90       	pop	r6
    14fe:	5f 90       	pop	r5
    1500:	4f 90       	pop	r4
    1502:	08 95       	ret

00001504 <vTaskStartScheduler>:
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	a1 2c       	mov	r10, r1
    1514:	b1 2c       	mov	r11, r1
    1516:	c1 2c       	mov	r12, r1
    1518:	d1 2c       	mov	r13, r1
    151a:	e1 2c       	mov	r14, r1
    151c:	f1 2c       	mov	r15, r1
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	45 e5       	ldi	r20, 0x55	; 85
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	62 e9       	ldi	r22, 0x92	; 146
    152a:	72 e0       	ldi	r23, 0x02	; 2
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	9c e0       	ldi	r25, 0x0C	; 12
    1530:	e1 de       	rcall	.-574    	; 0x12f4 <xTaskGenericCreate>
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	41 f4       	brne	.+16     	; 0x1546 <vTaskStartScheduler+0x42>
    1536:	f8 94       	cli
    1538:	80 93 7a 08 	sts	0x087A, r24
    153c:	10 92 7d 08 	sts	0x087D, r1
    1540:	10 92 7c 08 	sts	0x087C, r1
    1544:	b3 dd       	rcall	.-1178   	; 0x10ac <xPortStartScheduler>
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	08 95       	ret

00001556 <vTaskSuspendAll>:
    1556:	80 91 79 08 	lds	r24, 0x0879
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	80 93 79 08 	sts	0x0879, r24
    1560:	08 95       	ret

00001562 <vTaskIncrementTick>:
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	80 91 79 08 	lds	r24, 0x0879
    156e:	81 11       	cpse	r24, r1
    1570:	b2 c0       	rjmp	.+356    	; 0x16d6 <vTaskIncrementTick+0x174>
    1572:	80 91 7c 08 	lds	r24, 0x087C
    1576:	90 91 7d 08 	lds	r25, 0x087D
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	90 93 7d 08 	sts	0x087D, r25
    1580:	80 93 7c 08 	sts	0x087C, r24
    1584:	80 91 7c 08 	lds	r24, 0x087C
    1588:	90 91 7d 08 	lds	r25, 0x087D
    158c:	89 2b       	or	r24, r25
    158e:	99 f5       	brne	.+102    	; 0x15f6 <vTaskIncrementTick+0x94>
    1590:	80 91 82 08 	lds	r24, 0x0882
    1594:	90 91 83 08 	lds	r25, 0x0883
    1598:	20 91 80 08 	lds	r18, 0x0880
    159c:	30 91 81 08 	lds	r19, 0x0881
    15a0:	30 93 83 08 	sts	0x0883, r19
    15a4:	20 93 82 08 	sts	0x0882, r18
    15a8:	90 93 81 08 	sts	0x0881, r25
    15ac:	80 93 80 08 	sts	0x0880, r24
    15b0:	80 91 76 08 	lds	r24, 0x0876
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	80 93 76 08 	sts	0x0876, r24
    15ba:	e0 91 82 08 	lds	r30, 0x0882
    15be:	f0 91 83 08 	lds	r31, 0x0883
    15c2:	80 81       	ld	r24, Z
    15c4:	81 11       	cpse	r24, r1
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <vTaskIncrementTick+0x74>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	90 93 46 01 	sts	0x0146, r25
    15d0:	80 93 45 01 	sts	0x0145, r24
    15d4:	10 c0       	rjmp	.+32     	; 0x15f6 <vTaskIncrementTick+0x94>
    15d6:	e0 91 82 08 	lds	r30, 0x0882
    15da:	f0 91 83 08 	lds	r31, 0x0883
    15de:	05 80       	ldd	r0, Z+5	; 0x05
    15e0:	f6 81       	ldd	r31, Z+6	; 0x06
    15e2:	e0 2d       	mov	r30, r0
    15e4:	06 80       	ldd	r0, Z+6	; 0x06
    15e6:	f7 81       	ldd	r31, Z+7	; 0x07
    15e8:	e0 2d       	mov	r30, r0
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	90 93 46 01 	sts	0x0146, r25
    15f2:	80 93 45 01 	sts	0x0145, r24
    15f6:	20 91 7c 08 	lds	r18, 0x087C
    15fa:	30 91 7d 08 	lds	r19, 0x087D
    15fe:	80 91 45 01 	lds	r24, 0x0145
    1602:	90 91 46 01 	lds	r25, 0x0146
    1606:	28 17       	cp	r18, r24
    1608:	39 07       	cpc	r19, r25
    160a:	08 f4       	brcc	.+2      	; 0x160e <vTaskIncrementTick+0xac>
    160c:	69 c0       	rjmp	.+210    	; 0x16e0 <vTaskIncrementTick+0x17e>
    160e:	e0 91 82 08 	lds	r30, 0x0882
    1612:	f0 91 83 08 	lds	r31, 0x0883
    1616:	80 81       	ld	r24, Z
    1618:	88 23       	and	r24, r24
    161a:	99 f0       	breq	.+38     	; 0x1642 <vTaskIncrementTick+0xe0>
    161c:	e0 91 82 08 	lds	r30, 0x0882
    1620:	f0 91 83 08 	lds	r31, 0x0883
    1624:	05 80       	ldd	r0, Z+5	; 0x05
    1626:	f6 81       	ldd	r31, Z+6	; 0x06
    1628:	e0 2d       	mov	r30, r0
    162a:	c6 81       	ldd	r28, Z+6	; 0x06
    162c:	d7 81       	ldd	r29, Z+7	; 0x07
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	9b 81       	ldd	r25, Y+3	; 0x03
    1632:	20 91 7c 08 	lds	r18, 0x087C
    1636:	30 91 7d 08 	lds	r19, 0x087D
    163a:	28 17       	cp	r18, r24
    163c:	39 07       	cpc	r19, r25
    163e:	f8 f4       	brcc	.+62     	; 0x167e <vTaskIncrementTick+0x11c>
    1640:	19 c0       	rjmp	.+50     	; 0x1674 <vTaskIncrementTick+0x112>
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	90 93 46 01 	sts	0x0146, r25
    164a:	80 93 45 01 	sts	0x0145, r24
    164e:	48 c0       	rjmp	.+144    	; 0x16e0 <vTaskIncrementTick+0x17e>
    1650:	e0 91 82 08 	lds	r30, 0x0882
    1654:	f0 91 83 08 	lds	r31, 0x0883
    1658:	05 80       	ldd	r0, Z+5	; 0x05
    165a:	f6 81       	ldd	r31, Z+6	; 0x06
    165c:	e0 2d       	mov	r30, r0
    165e:	c6 81       	ldd	r28, Z+6	; 0x06
    1660:	d7 81       	ldd	r29, Z+7	; 0x07
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	9b 81       	ldd	r25, Y+3	; 0x03
    1666:	20 91 7c 08 	lds	r18, 0x087C
    166a:	30 91 7d 08 	lds	r19, 0x087D
    166e:	28 17       	cp	r18, r24
    1670:	39 07       	cpc	r19, r25
    1672:	28 f4       	brcc	.+10     	; 0x167e <vTaskIncrementTick+0x11c>
    1674:	90 93 46 01 	sts	0x0146, r25
    1678:	80 93 45 01 	sts	0x0145, r24
    167c:	31 c0       	rjmp	.+98     	; 0x16e0 <vTaskIncrementTick+0x17e>
    167e:	8e 01       	movw	r16, r28
    1680:	0e 5f       	subi	r16, 0xFE	; 254
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	c8 01       	movw	r24, r16
    1686:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    168a:	8c 89       	ldd	r24, Y+20	; 0x14
    168c:	9d 89       	ldd	r25, Y+21	; 0x15
    168e:	89 2b       	or	r24, r25
    1690:	21 f0       	breq	.+8      	; 0x169a <vTaskIncrementTick+0x138>
    1692:	ce 01       	movw	r24, r28
    1694:	0c 96       	adiw	r24, 0x0c	; 12
    1696:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    169a:	8e 89       	ldd	r24, Y+22	; 0x16
    169c:	90 91 7b 08 	lds	r25, 0x087B
    16a0:	98 17       	cp	r25, r24
    16a2:	10 f4       	brcc	.+4      	; 0x16a8 <vTaskIncrementTick+0x146>
    16a4:	80 93 7b 08 	sts	0x087B, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 01       	movw	r18, r24
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	22 0f       	add	r18, r18
    16b2:	33 1f       	adc	r19, r19
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	b8 01       	movw	r22, r16
    16be:	88 57       	subi	r24, 0x78	; 120
    16c0:	97 4f       	sbci	r25, 0xF7	; 247
    16c2:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    16c6:	e0 91 82 08 	lds	r30, 0x0882
    16ca:	f0 91 83 08 	lds	r31, 0x0883
    16ce:	80 81       	ld	r24, Z
    16d0:	81 11       	cpse	r24, r1
    16d2:	be cf       	rjmp	.-132    	; 0x1650 <vTaskIncrementTick+0xee>
    16d4:	b6 cf       	rjmp	.-148    	; 0x1642 <vTaskIncrementTick+0xe0>
    16d6:	80 91 78 08 	lds	r24, 0x0878
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	80 93 78 08 	sts	0x0878, r24
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	08 95       	ret

000016ea <xTaskResumeAll>:
    16ea:	af 92       	push	r10
    16ec:	bf 92       	push	r11
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	0f 92       	push	r0
    1704:	80 91 79 08 	lds	r24, 0x0879
    1708:	81 50       	subi	r24, 0x01	; 1
    170a:	80 93 79 08 	sts	0x0879, r24
    170e:	80 91 79 08 	lds	r24, 0x0879
    1712:	81 11       	cpse	r24, r1
    1714:	66 c0       	rjmp	.+204    	; 0x17e2 <xTaskResumeAll+0xf8>
    1716:	80 91 7e 08 	lds	r24, 0x087E
    171a:	81 11       	cpse	r24, r1
    171c:	30 c0       	rjmp	.+96     	; 0x177e <xTaskResumeAll+0x94>
    171e:	64 c0       	rjmp	.+200    	; 0x17e8 <xTaskResumeAll+0xfe>
    1720:	d6 01       	movw	r26, r12
    1722:	ed 91       	ld	r30, X+
    1724:	fc 91       	ld	r31, X
    1726:	c6 81       	ldd	r28, Z+6	; 0x06
    1728:	d7 81       	ldd	r29, Z+7	; 0x07
    172a:	ce 01       	movw	r24, r28
    172c:	0c 96       	adiw	r24, 0x0c	; 12
    172e:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    1732:	8e 01       	movw	r16, r28
    1734:	0e 5f       	subi	r16, 0xFE	; 254
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	c8 01       	movw	r24, r16
    173a:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    173e:	8e 89       	ldd	r24, Y+22	; 0x16
    1740:	90 91 7b 08 	lds	r25, 0x087B
    1744:	98 17       	cp	r25, r24
    1746:	10 f4       	brcc	.+4      	; 0x174c <xTaskResumeAll+0x62>
    1748:	80 93 7b 08 	sts	0x087B, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c 01       	movw	r18, r24
    1750:	22 0f       	add	r18, r18
    1752:	33 1f       	adc	r19, r19
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	22 0f       	add	r18, r18
    175a:	33 1f       	adc	r19, r19
    175c:	82 0f       	add	r24, r18
    175e:	93 1f       	adc	r25, r19
    1760:	b8 01       	movw	r22, r16
    1762:	88 57       	subi	r24, 0x78	; 120
    1764:	97 4f       	sbci	r25, 0xF7	; 247
    1766:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    176a:	e0 91 84 08 	lds	r30, 0x0884
    176e:	f0 91 85 08 	lds	r31, 0x0885
    1772:	9e 89       	ldd	r25, Y+22	; 0x16
    1774:	86 89       	ldd	r24, Z+22	; 0x16
    1776:	98 17       	cp	r25, r24
    1778:	88 f0       	brcs	.+34     	; 0x179c <xTaskResumeAll+0xb2>
    177a:	ba 2c       	mov	r11, r10
    177c:	0f c0       	rjmp	.+30     	; 0x179c <xTaskResumeAll+0xb2>
    177e:	b1 2c       	mov	r11, r1
    1780:	0f 2e       	mov	r0, r31
    1782:	fe eb       	ldi	r31, 0xBE	; 190
    1784:	ef 2e       	mov	r14, r31
    1786:	f8 e0       	ldi	r31, 0x08	; 8
    1788:	ff 2e       	mov	r15, r31
    178a:	f0 2d       	mov	r31, r0
    178c:	0f 2e       	mov	r0, r31
    178e:	f3 ec       	ldi	r31, 0xC3	; 195
    1790:	cf 2e       	mov	r12, r31
    1792:	f8 e0       	ldi	r31, 0x08	; 8
    1794:	df 2e       	mov	r13, r31
    1796:	f0 2d       	mov	r31, r0
    1798:	aa 24       	eor	r10, r10
    179a:	a3 94       	inc	r10
    179c:	f7 01       	movw	r30, r14
    179e:	80 81       	ld	r24, Z
    17a0:	81 11       	cpse	r24, r1
    17a2:	be cf       	rjmp	.-132    	; 0x1720 <xTaskResumeAll+0x36>
    17a4:	80 91 78 08 	lds	r24, 0x0878
    17a8:	88 23       	and	r24, r24
    17aa:	79 f0       	breq	.+30     	; 0x17ca <xTaskResumeAll+0xe0>
    17ac:	80 91 78 08 	lds	r24, 0x0878
    17b0:	88 23       	and	r24, r24
    17b2:	91 f0       	breq	.+36     	; 0x17d8 <xTaskResumeAll+0xee>
    17b4:	d6 de       	rcall	.-596    	; 0x1562 <vTaskIncrementTick>
    17b6:	80 91 78 08 	lds	r24, 0x0878
    17ba:	81 50       	subi	r24, 0x01	; 1
    17bc:	80 93 78 08 	sts	0x0878, r24
    17c0:	80 91 78 08 	lds	r24, 0x0878
    17c4:	81 11       	cpse	r24, r1
    17c6:	f6 cf       	rjmp	.-20     	; 0x17b4 <xTaskResumeAll+0xca>
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <xTaskResumeAll+0xee>
    17ca:	f1 e0       	ldi	r31, 0x01	; 1
    17cc:	bf 16       	cp	r11, r31
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <xTaskResumeAll+0xee>
    17d0:	80 91 77 08 	lds	r24, 0x0877
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	39 f4       	brne	.+14     	; 0x17e6 <xTaskResumeAll+0xfc>
    17d8:	10 92 77 08 	sts	0x0877, r1
    17dc:	a1 dc       	rcall	.-1726   	; 0x1120 <vPortYield>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <xTaskResumeAll+0xfe>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <xTaskResumeAll+0xfe>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	08 95       	ret

00001802 <prvIdleTask>:
    1802:	0f 2e       	mov	r0, r31
    1804:	f7 ec       	ldi	r31, 0xC7	; 199
    1806:	ef 2e       	mov	r14, r31
    1808:	f8 e0       	ldi	r31, 0x08	; 8
    180a:	ff 2e       	mov	r15, r31
    180c:	f0 2d       	mov	r31, r0
    180e:	0f 2e       	mov	r0, r31
    1810:	fc ec       	ldi	r31, 0xCC	; 204
    1812:	cf 2e       	mov	r12, r31
    1814:	f8 e0       	ldi	r31, 0x08	; 8
    1816:	df 2e       	mov	r13, r31
    1818:	f0 2d       	mov	r31, r0
    181a:	c8 e8       	ldi	r28, 0x88	; 136
    181c:	d8 e0       	ldi	r29, 0x08	; 8
    181e:	80 91 7f 08 	lds	r24, 0x087F
    1822:	88 23       	and	r24, r24
    1824:	31 f1       	breq	.+76     	; 0x1872 <prvIdleTask+0x70>
    1826:	97 de       	rcall	.-722    	; 0x1556 <vTaskSuspendAll>
    1828:	d7 01       	movw	r26, r14
    182a:	1c 91       	ld	r17, X
    182c:	5e df       	rcall	.-324    	; 0x16ea <xTaskResumeAll>
    182e:	11 23       	and	r17, r17
    1830:	01 f1       	breq	.+64     	; 0x1872 <prvIdleTask+0x70>
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	0f 92       	push	r0
    1838:	d6 01       	movw	r26, r12
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	06 81       	ldd	r16, Z+6	; 0x06
    1840:	17 81       	ldd	r17, Z+7	; 0x07
    1842:	c8 01       	movw	r24, r16
    1844:	02 96       	adiw	r24, 0x02	; 2
    1846:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    184a:	80 91 7e 08 	lds	r24, 0x087E
    184e:	81 50       	subi	r24, 0x01	; 1
    1850:	80 93 7e 08 	sts	0x087E, r24
    1854:	80 91 7f 08 	lds	r24, 0x087F
    1858:	81 50       	subi	r24, 0x01	; 1
    185a:	80 93 7f 08 	sts	0x087F, r24
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	f8 01       	movw	r30, r16
    1864:	87 89       	ldd	r24, Z+23	; 0x17
    1866:	90 8d       	ldd	r25, Z+24	; 0x18
    1868:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    186c:	c8 01       	movw	r24, r16
    186e:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    1872:	88 81       	ld	r24, Y
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	98 f2       	brcs	.-90     	; 0x181e <prvIdleTask+0x1c>
    1878:	53 dc       	rcall	.-1882   	; 0x1120 <vPortYield>
    187a:	d1 cf       	rjmp	.-94     	; 0x181e <prvIdleTask+0x1c>

0000187c <vTaskDelay>:
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	99 f0       	breq	.+38     	; 0x18ac <vTaskDelay+0x30>
    1886:	67 de       	rcall	.-818    	; 0x1556 <vTaskSuspendAll>
    1888:	80 91 7c 08 	lds	r24, 0x087C
    188c:	90 91 7d 08 	lds	r25, 0x087D
    1890:	c8 0f       	add	r28, r24
    1892:	d9 1f       	adc	r29, r25
    1894:	80 91 84 08 	lds	r24, 0x0884
    1898:	90 91 85 08 	lds	r25, 0x0885
    189c:	02 96       	adiw	r24, 0x02	; 2
    189e:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    18a2:	ce 01       	movw	r24, r28
    18a4:	f0 dc       	rcall	.-1568   	; 0x1286 <prvAddCurrentTaskToDelayedList>
    18a6:	21 df       	rcall	.-446    	; 0x16ea <xTaskResumeAll>
    18a8:	81 11       	cpse	r24, r1
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <vTaskDelay+0x32>
    18ac:	39 dc       	rcall	.-1934   	; 0x1120 <vPortYield>
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    18b4:	80 91 79 08 	lds	r24, 0x0879
    18b8:	81 11       	cpse	r24, r1
    18ba:	13 c0       	rjmp	.+38     	; 0x18e2 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    18bc:	80 91 7b 08 	lds	r24, 0x087B
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	8e 0f       	add	r24, r30
    18d2:	9f 1f       	adc	r25, r31
    18d4:	fc 01       	movw	r30, r24
    18d6:	e8 57       	subi	r30, 0x78	; 120
    18d8:	f7 4f       	sbci	r31, 0xF7	; 247
    18da:	80 81       	ld	r24, Z
    18dc:	88 23       	and	r24, r24
    18de:	29 f0       	breq	.+10     	; 0x18ea <vTaskSwitchContext+0x36>
    18e0:	1b c0       	rjmp	.+54     	; 0x1918 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 93 77 08 	sts	0x0877, r24
    18e8:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    18ea:	80 91 7b 08 	lds	r24, 0x087B
    18ee:	81 50       	subi	r24, 0x01	; 1
    18f0:	80 93 7b 08 	sts	0x087B, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    18f4:	80 91 7b 08 	lds	r24, 0x087B
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	fc 01       	movw	r30, r24
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	8e 0f       	add	r24, r30
    190a:	9f 1f       	adc	r25, r31
    190c:	fc 01       	movw	r30, r24
    190e:	e8 57       	subi	r30, 0x78	; 120
    1910:	f7 4f       	sbci	r31, 0xF7	; 247
    1912:	80 81       	ld	r24, Z
    1914:	88 23       	and	r24, r24
    1916:	49 f3       	breq	.-46     	; 0x18ea <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1918:	e0 91 7b 08 	lds	r30, 0x087B
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	cf 01       	movw	r24, r30
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	e8 0f       	add	r30, r24
    192e:	f9 1f       	adc	r31, r25
    1930:	e8 57       	subi	r30, 0x78	; 120
    1932:	f7 4f       	sbci	r31, 0xF7	; 247
    1934:	a1 81       	ldd	r26, Z+1	; 0x01
    1936:	b2 81       	ldd	r27, Z+2	; 0x02
    1938:	12 96       	adiw	r26, 0x02	; 2
    193a:	0d 90       	ld	r0, X+
    193c:	bc 91       	ld	r27, X
    193e:	a0 2d       	mov	r26, r0
    1940:	b2 83       	std	Z+2, r27	; 0x02
    1942:	a1 83       	std	Z+1, r26	; 0x01
    1944:	cf 01       	movw	r24, r30
    1946:	03 96       	adiw	r24, 0x03	; 3
    1948:	a8 17       	cp	r26, r24
    194a:	b9 07       	cpc	r27, r25
    194c:	31 f4       	brne	.+12     	; 0x195a <vTaskSwitchContext+0xa6>
    194e:	12 96       	adiw	r26, 0x02	; 2
    1950:	8d 91       	ld	r24, X+
    1952:	9c 91       	ld	r25, X
    1954:	13 97       	sbiw	r26, 0x03	; 3
    1956:	92 83       	std	Z+2, r25	; 0x02
    1958:	81 83       	std	Z+1, r24	; 0x01
    195a:	01 80       	ldd	r0, Z+1	; 0x01
    195c:	f2 81       	ldd	r31, Z+2	; 0x02
    195e:	e0 2d       	mov	r30, r0
    1960:	86 81       	ldd	r24, Z+6	; 0x06
    1962:	97 81       	ldd	r25, Z+7	; 0x07
    1964:	90 93 85 08 	sts	0x0885, r25
    1968:	80 93 84 08 	sts	0x0884, r24
    196c:	08 95       	ret

0000196e <memset>:
    196e:	dc 01       	movw	r26, r24
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <memset+0x6>
    1972:	6d 93       	st	X+, r22
    1974:	41 50       	subi	r20, 0x01	; 1
    1976:	50 40       	sbci	r21, 0x00	; 0
    1978:	e0 f7       	brcc	.-8      	; 0x1972 <memset+0x4>
    197a:	08 95       	ret

0000197c <strncpy>:
    197c:	fb 01       	movw	r30, r22
    197e:	dc 01       	movw	r26, r24
    1980:	41 50       	subi	r20, 0x01	; 1
    1982:	50 40       	sbci	r21, 0x00	; 0
    1984:	48 f0       	brcs	.+18     	; 0x1998 <strncpy+0x1c>
    1986:	01 90       	ld	r0, Z+
    1988:	0d 92       	st	X+, r0
    198a:	00 20       	and	r0, r0
    198c:	c9 f7       	brne	.-14     	; 0x1980 <strncpy+0x4>
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <strncpy+0x16>
    1990:	1d 92       	st	X+, r1
    1992:	41 50       	subi	r20, 0x01	; 1
    1994:	50 40       	sbci	r21, 0x00	; 0
    1996:	e0 f7       	brcc	.-8      	; 0x1990 <strncpy+0x14>
    1998:	08 95       	ret

0000199a <snprintf>:
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	2e 97       	sbiw	r28, 0x0e	; 14
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	0d 89       	ldd	r16, Y+21	; 0x15
    19b4:	1e 89       	ldd	r17, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	26 e0       	ldi	r18, 0x06	; 6
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	1a 83       	std	Y+2, r17	; 0x02
    19c0:	09 83       	std	Y+1, r16	; 0x01
    19c2:	97 ff       	sbrs	r25, 7
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <snprintf+0x30>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e8       	ldi	r25, 0x80	; 128
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	ce 01       	movw	r24, r28
    19d2:	4b 96       	adiw	r24, 0x1b	; 27
    19d4:	ac 01       	movw	r20, r24
    19d6:	69 8d       	ldd	r22, Y+25	; 0x19
    19d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19da:	ce 01       	movw	r24, r28
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	19 d0       	rcall	.+50     	; 0x1a12 <vfprintf>
    19e0:	4d 81       	ldd	r20, Y+5	; 0x05
    19e2:	5e 81       	ldd	r21, Y+6	; 0x06
    19e4:	57 fd       	sbrc	r21, 7
    19e6:	0a c0       	rjmp	.+20     	; 0x19fc <snprintf+0x62>
    19e8:	2f 81       	ldd	r18, Y+7	; 0x07
    19ea:	38 85       	ldd	r19, Y+8	; 0x08
    19ec:	42 17       	cp	r20, r18
    19ee:	53 07       	cpc	r21, r19
    19f0:	0c f4       	brge	.+2      	; 0x19f4 <snprintf+0x5a>
    19f2:	9a 01       	movw	r18, r20
    19f4:	f8 01       	movw	r30, r16
    19f6:	e2 0f       	add	r30, r18
    19f8:	f3 1f       	adc	r31, r19
    19fa:	10 82       	st	Z, r1
    19fc:	2e 96       	adiw	r28, 0x0e	; 14
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	08 95       	ret

00001a12 <vfprintf>:
    1a12:	2f 92       	push	r2
    1a14:	3f 92       	push	r3
    1a16:	4f 92       	push	r4
    1a18:	5f 92       	push	r5
    1a1a:	6f 92       	push	r6
    1a1c:	7f 92       	push	r7
    1a1e:	8f 92       	push	r8
    1a20:	9f 92       	push	r9
    1a22:	af 92       	push	r10
    1a24:	bf 92       	push	r11
    1a26:	cf 92       	push	r12
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	7c 01       	movw	r14, r24
    1a48:	6b 01       	movw	r12, r22
    1a4a:	8a 01       	movw	r16, r20
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	17 82       	std	Z+7, r1	; 0x07
    1a50:	16 82       	std	Z+6, r1	; 0x06
    1a52:	83 81       	ldd	r24, Z+3	; 0x03
    1a54:	81 ff       	sbrs	r24, 1
    1a56:	b9 c1       	rjmp	.+882    	; 0x1dca <vfprintf+0x3b8>
    1a58:	88 24       	eor	r8, r8
    1a5a:	83 94       	inc	r8
    1a5c:	91 2c       	mov	r9, r1
    1a5e:	8c 0e       	add	r8, r28
    1a60:	9d 1e       	adc	r9, r29
    1a62:	f7 01       	movw	r30, r14
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	f6 01       	movw	r30, r12
    1a68:	93 fd       	sbrc	r25, 3
    1a6a:	85 91       	lpm	r24, Z+
    1a6c:	93 ff       	sbrs	r25, 3
    1a6e:	81 91       	ld	r24, Z+
    1a70:	6f 01       	movw	r12, r30
    1a72:	88 23       	and	r24, r24
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <vfprintf+0x66>
    1a76:	a5 c1       	rjmp	.+842    	; 0x1dc2 <vfprintf+0x3b0>
    1a78:	85 32       	cpi	r24, 0x25	; 37
    1a7a:	39 f4       	brne	.+14     	; 0x1a8a <vfprintf+0x78>
    1a7c:	93 fd       	sbrc	r25, 3
    1a7e:	85 91       	lpm	r24, Z+
    1a80:	93 ff       	sbrs	r25, 3
    1a82:	81 91       	ld	r24, Z+
    1a84:	6f 01       	movw	r12, r30
    1a86:	85 32       	cpi	r24, 0x25	; 37
    1a88:	21 f4       	brne	.+8      	; 0x1a92 <vfprintf+0x80>
    1a8a:	b7 01       	movw	r22, r14
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	cf d1       	rcall	.+926    	; 0x1e2e <fputc>
    1a90:	e8 cf       	rjmp	.-48     	; 0x1a62 <vfprintf+0x50>
    1a92:	51 2c       	mov	r5, r1
    1a94:	31 2c       	mov	r3, r1
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	20 32       	cpi	r18, 0x20	; 32
    1a9a:	a8 f4       	brcc	.+42     	; 0x1ac6 <vfprintf+0xb4>
    1a9c:	8b 32       	cpi	r24, 0x2B	; 43
    1a9e:	61 f0       	breq	.+24     	; 0x1ab8 <vfprintf+0xa6>
    1aa0:	28 f4       	brcc	.+10     	; 0x1aac <vfprintf+0x9a>
    1aa2:	80 32       	cpi	r24, 0x20	; 32
    1aa4:	51 f0       	breq	.+20     	; 0x1aba <vfprintf+0xa8>
    1aa6:	83 32       	cpi	r24, 0x23	; 35
    1aa8:	71 f4       	brne	.+28     	; 0x1ac6 <vfprintf+0xb4>
    1aaa:	0b c0       	rjmp	.+22     	; 0x1ac2 <vfprintf+0xb0>
    1aac:	8d 32       	cpi	r24, 0x2D	; 45
    1aae:	39 f0       	breq	.+14     	; 0x1abe <vfprintf+0xac>
    1ab0:	80 33       	cpi	r24, 0x30	; 48
    1ab2:	49 f4       	brne	.+18     	; 0x1ac6 <vfprintf+0xb4>
    1ab4:	21 60       	ori	r18, 0x01	; 1
    1ab6:	28 c0       	rjmp	.+80     	; 0x1b08 <vfprintf+0xf6>
    1ab8:	22 60       	ori	r18, 0x02	; 2
    1aba:	24 60       	ori	r18, 0x04	; 4
    1abc:	25 c0       	rjmp	.+74     	; 0x1b08 <vfprintf+0xf6>
    1abe:	28 60       	ori	r18, 0x08	; 8
    1ac0:	23 c0       	rjmp	.+70     	; 0x1b08 <vfprintf+0xf6>
    1ac2:	20 61       	ori	r18, 0x10	; 16
    1ac4:	21 c0       	rjmp	.+66     	; 0x1b08 <vfprintf+0xf6>
    1ac6:	27 fd       	sbrc	r18, 7
    1ac8:	27 c0       	rjmp	.+78     	; 0x1b18 <vfprintf+0x106>
    1aca:	38 2f       	mov	r19, r24
    1acc:	30 53       	subi	r19, 0x30	; 48
    1ace:	3a 30       	cpi	r19, 0x0A	; 10
    1ad0:	78 f4       	brcc	.+30     	; 0x1af0 <vfprintf+0xde>
    1ad2:	26 ff       	sbrs	r18, 6
    1ad4:	06 c0       	rjmp	.+12     	; 0x1ae2 <vfprintf+0xd0>
    1ad6:	fa e0       	ldi	r31, 0x0A	; 10
    1ad8:	5f 9e       	mul	r5, r31
    1ada:	30 0d       	add	r19, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	53 2e       	mov	r5, r19
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <vfprintf+0xf6>
    1ae2:	8a e0       	ldi	r24, 0x0A	; 10
    1ae4:	38 9e       	mul	r3, r24
    1ae6:	30 0d       	add	r19, r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	33 2e       	mov	r3, r19
    1aec:	20 62       	ori	r18, 0x20	; 32
    1aee:	0c c0       	rjmp	.+24     	; 0x1b08 <vfprintf+0xf6>
    1af0:	8e 32       	cpi	r24, 0x2E	; 46
    1af2:	21 f4       	brne	.+8      	; 0x1afc <vfprintf+0xea>
    1af4:	26 fd       	sbrc	r18, 6
    1af6:	65 c1       	rjmp	.+714    	; 0x1dc2 <vfprintf+0x3b0>
    1af8:	20 64       	ori	r18, 0x40	; 64
    1afa:	06 c0       	rjmp	.+12     	; 0x1b08 <vfprintf+0xf6>
    1afc:	8c 36       	cpi	r24, 0x6C	; 108
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <vfprintf+0xf2>
    1b00:	20 68       	ori	r18, 0x80	; 128
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <vfprintf+0xf6>
    1b04:	88 36       	cpi	r24, 0x68	; 104
    1b06:	41 f4       	brne	.+16     	; 0x1b18 <vfprintf+0x106>
    1b08:	f6 01       	movw	r30, r12
    1b0a:	93 fd       	sbrc	r25, 3
    1b0c:	85 91       	lpm	r24, Z+
    1b0e:	93 ff       	sbrs	r25, 3
    1b10:	81 91       	ld	r24, Z+
    1b12:	6f 01       	movw	r12, r30
    1b14:	81 11       	cpse	r24, r1
    1b16:	c0 cf       	rjmp	.-128    	; 0x1a98 <vfprintf+0x86>
    1b18:	98 2f       	mov	r25, r24
    1b1a:	95 54       	subi	r25, 0x45	; 69
    1b1c:	93 30       	cpi	r25, 0x03	; 3
    1b1e:	18 f0       	brcs	.+6      	; 0x1b26 <vfprintf+0x114>
    1b20:	90 52       	subi	r25, 0x20	; 32
    1b22:	93 30       	cpi	r25, 0x03	; 3
    1b24:	28 f4       	brcc	.+10     	; 0x1b30 <vfprintf+0x11e>
    1b26:	0c 5f       	subi	r16, 0xFC	; 252
    1b28:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2a:	ff e3       	ldi	r31, 0x3F	; 63
    1b2c:	f9 83       	std	Y+1, r31	; 0x01
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <vfprintf+0x138>
    1b30:	83 36       	cpi	r24, 0x63	; 99
    1b32:	31 f0       	breq	.+12     	; 0x1b40 <vfprintf+0x12e>
    1b34:	83 37       	cpi	r24, 0x73	; 115
    1b36:	71 f0       	breq	.+28     	; 0x1b54 <vfprintf+0x142>
    1b38:	83 35       	cpi	r24, 0x53	; 83
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <vfprintf+0x12c>
    1b3c:	5a c0       	rjmp	.+180    	; 0x1bf2 <vfprintf+0x1e0>
    1b3e:	22 c0       	rjmp	.+68     	; 0x1b84 <vfprintf+0x172>
    1b40:	f8 01       	movw	r30, r16
    1b42:	80 81       	ld	r24, Z
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	0e 5f       	subi	r16, 0xFE	; 254
    1b48:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4a:	44 24       	eor	r4, r4
    1b4c:	43 94       	inc	r4
    1b4e:	51 2c       	mov	r5, r1
    1b50:	54 01       	movw	r10, r8
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <vfprintf+0x16a>
    1b54:	38 01       	movw	r6, r16
    1b56:	f2 e0       	ldi	r31, 0x02	; 2
    1b58:	6f 0e       	add	r6, r31
    1b5a:	71 1c       	adc	r7, r1
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	a0 80       	ld	r10, Z
    1b60:	b1 80       	ldd	r11, Z+1	; 0x01
    1b62:	26 ff       	sbrs	r18, 6
    1b64:	03 c0       	rjmp	.+6      	; 0x1b6c <vfprintf+0x15a>
    1b66:	65 2d       	mov	r22, r5
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <vfprintf+0x15e>
    1b6c:	6f ef       	ldi	r22, 0xFF	; 255
    1b6e:	7f ef       	ldi	r23, 0xFF	; 255
    1b70:	c5 01       	movw	r24, r10
    1b72:	2c 87       	std	Y+12, r18	; 0x0c
    1b74:	51 d1       	rcall	.+674    	; 0x1e18 <strnlen>
    1b76:	2c 01       	movw	r4, r24
    1b78:	83 01       	movw	r16, r6
    1b7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b7c:	6f e7       	ldi	r22, 0x7F	; 127
    1b7e:	26 2e       	mov	r2, r22
    1b80:	22 22       	and	r2, r18
    1b82:	17 c0       	rjmp	.+46     	; 0x1bb2 <vfprintf+0x1a0>
    1b84:	38 01       	movw	r6, r16
    1b86:	f2 e0       	ldi	r31, 0x02	; 2
    1b88:	6f 0e       	add	r6, r31
    1b8a:	71 1c       	adc	r7, r1
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	a0 80       	ld	r10, Z
    1b90:	b1 80       	ldd	r11, Z+1	; 0x01
    1b92:	26 ff       	sbrs	r18, 6
    1b94:	03 c0       	rjmp	.+6      	; 0x1b9c <vfprintf+0x18a>
    1b96:	65 2d       	mov	r22, r5
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <vfprintf+0x18e>
    1b9c:	6f ef       	ldi	r22, 0xFF	; 255
    1b9e:	7f ef       	ldi	r23, 0xFF	; 255
    1ba0:	c5 01       	movw	r24, r10
    1ba2:	2c 87       	std	Y+12, r18	; 0x0c
    1ba4:	2e d1       	rcall	.+604    	; 0x1e02 <strnlen_P>
    1ba6:	2c 01       	movw	r4, r24
    1ba8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1baa:	50 e8       	ldi	r21, 0x80	; 128
    1bac:	25 2e       	mov	r2, r21
    1bae:	22 2a       	or	r2, r18
    1bb0:	83 01       	movw	r16, r6
    1bb2:	23 fc       	sbrc	r2, 3
    1bb4:	1a c0       	rjmp	.+52     	; 0x1bea <vfprintf+0x1d8>
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <vfprintf+0x1b0>
    1bb8:	b7 01       	movw	r22, r14
    1bba:	80 e2       	ldi	r24, 0x20	; 32
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	37 d1       	rcall	.+622    	; 0x1e2e <fputc>
    1bc0:	3a 94       	dec	r3
    1bc2:	83 2d       	mov	r24, r3
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	48 16       	cp	r4, r24
    1bc8:	59 06       	cpc	r5, r25
    1bca:	b0 f3       	brcs	.-20     	; 0x1bb8 <vfprintf+0x1a6>
    1bcc:	0e c0       	rjmp	.+28     	; 0x1bea <vfprintf+0x1d8>
    1bce:	f5 01       	movw	r30, r10
    1bd0:	27 fc       	sbrc	r2, 7
    1bd2:	85 91       	lpm	r24, Z+
    1bd4:	27 fe       	sbrs	r2, 7
    1bd6:	81 91       	ld	r24, Z+
    1bd8:	5f 01       	movw	r10, r30
    1bda:	b7 01       	movw	r22, r14
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	27 d1       	rcall	.+590    	; 0x1e2e <fputc>
    1be0:	31 10       	cpse	r3, r1
    1be2:	3a 94       	dec	r3
    1be4:	f1 e0       	ldi	r31, 0x01	; 1
    1be6:	4f 1a       	sub	r4, r31
    1be8:	51 08       	sbc	r5, r1
    1bea:	41 14       	cp	r4, r1
    1bec:	51 04       	cpc	r5, r1
    1bee:	79 f7       	brne	.-34     	; 0x1bce <vfprintf+0x1bc>
    1bf0:	e5 c0       	rjmp	.+458    	; 0x1dbc <vfprintf+0x3aa>
    1bf2:	84 36       	cpi	r24, 0x64	; 100
    1bf4:	11 f0       	breq	.+4      	; 0x1bfa <vfprintf+0x1e8>
    1bf6:	89 36       	cpi	r24, 0x69	; 105
    1bf8:	39 f5       	brne	.+78     	; 0x1c48 <vfprintf+0x236>
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	27 ff       	sbrs	r18, 7
    1bfe:	07 c0       	rjmp	.+14     	; 0x1c0e <vfprintf+0x1fc>
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	0c 5f       	subi	r16, 0xFC	; 252
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	08 c0       	rjmp	.+16     	; 0x1c1e <vfprintf+0x20c>
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	88 27       	eor	r24, r24
    1c14:	77 fd       	sbrc	r23, 7
    1c16:	80 95       	com	r24
    1c18:	98 2f       	mov	r25, r24
    1c1a:	0e 5f       	subi	r16, 0xFE	; 254
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	4f e6       	ldi	r20, 0x6F	; 111
    1c20:	b4 2e       	mov	r11, r20
    1c22:	b2 22       	and	r11, r18
    1c24:	97 ff       	sbrs	r25, 7
    1c26:	09 c0       	rjmp	.+18     	; 0x1c3a <vfprintf+0x228>
    1c28:	90 95       	com	r25
    1c2a:	80 95       	com	r24
    1c2c:	70 95       	com	r23
    1c2e:	61 95       	neg	r22
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	8f 4f       	sbci	r24, 0xFF	; 255
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	f0 e8       	ldi	r31, 0x80	; 128
    1c38:	bf 2a       	or	r11, r31
    1c3a:	2a e0       	ldi	r18, 0x0A	; 10
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	a4 01       	movw	r20, r8
    1c40:	22 d1       	rcall	.+580    	; 0x1e86 <__ultoa_invert>
    1c42:	a8 2e       	mov	r10, r24
    1c44:	a8 18       	sub	r10, r8
    1c46:	42 c0       	rjmp	.+132    	; 0x1ccc <vfprintf+0x2ba>
    1c48:	85 37       	cpi	r24, 0x75	; 117
    1c4a:	31 f4       	brne	.+12     	; 0x1c58 <vfprintf+0x246>
    1c4c:	3f ee       	ldi	r19, 0xEF	; 239
    1c4e:	b3 2e       	mov	r11, r19
    1c50:	b2 22       	and	r11, r18
    1c52:	2a e0       	ldi	r18, 0x0A	; 10
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	24 c0       	rjmp	.+72     	; 0x1ca0 <vfprintf+0x28e>
    1c58:	99 ef       	ldi	r25, 0xF9	; 249
    1c5a:	b9 2e       	mov	r11, r25
    1c5c:	b2 22       	and	r11, r18
    1c5e:	8f 36       	cpi	r24, 0x6F	; 111
    1c60:	b9 f0       	breq	.+46     	; 0x1c90 <vfprintf+0x27e>
    1c62:	20 f4       	brcc	.+8      	; 0x1c6c <vfprintf+0x25a>
    1c64:	88 35       	cpi	r24, 0x58	; 88
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <vfprintf+0x258>
    1c68:	ac c0       	rjmp	.+344    	; 0x1dc2 <vfprintf+0x3b0>
    1c6a:	0d c0       	rjmp	.+26     	; 0x1c86 <vfprintf+0x274>
    1c6c:	80 37       	cpi	r24, 0x70	; 112
    1c6e:	21 f0       	breq	.+8      	; 0x1c78 <vfprintf+0x266>
    1c70:	88 37       	cpi	r24, 0x78	; 120
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <vfprintf+0x264>
    1c74:	a6 c0       	rjmp	.+332    	; 0x1dc2 <vfprintf+0x3b0>
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <vfprintf+0x26a>
    1c78:	20 e1       	ldi	r18, 0x10	; 16
    1c7a:	b2 2a       	or	r11, r18
    1c7c:	b4 fe       	sbrs	r11, 4
    1c7e:	0b c0       	rjmp	.+22     	; 0x1c96 <vfprintf+0x284>
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	b8 2a       	or	r11, r24
    1c84:	08 c0       	rjmp	.+16     	; 0x1c96 <vfprintf+0x284>
    1c86:	24 ff       	sbrs	r18, 4
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <vfprintf+0x28a>
    1c8a:	e6 e0       	ldi	r30, 0x06	; 6
    1c8c:	be 2a       	or	r11, r30
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <vfprintf+0x28a>
    1c90:	28 e0       	ldi	r18, 0x08	; 8
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <vfprintf+0x28e>
    1c96:	20 e1       	ldi	r18, 0x10	; 16
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <vfprintf+0x28e>
    1c9c:	20 e1       	ldi	r18, 0x10	; 16
    1c9e:	32 e0       	ldi	r19, 0x02	; 2
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	b7 fe       	sbrs	r11, 7
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <vfprintf+0x2a2>
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	0c 5f       	subi	r16, 0xFC	; 252
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <vfprintf+0x2ae>
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 5f       	subi	r16, 0xFE	; 254
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	a4 01       	movw	r20, r8
    1cc2:	e1 d0       	rcall	.+450    	; 0x1e86 <__ultoa_invert>
    1cc4:	a8 2e       	mov	r10, r24
    1cc6:	a8 18       	sub	r10, r8
    1cc8:	ff e7       	ldi	r31, 0x7F	; 127
    1cca:	bf 22       	and	r11, r31
    1ccc:	b6 fe       	sbrs	r11, 6
    1cce:	0b c0       	rjmp	.+22     	; 0x1ce6 <vfprintf+0x2d4>
    1cd0:	2b 2d       	mov	r18, r11
    1cd2:	2e 7f       	andi	r18, 0xFE	; 254
    1cd4:	a5 14       	cp	r10, r5
    1cd6:	50 f4       	brcc	.+20     	; 0x1cec <vfprintf+0x2da>
    1cd8:	b4 fe       	sbrs	r11, 4
    1cda:	0a c0       	rjmp	.+20     	; 0x1cf0 <vfprintf+0x2de>
    1cdc:	b2 fc       	sbrc	r11, 2
    1cde:	08 c0       	rjmp	.+16     	; 0x1cf0 <vfprintf+0x2de>
    1ce0:	2b 2d       	mov	r18, r11
    1ce2:	2e 7e       	andi	r18, 0xEE	; 238
    1ce4:	05 c0       	rjmp	.+10     	; 0x1cf0 <vfprintf+0x2de>
    1ce6:	7a 2c       	mov	r7, r10
    1ce8:	2b 2d       	mov	r18, r11
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <vfprintf+0x2e0>
    1cec:	7a 2c       	mov	r7, r10
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <vfprintf+0x2e0>
    1cf0:	75 2c       	mov	r7, r5
    1cf2:	24 ff       	sbrs	r18, 4
    1cf4:	0d c0       	rjmp	.+26     	; 0x1d10 <vfprintf+0x2fe>
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ea 0d       	add	r30, r10
    1cfa:	f1 1d       	adc	r31, r1
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 33       	cpi	r24, 0x30	; 48
    1d00:	11 f4       	brne	.+4      	; 0x1d06 <vfprintf+0x2f4>
    1d02:	29 7e       	andi	r18, 0xE9	; 233
    1d04:	09 c0       	rjmp	.+18     	; 0x1d18 <vfprintf+0x306>
    1d06:	22 ff       	sbrs	r18, 2
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <vfprintf+0x304>
    1d0a:	73 94       	inc	r7
    1d0c:	73 94       	inc	r7
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <vfprintf+0x306>
    1d10:	82 2f       	mov	r24, r18
    1d12:	86 78       	andi	r24, 0x86	; 134
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <vfprintf+0x306>
    1d16:	73 94       	inc	r7
    1d18:	23 fd       	sbrc	r18, 3
    1d1a:	13 c0       	rjmp	.+38     	; 0x1d42 <vfprintf+0x330>
    1d1c:	20 ff       	sbrs	r18, 0
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <vfprintf+0x32a>
    1d20:	5a 2c       	mov	r5, r10
    1d22:	73 14       	cp	r7, r3
    1d24:	58 f4       	brcc	.+22     	; 0x1d3c <vfprintf+0x32a>
    1d26:	53 0c       	add	r5, r3
    1d28:	57 18       	sub	r5, r7
    1d2a:	73 2c       	mov	r7, r3
    1d2c:	07 c0       	rjmp	.+14     	; 0x1d3c <vfprintf+0x32a>
    1d2e:	b7 01       	movw	r22, r14
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	2c 87       	std	Y+12, r18	; 0x0c
    1d36:	7b d0       	rcall	.+246    	; 0x1e2e <fputc>
    1d38:	73 94       	inc	r7
    1d3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d3c:	73 14       	cp	r7, r3
    1d3e:	b8 f3       	brcs	.-18     	; 0x1d2e <vfprintf+0x31c>
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <vfprintf+0x338>
    1d42:	73 14       	cp	r7, r3
    1d44:	10 f4       	brcc	.+4      	; 0x1d4a <vfprintf+0x338>
    1d46:	37 18       	sub	r3, r7
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <vfprintf+0x33a>
    1d4a:	31 2c       	mov	r3, r1
    1d4c:	24 ff       	sbrs	r18, 4
    1d4e:	11 c0       	rjmp	.+34     	; 0x1d72 <vfprintf+0x360>
    1d50:	b7 01       	movw	r22, r14
    1d52:	80 e3       	ldi	r24, 0x30	; 48
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	2c 87       	std	Y+12, r18	; 0x0c
    1d58:	6a d0       	rcall	.+212    	; 0x1e2e <fputc>
    1d5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d5c:	22 ff       	sbrs	r18, 2
    1d5e:	1c c0       	rjmp	.+56     	; 0x1d98 <vfprintf+0x386>
    1d60:	21 ff       	sbrs	r18, 1
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <vfprintf+0x358>
    1d64:	88 e5       	ldi	r24, 0x58	; 88
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x35c>
    1d6a:	88 e7       	ldi	r24, 0x78	; 120
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	b7 01       	movw	r22, r14
    1d70:	0c c0       	rjmp	.+24     	; 0x1d8a <vfprintf+0x378>
    1d72:	82 2f       	mov	r24, r18
    1d74:	86 78       	andi	r24, 0x86	; 134
    1d76:	81 f0       	breq	.+32     	; 0x1d98 <vfprintf+0x386>
    1d78:	21 fd       	sbrc	r18, 1
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <vfprintf+0x36e>
    1d7c:	80 e2       	ldi	r24, 0x20	; 32
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <vfprintf+0x370>
    1d80:	8b e2       	ldi	r24, 0x2B	; 43
    1d82:	27 fd       	sbrc	r18, 7
    1d84:	8d e2       	ldi	r24, 0x2D	; 45
    1d86:	b7 01       	movw	r22, r14
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	51 d0       	rcall	.+162    	; 0x1e2e <fputc>
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <vfprintf+0x386>
    1d8e:	b7 01       	movw	r22, r14
    1d90:	80 e3       	ldi	r24, 0x30	; 48
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	4c d0       	rcall	.+152    	; 0x1e2e <fputc>
    1d96:	5a 94       	dec	r5
    1d98:	a5 14       	cp	r10, r5
    1d9a:	c8 f3       	brcs	.-14     	; 0x1d8e <vfprintf+0x37c>
    1d9c:	aa 94       	dec	r10
    1d9e:	f4 01       	movw	r30, r8
    1da0:	ea 0d       	add	r30, r10
    1da2:	f1 1d       	adc	r31, r1
    1da4:	b7 01       	movw	r22, r14
    1da6:	80 81       	ld	r24, Z
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	41 d0       	rcall	.+130    	; 0x1e2e <fputc>
    1dac:	a1 10       	cpse	r10, r1
    1dae:	f6 cf       	rjmp	.-20     	; 0x1d9c <vfprintf+0x38a>
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <vfprintf+0x3aa>
    1db2:	b7 01       	movw	r22, r14
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	3a d0       	rcall	.+116    	; 0x1e2e <fputc>
    1dba:	3a 94       	dec	r3
    1dbc:	31 10       	cpse	r3, r1
    1dbe:	f9 cf       	rjmp	.-14     	; 0x1db2 <vfprintf+0x3a0>
    1dc0:	50 ce       	rjmp	.-864    	; 0x1a62 <vfprintf+0x50>
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	26 81       	ldd	r18, Z+6	; 0x06
    1dc6:	37 81       	ldd	r19, Z+7	; 0x07
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <vfprintf+0x3bc>
    1dca:	2f ef       	ldi	r18, 0xFF	; 255
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	c9 01       	movw	r24, r18
    1dd0:	2c 96       	adiw	r28, 0x0c	; 12
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	bf 90       	pop	r11
    1dee:	af 90       	pop	r10
    1df0:	9f 90       	pop	r9
    1df2:	8f 90       	pop	r8
    1df4:	7f 90       	pop	r7
    1df6:	6f 90       	pop	r6
    1df8:	5f 90       	pop	r5
    1dfa:	4f 90       	pop	r4
    1dfc:	3f 90       	pop	r3
    1dfe:	2f 90       	pop	r2
    1e00:	08 95       	ret

00001e02 <strnlen_P>:
    1e02:	fc 01       	movw	r30, r24
    1e04:	05 90       	lpm	r0, Z+
    1e06:	61 50       	subi	r22, 0x01	; 1
    1e08:	70 40       	sbci	r23, 0x00	; 0
    1e0a:	01 10       	cpse	r0, r1
    1e0c:	d8 f7       	brcc	.-10     	; 0x1e04 <strnlen_P+0x2>
    1e0e:	80 95       	com	r24
    1e10:	90 95       	com	r25
    1e12:	8e 0f       	add	r24, r30
    1e14:	9f 1f       	adc	r25, r31
    1e16:	08 95       	ret

00001e18 <strnlen>:
    1e18:	fc 01       	movw	r30, r24
    1e1a:	61 50       	subi	r22, 0x01	; 1
    1e1c:	70 40       	sbci	r23, 0x00	; 0
    1e1e:	01 90       	ld	r0, Z+
    1e20:	01 10       	cpse	r0, r1
    1e22:	d8 f7       	brcc	.-10     	; 0x1e1a <strnlen+0x2>
    1e24:	80 95       	com	r24
    1e26:	90 95       	com	r25
    1e28:	8e 0f       	add	r24, r30
    1e2a:	9f 1f       	adc	r25, r31
    1e2c:	08 95       	ret

00001e2e <fputc>:
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	8c 01       	movw	r16, r24
    1e38:	eb 01       	movw	r28, r22
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	81 fd       	sbrc	r24, 1
    1e3e:	03 c0       	rjmp	.+6      	; 0x1e46 <fputc+0x18>
    1e40:	0f ef       	ldi	r16, 0xFF	; 255
    1e42:	1f ef       	ldi	r17, 0xFF	; 255
    1e44:	1a c0       	rjmp	.+52     	; 0x1e7a <fputc+0x4c>
    1e46:	82 ff       	sbrs	r24, 2
    1e48:	0d c0       	rjmp	.+26     	; 0x1e64 <fputc+0x36>
    1e4a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e4c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	28 17       	cp	r18, r24
    1e54:	39 07       	cpc	r19, r25
    1e56:	64 f4       	brge	.+24     	; 0x1e70 <fputc+0x42>
    1e58:	e8 81       	ld	r30, Y
    1e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e5c:	01 93       	st	Z+, r16
    1e5e:	f9 83       	std	Y+1, r31	; 0x01
    1e60:	e8 83       	st	Y, r30
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <fputc+0x42>
    1e64:	e8 85       	ldd	r30, Y+8	; 0x08
    1e66:	f9 85       	ldd	r31, Y+9	; 0x09
    1e68:	80 2f       	mov	r24, r16
    1e6a:	09 95       	icall
    1e6c:	89 2b       	or	r24, r25
    1e6e:	41 f7       	brne	.-48     	; 0x1e40 <fputc+0x12>
    1e70:	8e 81       	ldd	r24, Y+6	; 0x06
    1e72:	9f 81       	ldd	r25, Y+7	; 0x07
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	9f 83       	std	Y+7, r25	; 0x07
    1e78:	8e 83       	std	Y+6, r24	; 0x06
    1e7a:	c8 01       	movw	r24, r16
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <__ultoa_invert>:
    1e86:	fa 01       	movw	r30, r20
    1e88:	aa 27       	eor	r26, r26
    1e8a:	28 30       	cpi	r18, 0x08	; 8
    1e8c:	51 f1       	breq	.+84     	; 0x1ee2 <__ultoa_invert+0x5c>
    1e8e:	20 31       	cpi	r18, 0x10	; 16
    1e90:	81 f1       	breq	.+96     	; 0x1ef2 <__ultoa_invert+0x6c>
    1e92:	e8 94       	clt
    1e94:	6f 93       	push	r22
    1e96:	6e 7f       	andi	r22, 0xFE	; 254
    1e98:	6e 5f       	subi	r22, 0xFE	; 254
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	af 4f       	sbci	r26, 0xFF	; 255
    1ea2:	b1 e0       	ldi	r27, 0x01	; 1
    1ea4:	3e d0       	rcall	.+124    	; 0x1f22 <__ultoa_invert+0x9c>
    1ea6:	b4 e0       	ldi	r27, 0x04	; 4
    1ea8:	3c d0       	rcall	.+120    	; 0x1f22 <__ultoa_invert+0x9c>
    1eaa:	67 0f       	add	r22, r23
    1eac:	78 1f       	adc	r23, r24
    1eae:	89 1f       	adc	r24, r25
    1eb0:	9a 1f       	adc	r25, r26
    1eb2:	a1 1d       	adc	r26, r1
    1eb4:	68 0f       	add	r22, r24
    1eb6:	79 1f       	adc	r23, r25
    1eb8:	8a 1f       	adc	r24, r26
    1eba:	91 1d       	adc	r25, r1
    1ebc:	a1 1d       	adc	r26, r1
    1ebe:	6a 0f       	add	r22, r26
    1ec0:	71 1d       	adc	r23, r1
    1ec2:	81 1d       	adc	r24, r1
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	a1 1d       	adc	r26, r1
    1ec8:	20 d0       	rcall	.+64     	; 0x1f0a <__ultoa_invert+0x84>
    1eca:	09 f4       	brne	.+2      	; 0x1ece <__ultoa_invert+0x48>
    1ecc:	68 94       	set
    1ece:	3f 91       	pop	r19
    1ed0:	2a e0       	ldi	r18, 0x0A	; 10
    1ed2:	26 9f       	mul	r18, r22
    1ed4:	11 24       	eor	r1, r1
    1ed6:	30 19       	sub	r19, r0
    1ed8:	30 5d       	subi	r19, 0xD0	; 208
    1eda:	31 93       	st	Z+, r19
    1edc:	de f6       	brtc	.-74     	; 0x1e94 <__ultoa_invert+0xe>
    1ede:	cf 01       	movw	r24, r30
    1ee0:	08 95       	ret
    1ee2:	46 2f       	mov	r20, r22
    1ee4:	47 70       	andi	r20, 0x07	; 7
    1ee6:	40 5d       	subi	r20, 0xD0	; 208
    1ee8:	41 93       	st	Z+, r20
    1eea:	b3 e0       	ldi	r27, 0x03	; 3
    1eec:	0f d0       	rcall	.+30     	; 0x1f0c <__ultoa_invert+0x86>
    1eee:	c9 f7       	brne	.-14     	; 0x1ee2 <__ultoa_invert+0x5c>
    1ef0:	f6 cf       	rjmp	.-20     	; 0x1ede <__ultoa_invert+0x58>
    1ef2:	46 2f       	mov	r20, r22
    1ef4:	4f 70       	andi	r20, 0x0F	; 15
    1ef6:	40 5d       	subi	r20, 0xD0	; 208
    1ef8:	4a 33       	cpi	r20, 0x3A	; 58
    1efa:	18 f0       	brcs	.+6      	; 0x1f02 <__ultoa_invert+0x7c>
    1efc:	49 5d       	subi	r20, 0xD9	; 217
    1efe:	31 fd       	sbrc	r19, 1
    1f00:	40 52       	subi	r20, 0x20	; 32
    1f02:	41 93       	st	Z+, r20
    1f04:	02 d0       	rcall	.+4      	; 0x1f0a <__ultoa_invert+0x84>
    1f06:	a9 f7       	brne	.-22     	; 0x1ef2 <__ultoa_invert+0x6c>
    1f08:	ea cf       	rjmp	.-44     	; 0x1ede <__ultoa_invert+0x58>
    1f0a:	b4 e0       	ldi	r27, 0x04	; 4
    1f0c:	a6 95       	lsr	r26
    1f0e:	97 95       	ror	r25
    1f10:	87 95       	ror	r24
    1f12:	77 95       	ror	r23
    1f14:	67 95       	ror	r22
    1f16:	ba 95       	dec	r27
    1f18:	c9 f7       	brne	.-14     	; 0x1f0c <__ultoa_invert+0x86>
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	61 05       	cpc	r22, r1
    1f1e:	71 05       	cpc	r23, r1
    1f20:	08 95       	ret
    1f22:	9b 01       	movw	r18, r22
    1f24:	ac 01       	movw	r20, r24
    1f26:	0a 2e       	mov	r0, r26
    1f28:	06 94       	lsr	r0
    1f2a:	57 95       	ror	r21
    1f2c:	47 95       	ror	r20
    1f2e:	37 95       	ror	r19
    1f30:	27 95       	ror	r18
    1f32:	ba 95       	dec	r27
    1f34:	c9 f7       	brne	.-14     	; 0x1f28 <__ultoa_invert+0xa2>
    1f36:	62 0f       	add	r22, r18
    1f38:	73 1f       	adc	r23, r19
    1f3a:	84 1f       	adc	r24, r20
    1f3c:	95 1f       	adc	r25, r21
    1f3e:	a0 1d       	adc	r26, r0
    1f40:	08 95       	ret

00001f42 <_exit>:
    1f42:	f8 94       	cli

00001f44 <__stop_program>:
    1f44:	ff cf       	rjmp	.-2      	; 0x1f44 <__stop_program>
