
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00001f4a  00001fde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064b  00800298  00800298  00002176  2**0
                  ALLOC
  3 .stab         00000e40  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003313  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000418  00000000  00000000  00003342  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d1a  00000000  00000000  0000375a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126d  00000000  00000000  00008474  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000032d4  00000000  00000000  000096e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b40  00000000  00000000  0000c9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000014dc  00000000  00000000  0000d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000035a7  00000000  00000000  0000e9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000428  00000000  00000000  00011f7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_13>
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e4       	ldi	r30, 0x4A	; 74
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 39       	cpi	r26, 0x98	; 152
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a8 e9       	ldi	r26, 0x98	; 152
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3e       	cpi	r26, 0xE3	; 227
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4f d7       	rcall	.+3742   	; 0xf62 <main>
      c4:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	0e 94 ad 0a 	call	0x155a	; 0x155a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d4:	40 91 98 02 	lds	r20, 0x0298
      d8:	50 91 99 02 	lds	r21, 0x0299
      dc:	9e 01       	movw	r18, r28
      de:	24 0f       	add	r18, r20
      e0:	35 1f       	adc	r19, r21
      e2:	2c 3d       	cpi	r18, 0xDC	; 220
      e4:	85 e0       	ldi	r24, 0x05	; 5
      e6:	38 07       	cpc	r19, r24
      e8:	58 f4       	brcc	.+22     	; 0x100 <pvPortMalloc+0x36>
      ea:	42 17       	cp	r20, r18
      ec:	53 07       	cpc	r21, r19
      ee:	58 f4       	brcc	.+22     	; 0x106 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f0:	ea 01       	movw	r28, r20
      f2:	c6 56       	subi	r28, 0x66	; 102
      f4:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
      f6:	30 93 99 02 	sts	0x0299, r19
      fa:	20 93 98 02 	sts	0x0298, r18
      fe:	05 c0       	rjmp	.+10     	; 0x10a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     100:	c0 e0       	ldi	r28, 0x00	; 0
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <pvPortMalloc+0x40>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10e:	8c 2f       	mov	r24, r28
     110:	9d 2f       	mov	r25, r29
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     118:	08 95       	ret

0000011a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     11a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11c:	03 96       	adiw	r24, 0x03	; 3
     11e:	92 83       	std	Z+2, r25	; 0x02
     120:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	3f ef       	ldi	r19, 0xFF	; 255
     126:	34 83       	std	Z+4, r19	; 0x04
     128:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     12a:	96 83       	std	Z+6, r25	; 0x06
     12c:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12e:	90 87       	std	Z+8, r25	; 0x08
     130:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     132:	10 82       	st	Z, r1
     134:	08 95       	ret

00000136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     136:	fc 01       	movw	r30, r24
     138:	11 86       	std	Z+9, r1	; 0x09
     13a:	10 86       	std	Z+8, r1	; 0x08
     13c:	08 95       	ret

0000013e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     146:	21 81       	ldd	r18, Z+1	; 0x01
     148:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     14a:	e9 01       	movw	r28, r18
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	9b 81       	ldd	r25, Y+3	; 0x03
     150:	13 96       	adiw	r26, 0x03	; 3
     152:	9c 93       	st	X, r25
     154:	8e 93       	st	-X, r24
     156:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	92 81       	ldd	r25, Z+2	; 0x02
     15c:	15 96       	adiw	r26, 0x05	; 5
     15e:	9c 93       	st	X, r25
     160:	8e 93       	st	-X, r24
     162:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	ec 01       	movw	r28, r24
     16a:	7d 83       	std	Y+5, r23	; 0x05
     16c:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16e:	e9 01       	movw	r28, r18
     170:	7b 83       	std	Y+3, r23	; 0x03
     172:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     174:	72 83       	std	Z+2, r23	; 0x02
     176:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     178:	19 96       	adiw	r26, 0x09	; 9
     17a:	fc 93       	st	X, r31
     17c:	ee 93       	st	-X, r30
     17e:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     180:	80 81       	ld	r24, Z
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	80 83       	st	Z, r24
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     192:	48 81       	ld	r20, Y
     194:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     196:	4f 3f       	cpi	r20, 0xFF	; 255
     198:	2f ef       	ldi	r18, 0xFF	; 255
     19a:	52 07       	cpc	r21, r18
     19c:	31 f4       	brne	.+12     	; 0x1aa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19e:	dc 01       	movw	r26, r24
     1a0:	17 96       	adiw	r26, 0x07	; 7
     1a2:	ed 91       	ld	r30, X+
     1a4:	fc 91       	ld	r31, X
     1a6:	18 97       	sbiw	r26, 0x08	; 8
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1aa:	fc 01       	movw	r30, r24
     1ac:	33 96       	adiw	r30, 0x03	; 3
     1ae:	dc 01       	movw	r26, r24
     1b0:	15 96       	adiw	r26, 0x05	; 5
     1b2:	2d 91       	ld	r18, X+
     1b4:	3c 91       	ld	r19, X
     1b6:	16 97       	sbiw	r26, 0x06	; 6
     1b8:	d9 01       	movw	r26, r18
     1ba:	2d 91       	ld	r18, X+
     1bc:	3c 91       	ld	r19, X
     1be:	42 17       	cp	r20, r18
     1c0:	53 07       	cpc	r21, r19
     1c2:	50 f0       	brcs	.+20     	; 0x1d8 <vListInsert+0x4c>
     1c4:	02 80       	ldd	r0, Z+2	; 0x02
     1c6:	f3 81       	ldd	r31, Z+3	; 0x03
     1c8:	e0 2d       	mov	r30, r0
     1ca:	a2 81       	ldd	r26, Z+2	; 0x02
     1cc:	b3 81       	ldd	r27, Z+3	; 0x03
     1ce:	2d 91       	ld	r18, X+
     1d0:	3c 91       	ld	r19, X
     1d2:	42 17       	cp	r20, r18
     1d4:	53 07       	cpc	r21, r19
     1d6:	b0 f7       	brcc	.-20     	; 0x1c4 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d8:	a2 81       	ldd	r26, Z+2	; 0x02
     1da:	b3 81       	ldd	r27, Z+3	; 0x03
     1dc:	bb 83       	std	Y+3, r27	; 0x03
     1de:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1e0:	15 96       	adiw	r26, 0x05	; 5
     1e2:	dc 93       	st	X, r29
     1e4:	ce 93       	st	-X, r28
     1e6:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e8:	fd 83       	std	Y+5, r31	; 0x05
     1ea:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ec:	d3 83       	std	Z+3, r29	; 0x03
     1ee:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1f0:	99 87       	std	Y+9, r25	; 0x09
     1f2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 81       	ld	r18, Z
     1f8:	2f 5f       	subi	r18, 0xFF	; 255
     1fa:	20 83       	st	Z, r18
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     202:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     204:	a2 81       	ldd	r26, Z+2	; 0x02
     206:	b3 81       	ldd	r27, Z+3	; 0x03
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	95 81       	ldd	r25, Z+5	; 0x05
     20c:	15 96       	adiw	r26, 0x05	; 5
     20e:	9c 93       	st	X, r25
     210:	8e 93       	st	-X, r24
     212:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     214:	a4 81       	ldd	r26, Z+4	; 0x04
     216:	b5 81       	ldd	r27, Z+5	; 0x05
     218:	82 81       	ldd	r24, Z+2	; 0x02
     21a:	93 81       	ldd	r25, Z+3	; 0x03
     21c:	13 96       	adiw	r26, 0x03	; 3
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24
     222:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     224:	a0 85       	ldd	r26, Z+8	; 0x08
     226:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     228:	11 96       	adiw	r26, 0x01	; 1
     22a:	8d 91       	ld	r24, X+
     22c:	9c 91       	ld	r25, X
     22e:	12 97       	sbiw	r26, 0x02	; 2
     230:	8e 17       	cp	r24, r30
     232:	9f 07       	cpc	r25, r31
     234:	31 f4       	brne	.+12     	; 0x242 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     236:	84 81       	ldd	r24, Z+4	; 0x04
     238:	95 81       	ldd	r25, Z+5	; 0x05
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	9c 93       	st	X, r25
     23e:	8e 93       	st	-X, r24
     240:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     242:	11 86       	std	Z+9, r1	; 0x09
     244:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     246:	8c 91       	ld	r24, X
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	8c 93       	st	X, r24
     24c:	08 95       	ret

0000024e <SetBit>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     24e:	44 23       	and	r20, r20
     250:	51 f0       	breq	.+20     	; 0x266 <SetBit+0x18>
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	9a 01       	movw	r18, r20
     258:	02 c0       	rjmp	.+4      	; 0x25e <SetBit+0x10>
     25a:	22 0f       	add	r18, r18
     25c:	33 1f       	adc	r19, r19
     25e:	6a 95       	dec	r22
     260:	e2 f7       	brpl	.-8      	; 0x25a <SetBit+0xc>
     262:	82 2b       	or	r24, r18
     264:	08 95       	ret
     266:	21 e0       	ldi	r18, 0x01	; 1
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	a9 01       	movw	r20, r18
     26c:	02 c0       	rjmp	.+4      	; 0x272 <SetBit+0x24>
     26e:	44 0f       	add	r20, r20
     270:	55 1f       	adc	r21, r21
     272:	6a 95       	dec	r22
     274:	e2 f7       	brpl	.-8      	; 0x26e <SetBit+0x20>
     276:	ba 01       	movw	r22, r20
     278:	60 95       	com	r22
     27a:	86 23       	and	r24, r22
     27c:	08 95       	ret

0000027e <GetBit>:
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	a9 01       	movw	r20, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <GetBit+0xc>
     286:	44 0f       	add	r20, r20
     288:	55 1f       	adc	r21, r21
     28a:	6a 95       	dec	r22
     28c:	e2 f7       	brpl	.-8      	; 0x286 <GetBit+0x8>
     28e:	84 23       	and	r24, r20
     290:	08 95       	ret

00000292 <GetKeypadKey>:
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	64 e0       	ldi	r22, 0x04	; 4
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	da df       	rcall	.-76     	; 0x24e <SetBit>
     29a:	88 b9       	out	0x08, r24	; 8
     29c:	00 00       	nop
     29e:	86 b1       	in	r24, 0x06	; 6
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	80 95       	com	r24
     2a4:	ec df       	rcall	.-40     	; 0x27e <GetBit>
     2a6:	81 11       	cpse	r24, r1
     2a8:	6e c0       	rjmp	.+220    	; 0x386 <GetKeypadKey+0xf4>
     2aa:	86 b1       	in	r24, 0x06	; 6
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	80 95       	com	r24
     2b0:	e6 df       	rcall	.-52     	; 0x27e <GetBit>
     2b2:	81 11       	cpse	r24, r1
     2b4:	6a c0       	rjmp	.+212    	; 0x38a <GetKeypadKey+0xf8>
     2b6:	86 b1       	in	r24, 0x06	; 6
     2b8:	62 e0       	ldi	r22, 0x02	; 2
     2ba:	80 95       	com	r24
     2bc:	e0 df       	rcall	.-64     	; 0x27e <GetBit>
     2be:	81 11       	cpse	r24, r1
     2c0:	66 c0       	rjmp	.+204    	; 0x38e <GetKeypadKey+0xfc>
     2c2:	86 b1       	in	r24, 0x06	; 6
     2c4:	63 e0       	ldi	r22, 0x03	; 3
     2c6:	80 95       	com	r24
     2c8:	da df       	rcall	.-76     	; 0x27e <GetBit>
     2ca:	81 11       	cpse	r24, r1
     2cc:	62 c0       	rjmp	.+196    	; 0x392 <GetKeypadKey+0x100>
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	65 e0       	ldi	r22, 0x05	; 5
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	bc df       	rcall	.-136    	; 0x24e <SetBit>
     2d6:	88 b9       	out	0x08, r24	; 8
     2d8:	00 00       	nop
     2da:	86 b1       	in	r24, 0x06	; 6
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	80 95       	com	r24
     2e0:	ce df       	rcall	.-100    	; 0x27e <GetBit>
     2e2:	81 11       	cpse	r24, r1
     2e4:	58 c0       	rjmp	.+176    	; 0x396 <GetKeypadKey+0x104>
     2e6:	86 b1       	in	r24, 0x06	; 6
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	80 95       	com	r24
     2ec:	c8 df       	rcall	.-112    	; 0x27e <GetBit>
     2ee:	81 11       	cpse	r24, r1
     2f0:	54 c0       	rjmp	.+168    	; 0x39a <GetKeypadKey+0x108>
     2f2:	86 b1       	in	r24, 0x06	; 6
     2f4:	62 e0       	ldi	r22, 0x02	; 2
     2f6:	80 95       	com	r24
     2f8:	c2 df       	rcall	.-124    	; 0x27e <GetBit>
     2fa:	81 11       	cpse	r24, r1
     2fc:	50 c0       	rjmp	.+160    	; 0x39e <GetKeypadKey+0x10c>
     2fe:	86 b1       	in	r24, 0x06	; 6
     300:	63 e0       	ldi	r22, 0x03	; 3
     302:	80 95       	com	r24
     304:	bc df       	rcall	.-136    	; 0x27e <GetBit>
     306:	81 11       	cpse	r24, r1
     308:	4c c0       	rjmp	.+152    	; 0x3a2 <GetKeypadKey+0x110>
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	66 e0       	ldi	r22, 0x06	; 6
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	9e df       	rcall	.-196    	; 0x24e <SetBit>
     312:	88 b9       	out	0x08, r24	; 8
     314:	00 00       	nop
     316:	86 b1       	in	r24, 0x06	; 6
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	80 95       	com	r24
     31c:	b0 df       	rcall	.-160    	; 0x27e <GetBit>
     31e:	81 11       	cpse	r24, r1
     320:	42 c0       	rjmp	.+132    	; 0x3a6 <GetKeypadKey+0x114>
     322:	86 b1       	in	r24, 0x06	; 6
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	80 95       	com	r24
     328:	aa df       	rcall	.-172    	; 0x27e <GetBit>
     32a:	81 11       	cpse	r24, r1
     32c:	3e c0       	rjmp	.+124    	; 0x3aa <GetKeypadKey+0x118>
     32e:	86 b1       	in	r24, 0x06	; 6
     330:	62 e0       	ldi	r22, 0x02	; 2
     332:	80 95       	com	r24
     334:	a4 df       	rcall	.-184    	; 0x27e <GetBit>
     336:	81 11       	cpse	r24, r1
     338:	3a c0       	rjmp	.+116    	; 0x3ae <GetKeypadKey+0x11c>
     33a:	86 b1       	in	r24, 0x06	; 6
     33c:	63 e0       	ldi	r22, 0x03	; 3
     33e:	80 95       	com	r24
     340:	9e df       	rcall	.-196    	; 0x27e <GetBit>
     342:	81 11       	cpse	r24, r1
     344:	36 c0       	rjmp	.+108    	; 0x3b2 <GetKeypadKey+0x120>
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	67 e0       	ldi	r22, 0x07	; 7
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	80 df       	rcall	.-256    	; 0x24e <SetBit>
     34e:	88 b9       	out	0x08, r24	; 8
     350:	00 00       	nop
     352:	86 b1       	in	r24, 0x06	; 6
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	80 95       	com	r24
     358:	92 df       	rcall	.-220    	; 0x27e <GetBit>
     35a:	81 11       	cpse	r24, r1
     35c:	2c c0       	rjmp	.+88     	; 0x3b6 <GetKeypadKey+0x124>
     35e:	86 b1       	in	r24, 0x06	; 6
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	80 95       	com	r24
     364:	8c df       	rcall	.-232    	; 0x27e <GetBit>
     366:	81 11       	cpse	r24, r1
     368:	28 c0       	rjmp	.+80     	; 0x3ba <GetKeypadKey+0x128>
     36a:	86 b1       	in	r24, 0x06	; 6
     36c:	62 e0       	ldi	r22, 0x02	; 2
     36e:	80 95       	com	r24
     370:	86 df       	rcall	.-244    	; 0x27e <GetBit>
     372:	81 11       	cpse	r24, r1
     374:	24 c0       	rjmp	.+72     	; 0x3be <GetKeypadKey+0x12c>
     376:	86 b1       	in	r24, 0x06	; 6
     378:	63 e0       	ldi	r22, 0x03	; 3
     37a:	80 95       	com	r24
     37c:	80 df       	rcall	.-256    	; 0x27e <GetBit>
     37e:	88 23       	and	r24, r24
     380:	01 f1       	breq	.+64     	; 0x3c2 <GetKeypadKey+0x130>
     382:	84 e4       	ldi	r24, 0x44	; 68
     384:	08 95       	ret
     386:	81 e3       	ldi	r24, 0x31	; 49
     388:	08 95       	ret
     38a:	84 e3       	ldi	r24, 0x34	; 52
     38c:	08 95       	ret
     38e:	87 e3       	ldi	r24, 0x37	; 55
     390:	08 95       	ret
     392:	8a e2       	ldi	r24, 0x2A	; 42
     394:	08 95       	ret
     396:	82 e3       	ldi	r24, 0x32	; 50
     398:	08 95       	ret
     39a:	85 e3       	ldi	r24, 0x35	; 53
     39c:	08 95       	ret
     39e:	88 e3       	ldi	r24, 0x38	; 56
     3a0:	08 95       	ret
     3a2:	80 e3       	ldi	r24, 0x30	; 48
     3a4:	08 95       	ret
     3a6:	83 e3       	ldi	r24, 0x33	; 51
     3a8:	08 95       	ret
     3aa:	86 e3       	ldi	r24, 0x36	; 54
     3ac:	08 95       	ret
     3ae:	89 e3       	ldi	r24, 0x39	; 57
     3b0:	08 95       	ret
     3b2:	83 e2       	ldi	r24, 0x23	; 35
     3b4:	08 95       	ret
     3b6:	81 e4       	ldi	r24, 0x41	; 65
     3b8:	08 95       	ret
     3ba:	82 e4       	ldi	r24, 0x42	; 66
     3bc:	08 95       	ret
     3be:	83 e4       	ldi	r24, 0x43	; 67
     3c0:	08 95       	ret
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	08 95       	ret

000003c6 <delay_ms>:
     3c6:	18 16       	cp	r1, r24
     3c8:	19 06       	cpc	r1, r25
     3ca:	5c f0       	brlt	.+22     	; 0x3e2 <delay_ms+0x1c>
     3cc:	08 95       	ret
     3ce:	00 00       	nop
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	31 09       	sbc	r19, r1
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <delay_ms+0x8>
     3d6:	4f 5f       	subi	r20, 0xFF	; 255
     3d8:	5f 4f       	sbci	r21, 0xFF	; 255
     3da:	48 17       	cp	r20, r24
     3dc:	59 07       	cpc	r21, r25
     3de:	29 f4       	brne	.+10     	; 0x3ea <delay_ms+0x24>
     3e0:	08 95       	ret
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	67 e0       	ldi	r22, 0x07	; 7
     3e8:	73 e0       	ldi	r23, 0x03	; 3
     3ea:	9b 01       	movw	r18, r22
     3ec:	f0 cf       	rjmp	.-32     	; 0x3ce <delay_ms+0x8>

000003ee <LCD_WriteCommand>:
     3ee:	16 98       	cbi	0x02, 6	; 2
     3f0:	85 b9       	out	0x05, r24	; 5
     3f2:	17 9a       	sbi	0x02, 7	; 2
     3f4:	00 00       	nop
     3f6:	17 98       	cbi	0x02, 7	; 2
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	e4 cf       	rjmp	.-56     	; 0x3c6 <delay_ms>

000003fe <LCD_ClearScreen>:
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	f6 cf       	rjmp	.-20     	; 0x3ee <LCD_WriteCommand>

00000402 <LCD_init>:
     402:	84 e6       	ldi	r24, 0x64	; 100
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	df df       	rcall	.-66     	; 0x3c6 <delay_ms>
     408:	88 e3       	ldi	r24, 0x38	; 56
     40a:	f1 df       	rcall	.-30     	; 0x3ee <LCD_WriteCommand>
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	ef df       	rcall	.-34     	; 0x3ee <LCD_WriteCommand>
     410:	8f e0       	ldi	r24, 0x0F	; 15
     412:	ed df       	rcall	.-38     	; 0x3ee <LCD_WriteCommand>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	eb df       	rcall	.-42     	; 0x3ee <LCD_WriteCommand>
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	d4 cf       	rjmp	.-88     	; 0x3c6 <delay_ms>

0000041e <LCD_WriteData>:
     41e:	16 9a       	sbi	0x02, 6	; 2
     420:	85 b9       	out	0x05, r24	; 5
     422:	17 9a       	sbi	0x02, 7	; 2
     424:	00 00       	nop
     426:	17 98       	cbi	0x02, 7	; 2
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	cc cf       	rjmp	.-104    	; 0x3c6 <delay_ms>

0000042e <LCD_Cursor>:
     42e:	81 31       	cpi	r24, 0x11	; 17
     430:	10 f4       	brcc	.+4      	; 0x436 <LCD_Cursor+0x8>
     432:	81 58       	subi	r24, 0x81	; 129
     434:	dc cf       	rjmp	.-72     	; 0x3ee <LCD_WriteCommand>
     436:	81 55       	subi	r24, 0x51	; 81
     438:	da cf       	rjmp	.-76     	; 0x3ee <LCD_WriteCommand>

0000043a <LCD_DisplayString>:
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	18 2f       	mov	r17, r24
     442:	eb 01       	movw	r28, r22
     444:	dc df       	rcall	.-72     	; 0x3fe <LCD_ClearScreen>
     446:	98 81       	ld	r25, Y
     448:	99 23       	and	r25, r25
     44a:	51 f0       	breq	.+20     	; 0x460 <LCD_DisplayString+0x26>
     44c:	81 2f       	mov	r24, r17
     44e:	18 2f       	mov	r17, r24
     450:	1f 5f       	subi	r17, 0xFF	; 255
     452:	ed df       	rcall	.-38     	; 0x42e <LCD_Cursor>
     454:	89 91       	ld	r24, Y+
     456:	e3 df       	rcall	.-58     	; 0x41e <LCD_WriteData>
     458:	81 2f       	mov	r24, r17
     45a:	98 81       	ld	r25, Y
     45c:	91 11       	cpse	r25, r1
     45e:	f7 cf       	rjmp	.-18     	; 0x44e <LCD_DisplayString+0x14>
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <initUSART>:
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	81 f0       	breq	.+32     	; 0x48c <initUSART+0x24>
     46c:	e1 ec       	ldi	r30, 0xC1	; 193
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	88 61       	ori	r24, 0x18	; 24
     474:	80 83       	st	Z, r24
     476:	e2 ec       	ldi	r30, 0xC2	; 194
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	86 60       	ori	r24, 0x06	; 6
     47e:	80 83       	st	Z, r24
     480:	83 e3       	ldi	r24, 0x33	; 51
     482:	80 93 c4 00 	sts	0x00C4, r24
     486:	10 92 c5 00 	sts	0x00C5, r1
     48a:	08 95       	ret
     48c:	e9 ec       	ldi	r30, 0xC9	; 201
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	88 61       	ori	r24, 0x18	; 24
     494:	80 83       	st	Z, r24
     496:	ea ec       	ldi	r30, 0xCA	; 202
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	86 60       	ori	r24, 0x06	; 6
     49e:	80 83       	st	Z, r24
     4a0:	83 e3       	ldi	r24, 0x33	; 51
     4a2:	80 93 cc 00 	sts	0x00CC, r24
     4a6:	10 92 cd 00 	sts	0x00CD, r1
     4aa:	08 95       	ret

000004ac <USART_IsSendReady>:
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	21 f0       	breq	.+8      	; 0x4b8 <USART_IsSendReady+0xc>
     4b0:	80 91 c0 00 	lds	r24, 0x00C0
     4b4:	80 72       	andi	r24, 0x20	; 32
     4b6:	08 95       	ret
     4b8:	80 91 c8 00 	lds	r24, 0x00C8
     4bc:	80 72       	andi	r24, 0x20	; 32
     4be:	08 95       	ret

000004c0 <USART_HasTransmitted>:
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	21 f0       	breq	.+8      	; 0x4cc <USART_HasTransmitted+0xc>
     4c4:	80 91 c0 00 	lds	r24, 0x00C0
     4c8:	80 74       	andi	r24, 0x40	; 64
     4ca:	08 95       	ret
     4cc:	80 91 c8 00 	lds	r24, 0x00C8
     4d0:	80 74       	andi	r24, 0x40	; 64
     4d2:	08 95       	ret

000004d4 <USART_HasReceived>:
     4d4:	81 30       	cpi	r24, 0x01	; 1
     4d6:	21 f0       	breq	.+8      	; 0x4e0 <USART_HasReceived+0xc>
     4d8:	80 91 c0 00 	lds	r24, 0x00C0
     4dc:	80 78       	andi	r24, 0x80	; 128
     4de:	08 95       	ret
     4e0:	80 91 c8 00 	lds	r24, 0x00C8
     4e4:	80 78       	andi	r24, 0x80	; 128
     4e6:	08 95       	ret

000004e8 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     4e8:	61 30       	cpi	r22, 0x01	; 1
     4ea:	41 f0       	breq	.+16     	; 0x4fc <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     4ec:	e0 ec       	ldi	r30, 0xC0	; 192
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	90 81       	ld	r25, Z
     4f2:	95 ff       	sbrs	r25, 5
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <USART_Send+0x8>
		UDR0 = sendMe;
     4f6:	80 93 c6 00 	sts	0x00C6, r24
     4fa:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     4fc:	e8 ec       	ldi	r30, 0xC8	; 200
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	90 81       	ld	r25, Z
     502:	95 ff       	sbrs	r25, 5
     504:	fd cf       	rjmp	.-6      	; 0x500 <USART_Send+0x18>
		UDR1 = sendMe;
     506:	80 93 ce 00 	sts	0x00CE, r24
     50a:	08 95       	ret

0000050c <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	41 f0       	breq	.+16     	; 0x520 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     510:	e0 ec       	ldi	r30, 0xC0	; 192
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	88 23       	and	r24, r24
     518:	ec f7       	brge	.-6      	; 0x514 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     51a:	80 91 c6 00 	lds	r24, 0x00C6
     51e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     520:	e8 ec       	ldi	r30, 0xC8	; 200
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	88 23       	and	r24, r24
     528:	ec f7       	brge	.-6      	; 0x524 <USART_Receive+0x18>
		return UDR1;
     52a:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     52e:	08 95       	ret

00000530 <verify_code>:
enum sendState 	{send_init, send} send_state;
enum receiveState {rec_init, receive} rec_state;

// Helper Methods
bool verify_code()
{
     530:	df 92       	push	r13
     532:	ef 92       	push	r14
     534:	ff 92       	push	r15
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <verify_code+0x10>
     540:	00 d0       	rcall	.+0      	; 0x542 <verify_code+0x12>
     542:	00 d0       	rcall	.+0      	; 0x544 <verify_code+0x14>
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	bool first, sec, third, fourth, fifth = false;
	char temp = '\0';
	char temp_code[6] = {' ',' ',' ',' ',' ','\0'};
     548:	86 e0       	ldi	r24, 0x06	; 6
     54a:	e7 e4       	ldi	r30, 0x47	; 71
     54c:	f1 e0       	ldi	r31, 0x01	; 1
     54e:	de 01       	movw	r26, r28
     550:	11 96       	adiw	r26, 0x01	; 1
     552:	01 90       	ld	r0, Z+
     554:	0d 92       	st	X+, r0
     556:	8a 95       	dec	r24
     558:	e1 f7       	brne	.-8      	; 0x552 <verify_code+0x22>
	LCD_DisplayString(1, enter_cur_code_string);
     55a:	60 91 35 01 	lds	r22, 0x0135
     55e:	70 91 36 01 	lds	r23, 0x0136
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	6a df       	rcall	.-300    	; 0x43a <LCD_DisplayString>
     566:	8e 01       	movw	r16, r28
     568:	0f 5f       	subi	r16, 0xFF	; 255
     56a:	1f 4f       	sbci	r17, 0xFF	; 255
enum tempState 	{temp_init, read_btn, temp_increase, temp_decrease} temp_state;
enum sendState 	{send_init, send} send_state;
enum receiveState {rec_init, receive} rec_state;

// Helper Methods
bool verify_code()
     56c:	7e 01       	movw	r14, r28
     56e:	86 e0       	ldi	r24, 0x06	; 6
     570:	e8 0e       	add	r14, r24
     572:	f1 1c       	adc	r15, r1
	// Verifying current passcode
	for(int i = 0; i < 5; i++)
	{
		while(true)
		{
			temp = GetKeypadKey();
     574:	8e de       	rcall	.-740    	; 0x292 <GetKeypadKey>
     576:	d8 2e       	mov	r13, r24
			delay_ms(300);
     578:	8c e2       	ldi	r24, 0x2C	; 44
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	24 df       	rcall	.-440    	; 0x3c6 <delay_ms>
			if(temp != '\0') break;
     57e:	dd 20       	and	r13, r13
     580:	c9 f3       	breq	.-14     	; 0x574 <verify_code+0x44>
		}
		temp_code[i] = temp;
     582:	f8 01       	movw	r30, r16
     584:	d1 92       	st	Z+, r13
     586:	8f 01       	movw	r16, r30

		LCD_DisplayString(1, temp_code);
     588:	be 01       	movw	r22, r28
     58a:	6f 5f       	subi	r22, 0xFF	; 255
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	54 df       	rcall	.-344    	; 0x43a <LCD_DisplayString>
	bool first, sec, third, fourth, fifth = false;
	char temp = '\0';
	char temp_code[6] = {' ',' ',' ',' ',' ','\0'};
	LCD_DisplayString(1, enter_cur_code_string);
	// Verifying current passcode
	for(int i = 0; i < 5; i++)
     592:	0e 15       	cp	r16, r14
     594:	1f 05       	cpc	r17, r15
     596:	71 f7       	brne	.-36     	; 0x574 <verify_code+0x44>
		temp_code[i] = temp;

		LCD_DisplayString(1, temp_code);
		temp = '\0';
	}
	if(!(temp_code[0] == code[0] && temp_code[1] == code[1] && temp_code[2] == code[2] && 
     598:	99 81       	ldd	r25, Y+1	; 0x01
     59a:	80 91 21 01 	lds	r24, 0x0121
     59e:	98 13       	cpse	r25, r24
     5a0:	14 c0       	rjmp	.+40     	; 0x5ca <verify_code+0x9a>
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	80 91 22 01 	lds	r24, 0x0122
     5a8:	98 13       	cpse	r25, r24
     5aa:	0f c0       	rjmp	.+30     	; 0x5ca <verify_code+0x9a>
     5ac:	9b 81       	ldd	r25, Y+3	; 0x03
     5ae:	80 91 23 01 	lds	r24, 0x0123
     5b2:	98 13       	cpse	r25, r24
     5b4:	0a c0       	rjmp	.+20     	; 0x5ca <verify_code+0x9a>
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	80 91 24 01 	lds	r24, 0x0124
     5bc:	98 13       	cpse	r25, r24
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <verify_code+0x9a>
     5c0:	9d 81       	ldd	r25, Y+5	; 0x05
     5c2:	80 91 25 01 	lds	r24, 0x0125
     5c6:	98 17       	cp	r25, r24
     5c8:	41 f0       	breq	.+16     	; 0x5da <verify_code+0xaa>
		temp_code[3] == code[3] && temp_code[4] == code[4]))
		{
			LCD_DisplayString(1, invalid_code_string);
     5ca:	60 91 31 01 	lds	r22, 0x0131
     5ce:	70 91 32 01 	lds	r23, 0x0132
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	32 df       	rcall	.-412    	; 0x43a <LCD_DisplayString>
			return false;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <verify_code+0xac>
		}
	
	return true;
     5da:	81 e0       	ldi	r24, 0x01	; 1
}
     5dc:	26 96       	adiw	r28, 0x06	; 6
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	08 95       	ret

000005f8 <change_code>:

void change_code()
{
     5f8:	bf 92       	push	r11
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <change_code+0x14>
     60c:	00 d0       	rcall	.+0      	; 0x60e <change_code+0x16>
     60e:	00 d0       	rcall	.+0      	; 0x610 <change_code+0x18>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	char temp = '\0';
	char n_code[6] = {' ',' ',' ',' ',' ','\0'};	
     614:	86 e0       	ldi	r24, 0x06	; 6
     616:	e7 e4       	ldi	r30, 0x47	; 71
     618:	f1 e0       	ldi	r31, 0x01	; 1
     61a:	de 01       	movw	r26, r28
     61c:	11 96       	adiw	r26, 0x01	; 1
     61e:	01 90       	ld	r0, Z+
     620:	0d 92       	st	X+, r0
     622:	8a 95       	dec	r24
     624:	e1 f7       	brne	.-8      	; 0x61e <change_code+0x26>
	LCD_DisplayString(1, enter_new_code_string);
     626:	60 91 33 01 	lds	r22, 0x0133
     62a:	70 91 34 01 	lds	r23, 0x0134
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	04 df       	rcall	.-504    	; 0x43a <LCD_DisplayString>
     632:	8e 01       	movw	r16, r28
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255
     638:	0f 2e       	mov	r0, r31
     63a:	f1 e2       	ldi	r31, 0x21	; 33
     63c:	ef 2e       	mov	r14, r31
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	ff 2e       	mov	r15, r31
     642:	f0 2d       	mov	r31, r0
		}
	
	return true;
}

void change_code()
     644:	6e 01       	movw	r12, r28
     646:	86 e0       	ldi	r24, 0x06	; 6
     648:	c8 0e       	add	r12, r24
     64a:	d1 1c       	adc	r13, r1
	LCD_DisplayString(1, enter_new_code_string);
	for(int i = 0; i < 5; i++)
	{
		while(true)
		{
			temp = GetKeypadKey();
     64c:	22 de       	rcall	.-956    	; 0x292 <GetKeypadKey>
     64e:	b8 2e       	mov	r11, r24
			delay_ms(300);
     650:	8c e2       	ldi	r24, 0x2C	; 44
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	b8 de       	rcall	.-656    	; 0x3c6 <delay_ms>
			if(temp != '\0') break;
     656:	bb 20       	and	r11, r11
     658:	c9 f3       	breq	.-14     	; 0x64c <change_code+0x54>
		}
		n_code[i] = temp;
     65a:	f8 01       	movw	r30, r16
     65c:	b1 92       	st	Z+, r11
     65e:	8f 01       	movw	r16, r30
		code[i] = temp;
     660:	f7 01       	movw	r30, r14
     662:	b1 92       	st	Z+, r11
     664:	7f 01       	movw	r14, r30
		if(temp != '#')
     666:	f3 e2       	ldi	r31, 0x23	; 35
     668:	bf 16       	cp	r11, r31
     66a:	29 f0       	breq	.+10     	; 0x676 <change_code+0x7e>
			LCD_DisplayString(1, n_code);
     66c:	be 01       	movw	r22, r28
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	e2 de       	rcall	.-572    	; 0x43a <LCD_DisplayString>
void change_code()
{
	char temp = '\0';
	char n_code[6] = {' ',' ',' ',' ',' ','\0'};	
	LCD_DisplayString(1, enter_new_code_string);
	for(int i = 0; i < 5; i++)
     676:	0c 15       	cp	r16, r12
     678:	1d 05       	cpc	r17, r13
     67a:	41 f7       	brne	.-48     	; 0x64c <change_code+0x54>
		code[i] = temp;
		if(temp != '#')
			LCD_DisplayString(1, n_code);
		temp = '\0';
	}
}
     67c:	26 96       	adiw	r28, 0x06	; 6
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	08 95       	ret

0000069c <Key_Tick>:

// State Machines
void Key_Tick()
{
	// Transitions
	switch(key_state)
     69c:	80 91 e2 08 	lds	r24, 0x08E2
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	69 f1       	breq	.+90     	; 0x6fe <Key_Tick+0x62>
     6a4:	28 f4       	brcc	.+10     	; 0x6b0 <Key_Tick+0x14>
     6a6:	88 23       	and	r24, r24
     6a8:	41 f0       	breq	.+16     	; 0x6ba <Key_Tick+0x1e>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	89 f5       	brne	.+98     	; 0x710 <Key_Tick+0x74>
     6ae:	24 c0       	rjmp	.+72     	; 0x6f8 <Key_Tick+0x5c>
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	41 f1       	breq	.+80     	; 0x704 <Key_Tick+0x68>
     6b4:	84 30       	cpi	r24, 0x04	; 4
     6b6:	61 f5       	brne	.+88     	; 0x710 <Key_Tick+0x74>
     6b8:	28 c0       	rjmp	.+80     	; 0x70a <Key_Tick+0x6e>
	{
		case INITK:
			if(GetKeypadKey() == 'A')
     6ba:	eb dd       	rcall	.-1066   	; 0x292 <GetKeypadKey>
     6bc:	81 34       	cpi	r24, 0x41	; 65
     6be:	21 f4       	brne	.+8      	; 0x6c8 <Key_Tick+0x2c>
				key_state = set_a;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 e2 08 	sts	0x08E2, r24
     6c6:	2f c0       	rjmp	.+94     	; 0x726 <Key_Tick+0x8a>
			else if(GetKeypadKey() == 'B')
     6c8:	e4 dd       	rcall	.-1080   	; 0x292 <GetKeypadKey>
     6ca:	82 34       	cpi	r24, 0x42	; 66
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <Key_Tick+0x3a>
				key_state = set_b;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	80 93 e2 08 	sts	0x08E2, r24
     6d4:	2c c0       	rjmp	.+88     	; 0x72e <Key_Tick+0x92>
			else if(GetKeypadKey() == 'C')
     6d6:	dd dd       	rcall	.-1094   	; 0x292 <GetKeypadKey>
     6d8:	83 34       	cpi	r24, 0x43	; 67
     6da:	21 f4       	brne	.+8      	; 0x6e4 <Key_Tick+0x48>
				key_state = set_c;
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	80 93 e2 08 	sts	0x08E2, r24
     6e2:	29 c0       	rjmp	.+82     	; 0x736 <Key_Tick+0x9a>
			else if(GetKeypadKey() == 'D')
     6e4:	d6 dd       	rcall	.-1108   	; 0x292 <GetKeypadKey>
     6e6:	84 34       	cpi	r24, 0x44	; 68
     6e8:	21 f4       	brne	.+8      	; 0x6f2 <Key_Tick+0x56>
				key_state = set_d;
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	80 93 e2 08 	sts	0x08E2, r24
     6f0:	26 c0       	rjmp	.+76     	; 0x73e <Key_Tick+0xa2>
			else
				key_state = INITK;
     6f2:	10 92 e2 08 	sts	0x08E2, r1
     6f6:	08 95       	ret
			break;
		case set_a:
			key_state = INITK;
     6f8:	10 92 e2 08 	sts	0x08E2, r1
			break;
     6fc:	08 95       	ret
		case set_b:
			key_state = INITK;
     6fe:	10 92 e2 08 	sts	0x08E2, r1
			break;
     702:	08 95       	ret
		case set_c:
			key_state = INITK;
     704:	10 92 e2 08 	sts	0x08E2, r1
			break;
     708:	08 95       	ret
		case set_d:
			key_state = INITK;
     70a:	10 92 e2 08 	sts	0x08E2, r1
			break;
     70e:	08 95       	ret
	}

	// Actions
	switch(key_state)
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	69 f0       	breq	.+26     	; 0x72e <Key_Tick+0x92>
     714:	18 f4       	brcc	.+6      	; 0x71c <Key_Tick+0x80>
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	a9 f4       	brne	.+42     	; 0x744 <Key_Tick+0xa8>
     71a:	05 c0       	rjmp	.+10     	; 0x726 <Key_Tick+0x8a>
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	59 f0       	breq	.+22     	; 0x736 <Key_Tick+0x9a>
     720:	84 30       	cpi	r24, 0x04	; 4
     722:	81 f4       	brne	.+32     	; 0x744 <Key_Tick+0xa8>
     724:	0c c0       	rjmp	.+24     	; 0x73e <Key_Tick+0xa2>
	{
		case INITK:
			break;
		case set_a:
			choice = 'A';
     726:	81 e4       	ldi	r24, 0x41	; 65
     728:	80 93 dc 08 	sts	0x08DC, r24
			break;
     72c:	08 95       	ret
		case set_b:
			choice = 'B';
     72e:	82 e4       	ldi	r24, 0x42	; 66
     730:	80 93 dc 08 	sts	0x08DC, r24
			break;
     734:	08 95       	ret
		case set_c:
			choice = 'C';
     736:	83 e4       	ldi	r24, 0x43	; 67
     738:	80 93 dc 08 	sts	0x08DC, r24
			break;
     73c:	08 95       	ret
		case set_d:
			choice = 'D';
     73e:	84 e4       	ldi	r24, 0x44	; 68
     740:	80 93 dc 08 	sts	0x08DC, r24
     744:	08 95       	ret

00000746 <LCD_tick>:
}

void LCD_tick()
{
	// Actions
	switch(lcd_state)
     746:	80 91 d3 08 	lds	r24, 0x08D3
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	09 f4       	brne	.+2      	; 0x750 <LCD_tick+0xa>
     74e:	4f c0       	rjmp	.+158    	; 0x7ee <LCD_tick+0xa8>
     750:	38 f0       	brcs	.+14     	; 0x760 <LCD_tick+0x1a>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	09 f4       	brne	.+2      	; 0x758 <LCD_tick+0x12>
     756:	68 c0       	rjmp	.+208    	; 0x828 <LCD_tick+0xe2>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	09 f0       	breq	.+2      	; 0x75e <LCD_tick+0x18>
     75c:	7f c0       	rjmp	.+254    	; 0x85c <LCD_tick+0x116>
     75e:	73 c0       	rjmp	.+230    	; 0x846 <LCD_tick+0x100>
	{
		case LCDinit:
			//(page == 1) ? LCD_DisplayString(1, page_one) : LCD_DisplayString(1, page_two);
			if(fan == 1) {LCD_DisplayString(1, fan_one); delay_ms(1500);}
     760:	80 91 d5 08 	lds	r24, 0x08D5
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	49 f4       	brne	.+18     	; 0x77a <LCD_tick+0x34>
     768:	60 91 2d 01 	lds	r22, 0x012D
     76c:	70 91 2e 01 	lds	r23, 0x012E
     770:	64 de       	rcall	.-824    	; 0x43a <LCD_DisplayString>
     772:	8c ed       	ldi	r24, 0xDC	; 220
     774:	95 e0       	ldi	r25, 0x05	; 5
     776:	27 de       	rcall	.-946    	; 0x3c6 <delay_ms>
     778:	37 c0       	rjmp	.+110    	; 0x7e8 <LCD_tick+0xa2>
			else if(fan == 2) {LCD_DisplayString(1, fan_two); delay_ms(1500);}
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	51 f4       	brne	.+20     	; 0x792 <LCD_tick+0x4c>
     77e:	60 91 2b 01 	lds	r22, 0x012B
     782:	70 91 2c 01 	lds	r23, 0x012C
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	58 de       	rcall	.-848    	; 0x43a <LCD_DisplayString>
     78a:	8c ed       	ldi	r24, 0xDC	; 220
     78c:	95 e0       	ldi	r25, 0x05	; 5
     78e:	1b de       	rcall	.-970    	; 0x3c6 <delay_ms>
     790:	2b c0       	rjmp	.+86     	; 0x7e8 <LCD_tick+0xa2>
			else if(fan == 3) {LCD_DisplayString(1, fan_three); delay_ms(1500);}
     792:	83 30       	cpi	r24, 0x03	; 3
     794:	51 f4       	brne	.+20     	; 0x7aa <LCD_tick+0x64>
     796:	60 91 29 01 	lds	r22, 0x0129
     79a:	70 91 2a 01 	lds	r23, 0x012A
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	4c de       	rcall	.-872    	; 0x43a <LCD_DisplayString>
     7a2:	8c ed       	ldi	r24, 0xDC	; 220
     7a4:	95 e0       	ldi	r25, 0x05	; 5
     7a6:	0f de       	rcall	.-994    	; 0x3c6 <delay_ms>
     7a8:	1f c0       	rjmp	.+62     	; 0x7e8 <LCD_tick+0xa2>
			else if(fan == 4) {LCD_DisplayString(1, fan_four); delay_ms(1500);}
     7aa:	84 30       	cpi	r24, 0x04	; 4
     7ac:	51 f4       	brne	.+20     	; 0x7c2 <LCD_tick+0x7c>
     7ae:	60 91 27 01 	lds	r22, 0x0127
     7b2:	70 91 28 01 	lds	r23, 0x0128
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	40 de       	rcall	.-896    	; 0x43a <LCD_DisplayString>
     7ba:	8c ed       	ldi	r24, 0xDC	; 220
     7bc:	95 e0       	ldi	r25, 0x05	; 5
     7be:	03 de       	rcall	.-1018   	; 0x3c6 <delay_ms>
     7c0:	13 c0       	rjmp	.+38     	; 0x7e8 <LCD_tick+0xa2>
			else if(page == 1)
     7c2:	80 91 e0 08 	lds	r24, 0x08E0
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	31 f4       	brne	.+12     	; 0x7d6 <LCD_tick+0x90>
				LCD_DisplayString(1, page_one);
     7ca:	60 91 41 01 	lds	r22, 0x0141
     7ce:	70 91 42 01 	lds	r23, 0x0142
     7d2:	33 de       	rcall	.-922    	; 0x43a <LCD_DisplayString>
     7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <LCD_tick+0xa2>
			else if(page == 2)
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	09 f0       	breq	.+2      	; 0x7dc <LCD_tick+0x96>
     7da:	51 c0       	rjmp	.+162    	; 0x87e <LCD_tick+0x138>
				LCD_DisplayString(1, page_two);
     7dc:	60 91 3f 01 	lds	r22, 0x013F
     7e0:	70 91 40 01 	lds	r23, 0x0140
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	29 de       	rcall	.-942    	; 0x43a <LCD_DisplayString>
			else 
				break;
			fan = 0;
     7e8:	10 92 d5 08 	sts	0x08D5, r1
			break;
     7ec:	37 c0       	rjmp	.+110    	; 0x85c <LCD_tick+0x116>
		case door:
			if(verify_code())
     7ee:	a0 de       	rcall	.-704    	; 0x530 <verify_code>
     7f0:	88 23       	and	r24, r24
     7f2:	b9 f0       	breq	.+46     	; 0x822 <LCD_tick+0xdc>
			{
				motor_engage = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 e1 08 	sts	0x08E1, r24
				(locked) ? LCD_DisplayString(1, lock_string) : LCD_DisplayString(1, unlock_string);
     7fa:	80 91 da 08 	lds	r24, 0x08DA
     7fe:	88 23       	and	r24, r24
     800:	39 f0       	breq	.+14     	; 0x810 <LCD_tick+0xca>
     802:	60 91 3b 01 	lds	r22, 0x013B
     806:	70 91 3c 01 	lds	r23, 0x013C
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	16 de       	rcall	.-980    	; 0x43a <LCD_DisplayString>
     80e:	06 c0       	rjmp	.+12     	; 0x81c <LCD_tick+0xd6>
     810:	60 91 3d 01 	lds	r22, 0x013D
     814:	70 91 3e 01 	lds	r23, 0x013E
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	0f de       	rcall	.-994    	; 0x43a <LCD_DisplayString>
				delay_ms(1500);
     81c:	8c ed       	ldi	r24, 0xDC	; 220
     81e:	95 e0       	ldi	r25, 0x05	; 5
     820:	d2 dd       	rcall	.-1116   	; 0x3c6 <delay_ms>
			}
			choice = NULL;
     822:	10 92 dc 08 	sts	0x08DC, r1
			break;
     826:	1a c0       	rjmp	.+52     	; 0x85c <LCD_tick+0x116>
		case ch_code:
			LCD_DisplayString(1, change_code_string);
     828:	60 91 39 01 	lds	r22, 0x0139
     82c:	70 91 3a 01 	lds	r23, 0x013A
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	03 de       	rcall	.-1018   	; 0x43a <LCD_DisplayString>
			delay_ms(1500);
     834:	8c ed       	ldi	r24, 0xDC	; 220
     836:	95 e0       	ldi	r25, 0x05	; 5
     838:	c6 dd       	rcall	.-1140   	; 0x3c6 <delay_ms>
			if(verify_code())
     83a:	7a de       	rcall	.-780    	; 0x530 <verify_code>
     83c:	81 11       	cpse	r24, r1
				change_code();
     83e:	dc de       	rcall	.-584    	; 0x5f8 <change_code>
			choice = NULL;
     840:	10 92 dc 08 	sts	0x08DC, r1
			break;
     844:	0b c0       	rjmp	.+22     	; 0x85c <LCD_tick+0x116>
		case n_page:
			page = (page == 1) ? 2 : 1;
     846:	80 91 e0 08 	lds	r24, 0x08E0
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	11 f4       	brne	.+4      	; 0x852 <LCD_tick+0x10c>
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	01 c0       	rjmp	.+2      	; 0x854 <LCD_tick+0x10e>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 e0 08 	sts	0x08E0, r24
			choice = NULL;
     858:	10 92 dc 08 	sts	0x08DC, r1
		case set_thermo:
			break;
	}
	
	// Transitions
	switch(lcd_state)
     85c:	80 91 d3 08 	lds	r24, 0x08D3
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	c1 f1       	breq	.+112    	; 0x8d4 <LCD_tick+0x18e>
     864:	30 f4       	brcc	.+12     	; 0x872 <LCD_tick+0x12c>
     866:	88 23       	and	r24, r24
     868:	51 f0       	breq	.+20     	; 0x87e <LCD_tick+0x138>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	09 f0       	breq	.+2      	; 0x870 <LCD_tick+0x12a>
     86e:	43 c0       	rjmp	.+134    	; 0x8f6 <LCD_tick+0x1b0>
     870:	2e c0       	rjmp	.+92     	; 0x8ce <LCD_tick+0x188>
     872:	83 30       	cpi	r24, 0x03	; 3
     874:	91 f1       	breq	.+100    	; 0x8da <LCD_tick+0x194>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	09 f0       	breq	.+2      	; 0x87c <LCD_tick+0x136>
     87a:	3d c0       	rjmp	.+122    	; 0x8f6 <LCD_tick+0x1b0>
     87c:	31 c0       	rjmp	.+98     	; 0x8e0 <LCD_tick+0x19a>
	{
		case LCDinit:
			if(choice == '\0' || choice == NULL)
     87e:	80 91 dc 08 	lds	r24, 0x08DC
     882:	88 23       	and	r24, r24
     884:	c1 f1       	breq	.+112    	; 0x8f6 <LCD_tick+0x1b0>
				break;
			else if(choice == 'A')
     886:	81 34       	cpi	r24, 0x41	; 65
     888:	21 f4       	brne	.+8      	; 0x892 <LCD_tick+0x14c>
				lcd_state = door;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 d3 08 	sts	0x08D3, r24
     890:	08 95       	ret
			else if(choice == 'B')
     892:	82 34       	cpi	r24, 0x42	; 66
     894:	21 f4       	brne	.+8      	; 0x89e <LCD_tick+0x158>
				lcd_state = ch_code;
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	80 93 d3 08 	sts	0x08D3, r24
     89c:	08 95       	ret
			else if(choice == 'C')
     89e:	83 34       	cpi	r24, 0x43	; 67
     8a0:	21 f4       	brne	.+8      	; 0x8aa <LCD_tick+0x164>
				lcd_state = n_page;
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	80 93 d3 08 	sts	0x08D3, r24
     8a8:	08 95       	ret
			else if(choice == 'D')
     8aa:	84 34       	cpi	r24, 0x44	; 68
     8ac:	21 f5       	brne	.+72     	; 0x8f6 <LCD_tick+0x1b0>
			{
				LCD_DisplayString(1, set_thermo_string);
     8ae:	60 91 37 01 	lds	r22, 0x0137
     8b2:	70 91 38 01 	lds	r23, 0x0138
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	c0 dd       	rcall	.-1152   	; 0x43a <LCD_DisplayString>
				delay_ms(1500);
     8ba:	8c ed       	ldi	r24, 0xDC	; 220
     8bc:	95 e0       	ldi	r25, 0x05	; 5
     8be:	83 dd       	rcall	.-1274   	; 0x3c6 <delay_ms>
				lcd_state = set_thermo;
     8c0:	84 e0       	ldi	r24, 0x04	; 4
     8c2:	80 93 d3 08 	sts	0x08D3, r24
				setting_temp = true;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 d9 08 	sts	0x08D9, r24
     8cc:	08 95       	ret
			}
			else
				break;
			break;
		case door:
			lcd_state = LCDinit;
     8ce:	10 92 d3 08 	sts	0x08D3, r1
			break;
     8d2:	08 95       	ret
		case ch_code:
			lcd_state = LCDinit;
     8d4:	10 92 d3 08 	sts	0x08D3, r1
			break;
     8d8:	08 95       	ret
		case n_page:
			lcd_state = LCDinit;
     8da:	10 92 d3 08 	sts	0x08D3, r1
			break;
     8de:	08 95       	ret
		case set_thermo:
			if(!setting_temp)
     8e0:	80 91 d9 08 	lds	r24, 0x08D9
     8e4:	81 11       	cpse	r24, r1
     8e6:	07 c0       	rjmp	.+14     	; 0x8f6 <LCD_tick+0x1b0>
			{
				lcd_state = LCDinit;				
     8e8:	10 92 d3 08 	sts	0x08D3, r1
				choice = NULL;
     8ec:	10 92 dc 08 	sts	0x08DC, r1
				send_byte = true;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 d2 08 	sts	0x08D2, r24
     8f6:	08 95       	ret

000008f8 <Motor_Tick>:
}

void Motor_Tick()
{
	// Transitions
	switch(motor_state)
     8f8:	80 91 d7 08 	lds	r24, 0x08D7
     8fc:	84 30       	cpi	r24, 0x04	; 4
     8fe:	09 f4       	brne	.+2      	; 0x902 <Motor_Tick+0xa>
     900:	99 c0       	rjmp	.+306    	; 0xa34 <Motor_Tick+0x13c>
     902:	50 f4       	brcc	.+20     	; 0x918 <Motor_Tick+0x20>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	51 f1       	breq	.+84     	; 0x95c <Motor_Tick+0x64>
     908:	98 f0       	brcs	.+38     	; 0x930 <Motor_Tick+0x38>
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	09 f4       	brne	.+2      	; 0x910 <Motor_Tick+0x18>
     90e:	4a c0       	rjmp	.+148    	; 0x9a4 <Motor_Tick+0xac>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	09 f0       	breq	.+2      	; 0x916 <Motor_Tick+0x1e>
     914:	42 c1       	rjmp	.+644    	; 0xb9a <Motor_Tick+0x2a2>
     916:	6a c0       	rjmp	.+212    	; 0x9ec <Motor_Tick+0xf4>
     918:	86 30       	cpi	r24, 0x06	; 6
     91a:	09 f4       	brne	.+2      	; 0x91e <Motor_Tick+0x26>
     91c:	d3 c0       	rjmp	.+422    	; 0xac4 <Motor_Tick+0x1cc>
     91e:	08 f4       	brcc	.+2      	; 0x922 <Motor_Tick+0x2a>
     920:	ad c0       	rjmp	.+346    	; 0xa7c <Motor_Tick+0x184>
     922:	87 30       	cpi	r24, 0x07	; 7
     924:	09 f4       	brne	.+2      	; 0x928 <Motor_Tick+0x30>
     926:	f2 c0       	rjmp	.+484    	; 0xb0c <Motor_Tick+0x214>
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	09 f0       	breq	.+2      	; 0x92e <Motor_Tick+0x36>
     92c:	36 c1       	rjmp	.+620    	; 0xb9a <Motor_Tick+0x2a2>
     92e:	12 c1       	rjmp	.+548    	; 0xb54 <Motor_Tick+0x25c>
	{
		case motor_init:
			if(motor_engage && locked)
     930:	80 91 e1 08 	lds	r24, 0x08E1
     934:	88 23       	and	r24, r24
     936:	09 f4       	brne	.+2      	; 0x93a <Motor_Tick+0x42>
     938:	4b c1       	rjmp	.+662    	; 0xbd0 <Motor_Tick+0x2d8>
     93a:	80 91 da 08 	lds	r24, 0x08DA
     93e:	88 23       	and	r24, r24
     940:	31 f0       	breq	.+12     	; 0x94e <Motor_Tick+0x56>
			{
				motor_state = L0;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 d7 08 	sts	0x08D7, r24
				direction = 1;
     948:	80 93 d6 08 	sts	0x08D6, r24
     94c:	26 c1       	rjmp	.+588    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(motor_engage && !locked)
			{
				motor_state = L7;
     94e:	88 e0       	ldi	r24, 0x08	; 8
     950:	80 93 d7 08 	sts	0x08D7, r24
				direction = 2;
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	80 93 d6 08 	sts	0x08D6, r24
     95a:	1f c1       	rjmp	.+574    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else
				break;
			break;
		case L0:
			if(motor_cnt == one_eighty)
     95c:	20 91 d0 08 	lds	r18, 0x08D0
     960:	30 91 d1 08 	lds	r19, 0x08D1
     964:	80 91 dd 08 	lds	r24, 0x08DD
     968:	90 91 de 08 	lds	r25, 0x08DE
     96c:	28 17       	cp	r18, r24
     96e:	39 07       	cpc	r19, r25
     970:	69 f4       	brne	.+26     	; 0x98c <Motor_Tick+0x94>
			{
				motor_state = motor_init;
     972:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     976:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 91 d6 08 	lds	r25, 0x08D6
     980:	91 30       	cpi	r25, 0x01	; 1
     982:	09 f4       	brne	.+2      	; 0x986 <Motor_Tick+0x8e>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	80 93 da 08 	sts	0x08DA, r24
     98a:	07 c1       	rjmp	.+526    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     98c:	80 91 d6 08 	lds	r24, 0x08D6
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	21 f4       	brne	.+8      	; 0x99c <Motor_Tick+0xa4>
				motor_state = L1;
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	80 93 d7 08 	sts	0x08D7, r24
     99a:	2d c1       	rjmp	.+602    	; 0xbf6 <Motor_Tick+0x2fe>
			else
				motor_state = L7;
     99c:	88 e0       	ldi	r24, 0x08	; 8
     99e:	80 93 d7 08 	sts	0x08D7, r24
     9a2:	7d c1       	rjmp	.+762    	; 0xc9e <Motor_Tick+0x3a6>
			break;
		case L1:
			if(motor_cnt == one_eighty)
     9a4:	20 91 d0 08 	lds	r18, 0x08D0
     9a8:	30 91 d1 08 	lds	r19, 0x08D1
     9ac:	80 91 dd 08 	lds	r24, 0x08DD
     9b0:	90 91 de 08 	lds	r25, 0x08DE
     9b4:	28 17       	cp	r18, r24
     9b6:	39 07       	cpc	r19, r25
     9b8:	69 f4       	brne	.+26     	; 0x9d4 <Motor_Tick+0xdc>
			{
				motor_state = motor_init;
     9ba:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     9be:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 91 d6 08 	lds	r25, 0x08D6
     9c8:	91 30       	cpi	r25, 0x01	; 1
     9ca:	09 f4       	brne	.+2      	; 0x9ce <Motor_Tick+0xd6>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	80 93 da 08 	sts	0x08DA, r24
     9d2:	e3 c0       	rjmp	.+454    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     9d4:	80 91 d6 08 	lds	r24, 0x08D6
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	21 f4       	brne	.+8      	; 0x9e4 <Motor_Tick+0xec>
				motor_state = L2;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	80 93 d7 08 	sts	0x08D7, r24
     9e2:	17 c1       	rjmp	.+558    	; 0xc12 <Motor_Tick+0x31a>
			else
				motor_state = L0;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 d7 08 	sts	0x08D7, r24
     9ea:	f7 c0       	rjmp	.+494    	; 0xbda <Motor_Tick+0x2e2>
			break;
		case L2:
			if(motor_cnt == one_eighty)
     9ec:	20 91 d0 08 	lds	r18, 0x08D0
     9f0:	30 91 d1 08 	lds	r19, 0x08D1
     9f4:	80 91 dd 08 	lds	r24, 0x08DD
     9f8:	90 91 de 08 	lds	r25, 0x08DE
     9fc:	28 17       	cp	r18, r24
     9fe:	39 07       	cpc	r19, r25
     a00:	69 f4       	brne	.+26     	; 0xa1c <Motor_Tick+0x124>
			{
				motor_state = motor_init;
     a02:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     a06:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 91 d6 08 	lds	r25, 0x08D6
     a10:	91 30       	cpi	r25, 0x01	; 1
     a12:	09 f4       	brne	.+2      	; 0xa16 <Motor_Tick+0x11e>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	80 93 da 08 	sts	0x08DA, r24
     a1a:	bf c0       	rjmp	.+382    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     a1c:	80 91 d6 08 	lds	r24, 0x08D6
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	21 f4       	brne	.+8      	; 0xa2c <Motor_Tick+0x134>
				motor_state = L3;
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	80 93 d7 08 	sts	0x08D7, r24
     a2a:	01 c1       	rjmp	.+514    	; 0xc2e <Motor_Tick+0x336>
			else
				motor_state = L1;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	80 93 d7 08 	sts	0x08D7, r24
     a32:	e1 c0       	rjmp	.+450    	; 0xbf6 <Motor_Tick+0x2fe>
			break;
		case L3:
			if(motor_cnt == one_eighty)
     a34:	20 91 d0 08 	lds	r18, 0x08D0
     a38:	30 91 d1 08 	lds	r19, 0x08D1
     a3c:	80 91 dd 08 	lds	r24, 0x08DD
     a40:	90 91 de 08 	lds	r25, 0x08DE
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	69 f4       	brne	.+26     	; 0xa64 <Motor_Tick+0x16c>
			{
				motor_state = motor_init;
     a4a:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     a4e:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 91 d6 08 	lds	r25, 0x08D6
     a58:	91 30       	cpi	r25, 0x01	; 1
     a5a:	09 f4       	brne	.+2      	; 0xa5e <Motor_Tick+0x166>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	80 93 da 08 	sts	0x08DA, r24
     a62:	9b c0       	rjmp	.+310    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     a64:	80 91 d6 08 	lds	r24, 0x08D6
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	21 f4       	brne	.+8      	; 0xa74 <Motor_Tick+0x17c>
				motor_state = L4;
     a6c:	85 e0       	ldi	r24, 0x05	; 5
     a6e:	80 93 d7 08 	sts	0x08D7, r24
     a72:	eb c0       	rjmp	.+470    	; 0xc4a <Motor_Tick+0x352>
			else
				motor_state = L2;
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	80 93 d7 08 	sts	0x08D7, r24
     a7a:	cb c0       	rjmp	.+406    	; 0xc12 <Motor_Tick+0x31a>
			break;
		case L4:
			if(motor_cnt == one_eighty)
     a7c:	20 91 d0 08 	lds	r18, 0x08D0
     a80:	30 91 d1 08 	lds	r19, 0x08D1
     a84:	80 91 dd 08 	lds	r24, 0x08DD
     a88:	90 91 de 08 	lds	r25, 0x08DE
     a8c:	28 17       	cp	r18, r24
     a8e:	39 07       	cpc	r19, r25
     a90:	69 f4       	brne	.+26     	; 0xaac <Motor_Tick+0x1b4>
			{
				motor_state = motor_init;
     a92:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     a96:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 91 d6 08 	lds	r25, 0x08D6
     aa0:	91 30       	cpi	r25, 0x01	; 1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <Motor_Tick+0x1ae>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	80 93 da 08 	sts	0x08DA, r24
     aaa:	77 c0       	rjmp	.+238    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     aac:	80 91 d6 08 	lds	r24, 0x08D6
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	21 f4       	brne	.+8      	; 0xabc <Motor_Tick+0x1c4>
				motor_state = L5;
     ab4:	86 e0       	ldi	r24, 0x06	; 6
     ab6:	80 93 d7 08 	sts	0x08D7, r24
     aba:	d5 c0       	rjmp	.+426    	; 0xc66 <Motor_Tick+0x36e>
			else
				motor_state = L3;
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	80 93 d7 08 	sts	0x08D7, r24
     ac2:	b5 c0       	rjmp	.+362    	; 0xc2e <Motor_Tick+0x336>
			break;
		case L5:
			if(motor_cnt == one_eighty)
     ac4:	20 91 d0 08 	lds	r18, 0x08D0
     ac8:	30 91 d1 08 	lds	r19, 0x08D1
     acc:	80 91 dd 08 	lds	r24, 0x08DD
     ad0:	90 91 de 08 	lds	r25, 0x08DE
     ad4:	28 17       	cp	r18, r24
     ad6:	39 07       	cpc	r19, r25
     ad8:	69 f4       	brne	.+26     	; 0xaf4 <Motor_Tick+0x1fc>
			{
				motor_state = motor_init;
     ada:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     ade:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 91 d6 08 	lds	r25, 0x08D6
     ae8:	91 30       	cpi	r25, 0x01	; 1
     aea:	09 f4       	brne	.+2      	; 0xaee <Motor_Tick+0x1f6>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	80 93 da 08 	sts	0x08DA, r24
     af2:	53 c0       	rjmp	.+166    	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     af4:	80 91 d6 08 	lds	r24, 0x08D6
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	21 f4       	brne	.+8      	; 0xb04 <Motor_Tick+0x20c>
				motor_state = L6;
     afc:	87 e0       	ldi	r24, 0x07	; 7
     afe:	80 93 d7 08 	sts	0x08D7, r24
     b02:	bf c0       	rjmp	.+382    	; 0xc82 <Motor_Tick+0x38a>
			else
				motor_state = L4;
     b04:	85 e0       	ldi	r24, 0x05	; 5
     b06:	80 93 d7 08 	sts	0x08D7, r24
     b0a:	9f c0       	rjmp	.+318    	; 0xc4a <Motor_Tick+0x352>
			break;
		case L6:
			if(motor_cnt == one_eighty)
     b0c:	20 91 d0 08 	lds	r18, 0x08D0
     b10:	30 91 d1 08 	lds	r19, 0x08D1
     b14:	80 91 dd 08 	lds	r24, 0x08DD
     b18:	90 91 de 08 	lds	r25, 0x08DE
     b1c:	28 17       	cp	r18, r24
     b1e:	39 07       	cpc	r19, r25
     b20:	69 f4       	brne	.+26     	; 0xb3c <Motor_Tick+0x244>
			{
				motor_state = motor_init;
     b22:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     b26:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 91 d6 08 	lds	r25, 0x08D6
     b30:	91 30       	cpi	r25, 0x01	; 1
     b32:	09 f4       	brne	.+2      	; 0xb36 <Motor_Tick+0x23e>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	80 93 da 08 	sts	0x08DA, r24
     b3a:	2f c0       	rjmp	.+94     	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     b3c:	80 91 d6 08 	lds	r24, 0x08D6
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	21 f4       	brne	.+8      	; 0xb4c <Motor_Tick+0x254>
				motor_state = L7;
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	80 93 d7 08 	sts	0x08D7, r24
     b4a:	a9 c0       	rjmp	.+338    	; 0xc9e <Motor_Tick+0x3a6>
			else
				motor_state = L5;
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	80 93 d7 08 	sts	0x08D7, r24
     b52:	89 c0       	rjmp	.+274    	; 0xc66 <Motor_Tick+0x36e>
			break;
		case L7:
			if(motor_cnt == one_eighty)
     b54:	20 91 d0 08 	lds	r18, 0x08D0
     b58:	30 91 d1 08 	lds	r19, 0x08D1
     b5c:	80 91 dd 08 	lds	r24, 0x08DD
     b60:	90 91 de 08 	lds	r25, 0x08DE
     b64:	28 17       	cp	r18, r24
     b66:	39 07       	cpc	r19, r25
     b68:	69 f4       	brne	.+26     	; 0xb84 <Motor_Tick+0x28c>
			{
				motor_state = motor_init;
     b6a:	10 92 d7 08 	sts	0x08D7, r1
				motor_engage = false;
     b6e:	10 92 e1 08 	sts	0x08E1, r1
				locked = (direction == 1) ? false : true;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 91 d6 08 	lds	r25, 0x08D6
     b78:	91 30       	cpi	r25, 0x01	; 1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <Motor_Tick+0x286>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	80 93 da 08 	sts	0x08DA, r24
     b82:	0b c0       	rjmp	.+22     	; 0xb9a <Motor_Tick+0x2a2>
			}
			else if(direction == 1)
     b84:	80 91 d6 08 	lds	r24, 0x08D6
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <Motor_Tick+0x29a>
				motor_state = L0;
     b8c:	80 93 d7 08 	sts	0x08D7, r24
     b90:	24 c0       	rjmp	.+72     	; 0xbda <Motor_Tick+0x2e2>
			else
				motor_state = L6;
     b92:	87 e0       	ldi	r24, 0x07	; 7
     b94:	80 93 d7 08 	sts	0x08D7, r24
     b98:	74 c0       	rjmp	.+232    	; 0xc82 <Motor_Tick+0x38a>
			break;
	}
	// Actions (Phases are left-shifted two bits to 
	//          accomodate LCD output of A0, A1)
	switch(motor_state)
     b9a:	80 91 d7 08 	lds	r24, 0x08D7
     b9e:	84 30       	cpi	r24, 0x04	; 4
     ba0:	09 f4       	brne	.+2      	; 0xba4 <Motor_Tick+0x2ac>
     ba2:	45 c0       	rjmp	.+138    	; 0xc2e <Motor_Tick+0x336>
     ba4:	48 f4       	brcc	.+18     	; 0xbb8 <Motor_Tick+0x2c0>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	c1 f0       	breq	.+48     	; 0xbda <Motor_Tick+0x2e2>
     baa:	90 f0       	brcs	.+36     	; 0xbd0 <Motor_Tick+0x2d8>
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	19 f1       	breq	.+70     	; 0xbf6 <Motor_Tick+0x2fe>
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <Motor_Tick+0x2be>
     bb4:	81 c0       	rjmp	.+258    	; 0xcb8 <Motor_Tick+0x3c0>
     bb6:	2d c0       	rjmp	.+90     	; 0xc12 <Motor_Tick+0x31a>
     bb8:	86 30       	cpi	r24, 0x06	; 6
     bba:	09 f4       	brne	.+2      	; 0xbbe <Motor_Tick+0x2c6>
     bbc:	54 c0       	rjmp	.+168    	; 0xc66 <Motor_Tick+0x36e>
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <Motor_Tick+0x2ca>
     bc0:	44 c0       	rjmp	.+136    	; 0xc4a <Motor_Tick+0x352>
     bc2:	87 30       	cpi	r24, 0x07	; 7
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <Motor_Tick+0x2d0>
     bc6:	5d c0       	rjmp	.+186    	; 0xc82 <Motor_Tick+0x38a>
     bc8:	88 30       	cpi	r24, 0x08	; 8
     bca:	09 f0       	breq	.+2      	; 0xbce <Motor_Tick+0x2d6>
     bcc:	75 c0       	rjmp	.+234    	; 0xcb8 <Motor_Tick+0x3c0>
     bce:	67 c0       	rjmp	.+206    	; 0xc9e <Motor_Tick+0x3a6>
	{
		case motor_init:
			motor_cnt = 0;
     bd0:	10 92 d1 08 	sts	0x08D1, r1
     bd4:	10 92 d0 08 	sts	0x08D0, r1
			break;
     bd8:	08 95       	ret
		case L0:
			motor_phase = 0x04;
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     be0:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     be2:	80 91 d0 08 	lds	r24, 0x08D0
     be6:	90 91 d1 08 	lds	r25, 0x08D1
     bea:	03 96       	adiw	r24, 0x03	; 3
     bec:	90 93 d1 08 	sts	0x08D1, r25
     bf0:	80 93 d0 08 	sts	0x08D0, r24
			break;
     bf4:	08 95       	ret
		case L1:
			motor_phase = 0x0C;
     bf6:	8c e0       	ldi	r24, 0x0C	; 12
     bf8:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     bfc:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     bfe:	80 91 d0 08 	lds	r24, 0x08D0
     c02:	90 91 d1 08 	lds	r25, 0x08D1
     c06:	03 96       	adiw	r24, 0x03	; 3
     c08:	90 93 d1 08 	sts	0x08D1, r25
     c0c:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c10:	08 95       	ret
		case L2:
			motor_phase = 0x08;
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c18:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c1a:	80 91 d0 08 	lds	r24, 0x08D0
     c1e:	90 91 d1 08 	lds	r25, 0x08D1
     c22:	03 96       	adiw	r24, 0x03	; 3
     c24:	90 93 d1 08 	sts	0x08D1, r25
     c28:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c2c:	08 95       	ret
		case L3:
			motor_phase = 0x18;
     c2e:	88 e1       	ldi	r24, 0x18	; 24
     c30:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c34:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c36:	80 91 d0 08 	lds	r24, 0x08D0
     c3a:	90 91 d1 08 	lds	r25, 0x08D1
     c3e:	03 96       	adiw	r24, 0x03	; 3
     c40:	90 93 d1 08 	sts	0x08D1, r25
     c44:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c48:	08 95       	ret
		case L4:
			motor_phase = 0x10;
     c4a:	80 e1       	ldi	r24, 0x10	; 16
     c4c:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c50:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c52:	80 91 d0 08 	lds	r24, 0x08D0
     c56:	90 91 d1 08 	lds	r25, 0x08D1
     c5a:	03 96       	adiw	r24, 0x03	; 3
     c5c:	90 93 d1 08 	sts	0x08D1, r25
     c60:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c64:	08 95       	ret
		case L5:
			motor_phase = 0x30;
     c66:	80 e3       	ldi	r24, 0x30	; 48
     c68:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c6c:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c6e:	80 91 d0 08 	lds	r24, 0x08D0
     c72:	90 91 d1 08 	lds	r25, 0x08D1
     c76:	03 96       	adiw	r24, 0x03	; 3
     c78:	90 93 d1 08 	sts	0x08D1, r25
     c7c:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c80:	08 95       	ret
		case L6:
			motor_phase = 0x20;
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     c88:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     c8a:	80 91 d0 08 	lds	r24, 0x08D0
     c8e:	90 91 d1 08 	lds	r25, 0x08D1
     c92:	03 96       	adiw	r24, 0x03	; 3
     c94:	90 93 d1 08 	sts	0x08D1, r25
     c98:	80 93 d0 08 	sts	0x08D0, r24
			break;
     c9c:	08 95       	ret
		case L7:
			motor_phase = 0x24;
     c9e:	84 e2       	ldi	r24, 0x24	; 36
     ca0:	80 93 df 08 	sts	0x08DF, r24
			//PORTA = PORTA | motor_phase;
			PORTA = motor_phase;
     ca4:	82 b9       	out	0x02, r24	; 2
			motor_cnt += 3;
     ca6:	80 91 d0 08 	lds	r24, 0x08D0
     caa:	90 91 d1 08 	lds	r25, 0x08D1
     cae:	03 96       	adiw	r24, 0x03	; 3
     cb0:	90 93 d1 08 	sts	0x08D1, r25
     cb4:	80 93 d0 08 	sts	0x08D0, r24
     cb8:	08 95       	ret

00000cba <temp_tick>:
}

void temp_tick()
{
	// Transitions
	switch(temp_state)
     cba:	80 91 db 08 	lds	r24, 0x08DB
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	71 f0       	breq	.+28     	; 0xcde <temp_tick+0x24>
     cc2:	28 f0       	brcs	.+10     	; 0xcce <temp_tick+0x14>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	19 f1       	breq	.+70     	; 0xd0e <temp_tick+0x54>
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	49 f5       	brne	.+82     	; 0xd1e <temp_tick+0x64>
     ccc:	24 c0       	rjmp	.+72     	; 0xd16 <temp_tick+0x5c>
	{
		case temp_init:
			if(setting_temp)
     cce:	80 91 d9 08 	lds	r24, 0x08D9
     cd2:	88 23       	and	r24, r24
     cd4:	71 f1       	breq	.+92     	; 0xd32 <temp_tick+0x78>
				temp_state = read_btn;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 db 08 	sts	0x08DB, r24
     cdc:	2d c0       	rjmp	.+90     	; 0xd38 <temp_tick+0x7e>
			break;
		case read_btn:
			if(~PINA & 0x01)
     cde:	00 99       	sbic	0x00, 0	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <temp_tick+0x30>
				temp_state = temp_increase;
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	80 93 db 08 	sts	0x08DB, r24
     ce8:	44 c0       	rjmp	.+136    	; 0xd72 <temp_tick+0xb8>
			else if(~PINA & 0x02)
     cea:	01 99       	sbic	0x00, 1	; 0
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <temp_tick+0x3c>
				temp_state = temp_decrease;
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	80 93 db 08 	sts	0x08DB, r24
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <temp_tick+0xc4>
			else if(GetKeypadKey() == '#')
     cf6:	cd da       	rcall	.-2662   	; 0x292 <GetKeypadKey>
     cf8:	83 32       	cpi	r24, 0x23	; 35
     cfa:	89 f4       	brne	.+34     	; 0xd1e <temp_tick+0x64>
			{
				LCD_DisplayString(1, new_temp_received);
     cfc:	60 91 2f 01 	lds	r22, 0x012F
     d00:	70 91 30 01 	lds	r23, 0x0130
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	99 db       	rcall	.-2254   	; 0x43a <LCD_DisplayString>
				temp_state = temp_init;
     d08:	10 92 db 08 	sts	0x08DB, r1
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <temp_tick+0x78>
			}
			else
				break;
			break;
		case temp_increase:
			temp_state = read_btn;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 db 08 	sts	0x08DB, r24
			break;
     d14:	11 c0       	rjmp	.+34     	; 0xd38 <temp_tick+0x7e>
		case temp_decrease:
			temp_state = read_btn;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 db 08 	sts	0x08DB, r24
			break;
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <temp_tick+0x7e>
		default:
			break;
	}

	// State Actions
	switch(temp_state)
     d1e:	80 91 db 08 	lds	r24, 0x08DB
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	49 f0       	breq	.+18     	; 0xd38 <temp_tick+0x7e>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <temp_tick+0x78>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	19 f1       	breq	.+70     	; 0xd72 <temp_tick+0xb8>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	61 f5       	brne	.+88     	; 0xd88 <temp_tick+0xce>
     d30:	26 c0       	rjmp	.+76     	; 0xd7e <temp_tick+0xc4>
	{
		case temp_init:
			setting_temp = false;
     d32:	10 92 d9 08 	sts	0x08D9, r1
			break;
     d36:	08 95       	ret
		case read_btn:
			snprintf(buffer, sizeof(buffer), "%d", new_temp);
     d38:	80 91 26 01 	lds	r24, 0x0126
     d3c:	1f 92       	push	r1
     d3e:	8f 93       	push	r24
     d40:	8d e4       	ldi	r24, 0x4D	; 77
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	9f 93       	push	r25
     d46:	8f 93       	push	r24
     d48:	1f 92       	push	r1
     d4a:	81 e2       	ldi	r24, 0x21	; 33
     d4c:	8f 93       	push	r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	9f 93       	push	r25
     d54:	8f 93       	push	r24
     d56:	23 d6       	rcall	.+3142   	; 0x199e <snprintf>
			LCD_DisplayString(1, buffer);
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	71 e0       	ldi	r23, 0x01	; 1
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	6d db       	rcall	.-2342   	; 0x43a <LCD_DisplayString>
			break;
     d60:	8d b7       	in	r24, 0x3d	; 61
     d62:	9e b7       	in	r25, 0x3e	; 62
     d64:	08 96       	adiw	r24, 0x08	; 8
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	9e bf       	out	0x3e, r25	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	8d bf       	out	0x3d, r24	; 61
     d70:	08 95       	ret
		case temp_increase:
			new_temp += 1;
     d72:	80 91 26 01 	lds	r24, 0x0126
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 26 01 	sts	0x0126, r24
			break;
     d7c:	08 95       	ret
		case temp_decrease:
			new_temp -= 1;
     d7e:	80 91 26 01 	lds	r24, 0x0126
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	80 93 26 01 	sts	0x0126, r24
     d88:	08 95       	ret

00000d8a <send_tick>:
}

void send_tick ()
{
	// Actions
	switch(send_state)
     d8a:	80 91 d8 08 	lds	r24, 0x08D8
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	21 f4       	brne	.+8      	; 0xd9a <send_tick+0x10>
	{
		case send_init:
			break;
		case send:
			USART_Send(new_temp, 0);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	80 91 26 01 	lds	r24, 0x0126
     d98:	a7 db       	rcall	.-2226   	; 0x4e8 <USART_Send>
		default:
			break;
	}

	// Transitions
	switch(send_state)
     d9a:	80 91 d8 08 	lds	r24, 0x08D8
     d9e:	88 23       	and	r24, r24
     da0:	19 f0       	breq	.+6      	; 0xda8 <send_tick+0x1e>
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	c1 f4       	brne	.+48     	; 0xdd6 <send_tick+0x4c>
     da6:	0f c0       	rjmp	.+30     	; 0xdc6 <send_tick+0x3c>
	{
		case send_init:
			if (USART_IsSendReady(0) && send_byte)
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	80 db       	rcall	.-2304   	; 0x4ac <USART_IsSendReady>
     dac:	88 23       	and	r24, r24
     dae:	41 f0       	breq	.+16     	; 0xdc0 <send_tick+0x36>
     db0:	80 91 d2 08 	lds	r24, 0x08D2
     db4:	88 23       	and	r24, r24
     db6:	21 f0       	breq	.+8      	; 0xdc0 <send_tick+0x36>
				send_state = send;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 d8 08 	sts	0x08D8, r24
     dbe:	08 95       	ret
			else 
				send_state = send_init;
     dc0:	10 92 d8 08 	sts	0x08D8, r1
     dc4:	08 95       	ret
			break;
		case send:
			while(!USART_HasTransmitted(0)){}
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	7b db       	rcall	.-2314   	; 0x4c0 <USART_HasTransmitted>
     dca:	88 23       	and	r24, r24
     dcc:	e1 f3       	breq	.-8      	; 0xdc6 <send_tick+0x3c>
			send_state = send_init;
     dce:	10 92 d8 08 	sts	0x08D8, r1
			send_byte = false;
     dd2:	10 92 d2 08 	sts	0x08D2, r1
     dd6:	08 95       	ret

00000dd8 <SendTask>:
	}
}

void SendTask() 
{
	send_state = send_init;
     dd8:	10 92 d8 08 	sts	0x08D8, r1
	send_byte = false;
     ddc:	10 92 d2 08 	sts	0x08D2, r1
	initUSART(0);
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	42 db       	rcall	.-2428   	; 0x468 <initUSART>
	for ( ; ; ) 
	{
		send_tick();
     de4:	d2 df       	rcall	.-92     	; 0xd8a <send_tick>
		vTaskDelay(300);
     de6:	8c e2       	ldi	r24, 0x2C	; 44
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	4a d5       	rcall	.+2708   	; 0x1880 <vTaskDelay>
     dec:	fb cf       	rjmp	.-10     	; 0xde4 <SendTask+0xc>

00000dee <receive_SM>:
}

void receive_SM()
{
	// SM Transitions
	switch(rec_state)
     dee:	80 91 d4 08 	lds	r24, 0x08D4
     df2:	88 23       	and	r24, r24
     df4:	19 f0       	breq	.+6      	; 0xdfc <receive_SM+0xe>
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	79 f4       	brne	.+30     	; 0xe18 <receive_SM+0x2a>
     dfa:	0b c0       	rjmp	.+22     	; 0xe12 <receive_SM+0x24>
	{
		case rec_init:
			if (USART_HasReceived(0)) {rec_state = receive;}
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	6a db       	rcall	.-2348   	; 0x4d4 <USART_HasReceived>
     e00:	88 23       	and	r24, r24
     e02:	21 f0       	breq	.+8      	; 0xe0c <receive_SM+0x1e>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 d4 08 	sts	0x08D4, r24
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <receive_SM+0x2e>
			else rec_state = rec_init;
     e0c:	10 92 d4 08 	sts	0x08D4, r1
     e10:	08 95       	ret
			break;
		case receive:
			rec_state = rec_init;
     e12:	10 92 d4 08 	sts	0x08D4, r1
			break;
     e16:	08 95       	ret
		default:
			break;
	}
	
	// SM Actions
	switch(rec_state)
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	21 f4       	brne	.+8      	; 0xe24 <receive_SM+0x36>
	{
		case rec_init:
			break;
		case receive:
			fan = USART_Receive(0);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	76 db       	rcall	.-2324   	; 0x50c <USART_Receive>
     e20:	80 93 d5 08 	sts	0x08D5, r24
     e24:	08 95       	ret

00000e26 <RecTask>:
	}
}

void RecTask() 
{
	rec_state = rec_init;
     e26:	10 92 d4 08 	sts	0x08D4, r1
	fan = 0;
     e2a:	10 92 d5 08 	sts	0x08D5, r1
	initUSART(0);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	1b db       	rcall	.-2506   	; 0x468 <initUSART>
	for (;;) 
	{
		receive_SM();
     e32:	dd df       	rcall	.-70     	; 0xdee <receive_SM>
		vTaskDelay(100);
     e34:	84 e6       	ldi	r24, 0x64	; 100
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	23 d5       	rcall	.+2630   	; 0x1880 <vTaskDelay>
     e3a:	fb cf       	rjmp	.-10     	; 0xe32 <RecTask+0xc>

00000e3c <key_Init>:
}

// Task inits
void key_Init()
{
	key_state = INITK;
     e3c:	10 92 e2 08 	sts	0x08E2, r1
	choice = NULL;
     e40:	10 92 dc 08 	sts	0x08DC, r1
     e44:	08 95       	ret

00000e46 <KeyTask>:
	}
}

void KeyTask() 
{
	key_Init();
     e46:	fa df       	rcall	.-12     	; 0xe3c <key_Init>
	for(;;)
	{
		Key_Tick();
     e48:	29 dc       	rcall	.-1966   	; 0x69c <Key_Tick>
		vTaskDelay(100);
     e4a:	84 e6       	ldi	r24, 0x64	; 100
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	18 d5       	rcall	.+2608   	; 0x1880 <vTaskDelay>
     e50:	fb cf       	rjmp	.-10     	; 0xe48 <KeyTask+0x2>

00000e52 <motor_Init>:
	choice = NULL;
}

void motor_Init()
{
	motor_state = motor_init;
     e52:	10 92 d7 08 	sts	0x08D7, r1
	motor_phase = 0x00;
     e56:	10 92 df 08 	sts	0x08DF, r1
	one_eighty = 3072;
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	9c e0       	ldi	r25, 0x0C	; 12
     e5e:	90 93 de 08 	sts	0x08DE, r25
     e62:	80 93 dd 08 	sts	0x08DD, r24
	direction = 0;
     e66:	10 92 d6 08 	sts	0x08D6, r1
	motor_cnt = 0;
     e6a:	10 92 d1 08 	sts	0x08D1, r1
     e6e:	10 92 d0 08 	sts	0x08D0, r1
     e72:	08 95       	ret

00000e74 <MotorTask>:
}

// Tasks
void MotorTask()
{
	motor_Init();
     e74:	ee df       	rcall	.-36     	; 0xe52 <motor_Init>
	for(;;)
	{
		Motor_Tick();
     e76:	40 dd       	rcall	.-1408   	; 0x8f8 <Motor_Tick>
		vTaskDelay(3);
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	01 d5       	rcall	.+2562   	; 0x1880 <vTaskDelay>
     e7e:	fb cf       	rjmp	.-10     	; 0xe76 <MotorTask+0x2>

00000e80 <LCD_task_init>:
	motor_cnt = 0;
}

void LCD_task_init()
{
	locked = true;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 da 08 	sts	0x08DA, r24
	page = 1;
     e86:	80 93 e0 08 	sts	0x08E0, r24
	lcd_state = LCDinit;
     e8a:	10 92 d3 08 	sts	0x08D3, r1
     e8e:	08 95       	ret

00000e90 <LCDTask>:
	}
}

void LCDTask()
{
	LCD_task_init();
     e90:	f7 df       	rcall	.-18     	; 0xe80 <LCD_task_init>
	LCD_init();
     e92:	b7 da       	rcall	.-2706   	; 0x402 <LCD_init>
	LCD_DisplayString(1, s);
     e94:	60 91 43 01 	lds	r22, 0x0143
     e98:	70 91 44 01 	lds	r23, 0x0144
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	cd da       	rcall	.-2662   	; 0x43a <LCD_DisplayString>
	delay_ms(3000);
     ea0:	88 eb       	ldi	r24, 0xB8	; 184
     ea2:	9b e0       	ldi	r25, 0x0B	; 11
     ea4:	90 da       	rcall	.-2784   	; 0x3c6 <delay_ms>
	for(;;) 
	{
		LCD_tick();
     ea6:	4f dc       	rcall	.-1890   	; 0x746 <LCD_tick>
		vTaskDelay(500);
     ea8:	84 ef       	ldi	r24, 0xF4	; 244
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	e9 d4       	rcall	.+2514   	; 0x1880 <vTaskDelay>
     eae:	fb cf       	rjmp	.-10     	; 0xea6 <LCDTask+0x16>

00000eb0 <temp_Init>:
	lcd_state = LCDinit;
}

void temp_Init()
{
	temp_state = temp_init;
     eb0:	10 92 db 08 	sts	0x08DB, r1
	setting_temp = false;
     eb4:	10 92 d9 08 	sts	0x08D9, r1
     eb8:	08 95       	ret

00000eba <TempTask>:
	}
}

void TempTask()
{
	temp_Init();
     eba:	fa df       	rcall	.-12     	; 0xeb0 <temp_Init>
	for(;;)
	{
		temp_tick();
     ebc:	fe de       	rcall	.-516    	; 0xcba <temp_tick>
		vTaskDelay(300);
     ebe:	8c e2       	ldi	r24, 0x2C	; 44
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	de d4       	rcall	.+2492   	; 0x1880 <vTaskDelay>
     ec4:	fb cf       	rjmp	.-10     	; 0xebc <TempTask+0x2>

00000ec6 <StartSecPulse>:
	}
}

// RTOS Start
void StartSecPulse(unsigned portBASE_TYPE Priority)
{
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	cf 93       	push	r28
	xTaskCreate(KeyTask, 		(signed portCHAR *)"KeyTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     ed6:	a1 2c       	mov	r10, r1
     ed8:	b1 2c       	mov	r11, r1
     eda:	c1 2c       	mov	r12, r1
     edc:	d1 2c       	mov	r13, r1
     ede:	e1 2c       	mov	r14, r1
     ee0:	f1 2c       	mov	r15, r1
     ee2:	08 2f       	mov	r16, r24
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	45 e5       	ldi	r20, 0x55	; 85
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	60 e5       	ldi	r22, 0x50	; 80
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	83 e2       	ldi	r24, 0x23	; 35
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	01 d2       	rcall	.+1026   	; 0x12f8 <xTaskGenericCreate>
	xTaskCreate(LCDTask, 		(signed portCHAR *)"LCDTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	45 e5       	ldi	r20, 0x55	; 85
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	68 e5       	ldi	r22, 0x58	; 88
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	88 e4       	ldi	r24, 0x48	; 72
     f04:	97 e0       	ldi	r25, 0x07	; 7
     f06:	f8 d1       	rcall	.+1008   	; 0x12f8 <xTaskGenericCreate>
	xTaskCreate(MotorTask, 		(signed portCHAR *)"MotorTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	45 e5       	ldi	r20, 0x55	; 85
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	60 e6       	ldi	r22, 0x60	; 96
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	8a e3       	ldi	r24, 0x3A	; 58
     f16:	97 e0       	ldi	r25, 0x07	; 7
     f18:	ef d1       	rcall	.+990    	; 0x12f8 <xTaskGenericCreate>
	xTaskCreate(TempTask,	 	(signed portCHAR *)"TempTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	45 e5       	ldi	r20, 0x55	; 85
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	6a e6       	ldi	r22, 0x6A	; 106
     f24:	71 e0       	ldi	r23, 0x01	; 1
     f26:	8d e5       	ldi	r24, 0x5D	; 93
     f28:	97 e0       	ldi	r25, 0x07	; 7
     f2a:	e6 d1       	rcall	.+972    	; 0x12f8 <xTaskGenericCreate>
	xTaskCreate(SendTask, 		(signed portCHAR *)"SendTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	45 e5       	ldi	r20, 0x55	; 85
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	63 e7       	ldi	r22, 0x73	; 115
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	8c ee       	ldi	r24, 0xEC	; 236
     f3a:	96 e0       	ldi	r25, 0x06	; 6
     f3c:	dd d1       	rcall	.+954    	; 0x12f8 <xTaskGenericCreate>
	xTaskCreate(RecTask, 		(signed portCHAR *)"RecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	45 e5       	ldi	r20, 0x55	; 85
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	6c e7       	ldi	r22, 0x7C	; 124
     f48:	71 e0       	ldi	r23, 0x01	; 1
     f4a:	83 e1       	ldi	r24, 0x13	; 19
     f4c:	97 e0       	ldi	r25, 0x07	; 7
     f4e:	d4 d1       	rcall	.+936    	; 0x12f8 <xTaskGenericCreate>
}	
     f50:	cf 91       	pop	r28
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	bf 90       	pop	r11
     f5e:	af 90       	pop	r10
     f60:	08 95       	ret

00000f62 <main>:

int main(void) 
{
	DDRA = 0xFC; PORTA = 0x03; // Enable button on A7, A6
     f62:	8c ef       	ldi	r24, 0xFC	; 252
     f64:	81 b9       	out	0x01, r24	; 1
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	84 b9       	out	0x04, r24	; 4
     f6e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F;
     f70:	90 ef       	ldi	r25, 0xF0	; 240
     f72:	97 b9       	out	0x07, r25	; 7
     f74:	9f e0       	ldi	r25, 0x0F	; 15
     f76:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
     f78:	8a b9       	out	0x0a, r24	; 10
     f7a:	1b b8       	out	0x0b, r1	; 11

	//Start Tasks
	StartSecPulse(1);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	a3 df       	rcall	.-186    	; 0xec6 <StartSecPulse>
	//RunSchedular 
	vTaskStartScheduler(); 
     f80:	c3 d2       	rcall	.+1414   	; 0x1508 <vTaskStartScheduler>

	return 0; 
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	08 95       	ret

00000f88 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     f88:	31 e1       	ldi	r19, 0x11	; 17
     f8a:	fc 01       	movw	r30, r24
     f8c:	30 83       	st	Z, r19
     f8e:	31 97       	sbiw	r30, 0x01	; 1
     f90:	22 e2       	ldi	r18, 0x22	; 34
     f92:	20 83       	st	Z, r18
     f94:	fc 01       	movw	r30, r24
     f96:	32 97       	sbiw	r30, 0x02	; 2
     f98:	a3 e3       	ldi	r26, 0x33	; 51
     f9a:	a0 83       	st	Z, r26
     f9c:	fc 01       	movw	r30, r24
     f9e:	33 97       	sbiw	r30, 0x03	; 3
     fa0:	60 83       	st	Z, r22
     fa2:	fc 01       	movw	r30, r24
     fa4:	34 97       	sbiw	r30, 0x04	; 4
     fa6:	70 83       	st	Z, r23
     fa8:	fc 01       	movw	r30, r24
     faa:	35 97       	sbiw	r30, 0x05	; 5
     fac:	10 82       	st	Z, r1
     fae:	fc 01       	movw	r30, r24
     fb0:	36 97       	sbiw	r30, 0x06	; 6
     fb2:	60 e8       	ldi	r22, 0x80	; 128
     fb4:	60 83       	st	Z, r22
     fb6:	fc 01       	movw	r30, r24
     fb8:	37 97       	sbiw	r30, 0x07	; 7
     fba:	10 82       	st	Z, r1
     fbc:	fc 01       	movw	r30, r24
     fbe:	38 97       	sbiw	r30, 0x08	; 8
     fc0:	62 e0       	ldi	r22, 0x02	; 2
     fc2:	60 83       	st	Z, r22
     fc4:	fc 01       	movw	r30, r24
     fc6:	39 97       	sbiw	r30, 0x09	; 9
     fc8:	63 e0       	ldi	r22, 0x03	; 3
     fca:	60 83       	st	Z, r22
     fcc:	fc 01       	movw	r30, r24
     fce:	3a 97       	sbiw	r30, 0x0a	; 10
     fd0:	64 e0       	ldi	r22, 0x04	; 4
     fd2:	60 83       	st	Z, r22
     fd4:	fc 01       	movw	r30, r24
     fd6:	3b 97       	sbiw	r30, 0x0b	; 11
     fd8:	65 e0       	ldi	r22, 0x05	; 5
     fda:	60 83       	st	Z, r22
     fdc:	fc 01       	movw	r30, r24
     fde:	3c 97       	sbiw	r30, 0x0c	; 12
     fe0:	66 e0       	ldi	r22, 0x06	; 6
     fe2:	60 83       	st	Z, r22
     fe4:	fc 01       	movw	r30, r24
     fe6:	3d 97       	sbiw	r30, 0x0d	; 13
     fe8:	67 e0       	ldi	r22, 0x07	; 7
     fea:	60 83       	st	Z, r22
     fec:	fc 01       	movw	r30, r24
     fee:	3e 97       	sbiw	r30, 0x0e	; 14
     ff0:	68 e0       	ldi	r22, 0x08	; 8
     ff2:	60 83       	st	Z, r22
     ff4:	fc 01       	movw	r30, r24
     ff6:	3f 97       	sbiw	r30, 0x0f	; 15
     ff8:	69 e0       	ldi	r22, 0x09	; 9
     ffa:	60 83       	st	Z, r22
     ffc:	fc 01       	movw	r30, r24
     ffe:	70 97       	sbiw	r30, 0x10	; 16
    1000:	60 e1       	ldi	r22, 0x10	; 16
    1002:	60 83       	st	Z, r22
    1004:	fc 01       	movw	r30, r24
    1006:	71 97       	sbiw	r30, 0x11	; 17
    1008:	30 83       	st	Z, r19
    100a:	fc 01       	movw	r30, r24
    100c:	72 97       	sbiw	r30, 0x12	; 18
    100e:	32 e1       	ldi	r19, 0x12	; 18
    1010:	30 83       	st	Z, r19
    1012:	fc 01       	movw	r30, r24
    1014:	73 97       	sbiw	r30, 0x13	; 19
    1016:	33 e1       	ldi	r19, 0x13	; 19
    1018:	30 83       	st	Z, r19
    101a:	fc 01       	movw	r30, r24
    101c:	74 97       	sbiw	r30, 0x14	; 20
    101e:	34 e1       	ldi	r19, 0x14	; 20
    1020:	30 83       	st	Z, r19
    1022:	fc 01       	movw	r30, r24
    1024:	75 97       	sbiw	r30, 0x15	; 21
    1026:	35 e1       	ldi	r19, 0x15	; 21
    1028:	30 83       	st	Z, r19
    102a:	fc 01       	movw	r30, r24
    102c:	76 97       	sbiw	r30, 0x16	; 22
    102e:	36 e1       	ldi	r19, 0x16	; 22
    1030:	30 83       	st	Z, r19
    1032:	fc 01       	movw	r30, r24
    1034:	77 97       	sbiw	r30, 0x17	; 23
    1036:	37 e1       	ldi	r19, 0x17	; 23
    1038:	30 83       	st	Z, r19
    103a:	fc 01       	movw	r30, r24
    103c:	78 97       	sbiw	r30, 0x18	; 24
    103e:	38 e1       	ldi	r19, 0x18	; 24
    1040:	30 83       	st	Z, r19
    1042:	fc 01       	movw	r30, r24
    1044:	79 97       	sbiw	r30, 0x19	; 25
    1046:	39 e1       	ldi	r19, 0x19	; 25
    1048:	30 83       	st	Z, r19
    104a:	fc 01       	movw	r30, r24
    104c:	7a 97       	sbiw	r30, 0x1a	; 26
    104e:	30 e2       	ldi	r19, 0x20	; 32
    1050:	30 83       	st	Z, r19
    1052:	fc 01       	movw	r30, r24
    1054:	7b 97       	sbiw	r30, 0x1b	; 27
    1056:	31 e2       	ldi	r19, 0x21	; 33
    1058:	30 83       	st	Z, r19
    105a:	fc 01       	movw	r30, r24
    105c:	7c 97       	sbiw	r30, 0x1c	; 28
    105e:	20 83       	st	Z, r18
    1060:	fc 01       	movw	r30, r24
    1062:	7d 97       	sbiw	r30, 0x1d	; 29
    1064:	23 e2       	ldi	r18, 0x23	; 35
    1066:	20 83       	st	Z, r18
    1068:	fc 01       	movw	r30, r24
    106a:	7e 97       	sbiw	r30, 0x1e	; 30
    106c:	40 83       	st	Z, r20
    106e:	fc 01       	movw	r30, r24
    1070:	7f 97       	sbiw	r30, 0x1f	; 31
    1072:	50 83       	st	Z, r21
    1074:	fc 01       	movw	r30, r24
    1076:	b0 97       	sbiw	r30, 0x20	; 32
    1078:	26 e2       	ldi	r18, 0x26	; 38
    107a:	20 83       	st	Z, r18
    107c:	fc 01       	movw	r30, r24
    107e:	b1 97       	sbiw	r30, 0x21	; 33
    1080:	27 e2       	ldi	r18, 0x27	; 39
    1082:	20 83       	st	Z, r18
    1084:	fc 01       	movw	r30, r24
    1086:	b2 97       	sbiw	r30, 0x22	; 34
    1088:	28 e2       	ldi	r18, 0x28	; 40
    108a:	20 83       	st	Z, r18
    108c:	fc 01       	movw	r30, r24
    108e:	b3 97       	sbiw	r30, 0x23	; 35
    1090:	29 e2       	ldi	r18, 0x29	; 41
    1092:	20 83       	st	Z, r18
    1094:	fc 01       	movw	r30, r24
    1096:	b4 97       	sbiw	r30, 0x24	; 36
    1098:	20 e3       	ldi	r18, 0x30	; 48
    109a:	20 83       	st	Z, r18
    109c:	fc 01       	movw	r30, r24
    109e:	b5 97       	sbiw	r30, 0x25	; 37
    10a0:	21 e3       	ldi	r18, 0x31	; 49
    10a2:	20 83       	st	Z, r18
    10a4:	9c 01       	movw	r18, r24
    10a6:	26 52       	subi	r18, 0x26	; 38
    10a8:	31 09       	sbc	r19, r1
    10aa:	82 2f       	mov	r24, r18
    10ac:	93 2f       	mov	r25, r19
    10ae:	08 95       	ret

000010b0 <xPortStartScheduler>:
    10b0:	10 92 89 00 	sts	0x0089, r1
    10b4:	8c e7       	ldi	r24, 0x7C	; 124
    10b6:	80 93 88 00 	sts	0x0088, r24
    10ba:	8b e0       	ldi	r24, 0x0B	; 11
    10bc:	80 93 81 00 	sts	0x0081, r24
    10c0:	ef e6       	ldi	r30, 0x6F	; 111
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	80 83       	st	Z, r24
    10ca:	a0 91 84 08 	lds	r26, 0x0884
    10ce:	b0 91 85 08 	lds	r27, 0x0885
    10d2:	cd 91       	ld	r28, X+
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	dd 91       	ld	r29, X+
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	7f 91       	pop	r23
    10ec:	6f 91       	pop	r22
    10ee:	5f 91       	pop	r21
    10f0:	4f 91       	pop	r20
    10f2:	3f 91       	pop	r19
    10f4:	2f 91       	pop	r18
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	bf 90       	pop	r11
    1104:	af 90       	pop	r10
    1106:	9f 90       	pop	r9
    1108:	8f 90       	pop	r8
    110a:	7f 90       	pop	r7
    110c:	6f 90       	pop	r6
    110e:	5f 90       	pop	r5
    1110:	4f 90       	pop	r4
    1112:	3f 90       	pop	r3
    1114:	2f 90       	pop	r2
    1116:	1f 90       	pop	r1
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	08 95       	ret
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	08 95       	ret

00001124 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	0f 92       	push	r0
    112c:	1f 92       	push	r1
    112e:	11 24       	eor	r1, r1
    1130:	2f 92       	push	r2
    1132:	3f 92       	push	r3
    1134:	4f 92       	push	r4
    1136:	5f 92       	push	r5
    1138:	6f 92       	push	r6
    113a:	7f 92       	push	r7
    113c:	8f 92       	push	r8
    113e:	9f 92       	push	r9
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	2f 93       	push	r18
    1152:	3f 93       	push	r19
    1154:	4f 93       	push	r20
    1156:	5f 93       	push	r21
    1158:	6f 93       	push	r22
    115a:	7f 93       	push	r23
    115c:	8f 93       	push	r24
    115e:	9f 93       	push	r25
    1160:	af 93       	push	r26
    1162:	bf 93       	push	r27
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	a0 91 84 08 	lds	r26, 0x0884
    1170:	b0 91 85 08 	lds	r27, 0x0885
    1174:	0d b6       	in	r0, 0x3d	; 61
    1176:	0d 92       	st	X+, r0
    1178:	0e b6       	in	r0, 0x3e	; 62
    117a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    117c:	9d d3       	rcall	.+1850   	; 0x18b8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    117e:	a0 91 84 08 	lds	r26, 0x0884
    1182:	b0 91 85 08 	lds	r27, 0x0885
    1186:	cd 91       	ld	r28, X+
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	dd 91       	ld	r29, X+
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	9f 91       	pop	r25
    119c:	8f 91       	pop	r24
    119e:	7f 91       	pop	r23
    11a0:	6f 91       	pop	r22
    11a2:	5f 91       	pop	r21
    11a4:	4f 91       	pop	r20
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	7f 90       	pop	r7
    11c0:	6f 90       	pop	r6
    11c2:	5f 90       	pop	r5
    11c4:	4f 90       	pop	r4
    11c6:	3f 90       	pop	r3
    11c8:	2f 90       	pop	r2
    11ca:	1f 90       	pop	r1
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	0f 90       	pop	r0

	asm volatile ( "ret" );
    11d2:	08 95       	ret

000011d4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	0f 92       	push	r0
    11dc:	1f 92       	push	r1
    11de:	11 24       	eor	r1, r1
    11e0:	2f 92       	push	r2
    11e2:	3f 92       	push	r3
    11e4:	4f 92       	push	r4
    11e6:	5f 92       	push	r5
    11e8:	6f 92       	push	r6
    11ea:	7f 92       	push	r7
    11ec:	8f 92       	push	r8
    11ee:	9f 92       	push	r9
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	ef 93       	push	r30
    121a:	ff 93       	push	r31
    121c:	a0 91 84 08 	lds	r26, 0x0884
    1220:	b0 91 85 08 	lds	r27, 0x0885
    1224:	0d b6       	in	r0, 0x3d	; 61
    1226:	0d 92       	st	X+, r0
    1228:	0e b6       	in	r0, 0x3e	; 62
    122a:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    122c:	9c d1       	rcall	.+824    	; 0x1566 <vTaskIncrementTick>
	vTaskSwitchContext();
    122e:	44 d3       	rcall	.+1672   	; 0x18b8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1230:	a0 91 84 08 	lds	r26, 0x0884
    1234:	b0 91 85 08 	lds	r27, 0x0885
    1238:	cd 91       	ld	r28, X+
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	dd 91       	ld	r29, X+
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	bf 91       	pop	r27
    124a:	af 91       	pop	r26
    124c:	9f 91       	pop	r25
    124e:	8f 91       	pop	r24
    1250:	7f 91       	pop	r23
    1252:	6f 91       	pop	r22
    1254:	5f 91       	pop	r21
    1256:	4f 91       	pop	r20
    1258:	3f 91       	pop	r19
    125a:	2f 91       	pop	r18
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	7f 90       	pop	r7
    1272:	6f 90       	pop	r6
    1274:	5f 90       	pop	r5
    1276:	4f 90       	pop	r4
    1278:	3f 90       	pop	r3
    127a:	2f 90       	pop	r2
    127c:	1f 90       	pop	r1
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1284:	08 95       	ret

00001286 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1286:	a6 df       	rcall	.-180    	; 0x11d4 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1288:	18 95       	reti

0000128a <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
    1290:	e0 91 84 08 	lds	r30, 0x0884
    1294:	f0 91 85 08 	lds	r31, 0x0885
    1298:	93 83       	std	Z+3, r25	; 0x03
    129a:	82 83       	std	Z+2, r24	; 0x02
    129c:	80 91 7c 08 	lds	r24, 0x087C
    12a0:	90 91 7d 08 	lds	r25, 0x087D
    12a4:	c8 17       	cp	r28, r24
    12a6:	d9 07       	cpc	r29, r25
    12a8:	68 f4       	brcc	.+26     	; 0x12c4 <prvAddCurrentTaskToDelayedList+0x3a>
    12aa:	60 91 84 08 	lds	r22, 0x0884
    12ae:	70 91 85 08 	lds	r23, 0x0885
    12b2:	80 91 80 08 	lds	r24, 0x0880
    12b6:	90 91 81 08 	lds	r25, 0x0881
    12ba:	6e 5f       	subi	r22, 0xFE	; 254
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    12c2:	17 c0       	rjmp	.+46     	; 0x12f2 <prvAddCurrentTaskToDelayedList+0x68>
    12c4:	60 91 84 08 	lds	r22, 0x0884
    12c8:	70 91 85 08 	lds	r23, 0x0885
    12cc:	80 91 82 08 	lds	r24, 0x0882
    12d0:	90 91 83 08 	lds	r25, 0x0883
    12d4:	6e 5f       	subi	r22, 0xFE	; 254
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    12dc:	80 91 45 01 	lds	r24, 0x0145
    12e0:	90 91 46 01 	lds	r25, 0x0146
    12e4:	c8 17       	cp	r28, r24
    12e6:	d9 07       	cpc	r29, r25
    12e8:	20 f4       	brcc	.+8      	; 0x12f2 <prvAddCurrentTaskToDelayedList+0x68>
    12ea:	d0 93 46 01 	sts	0x0146, r29
    12ee:	c0 93 45 01 	sts	0x0145, r28
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <xTaskGenericCreate>:
    12f8:	4f 92       	push	r4
    12fa:	5f 92       	push	r5
    12fc:	6f 92       	push	r6
    12fe:	7f 92       	push	r7
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	4c 01       	movw	r8, r24
    131a:	3b 01       	movw	r6, r22
    131c:	5a 01       	movw	r10, r20
    131e:	29 01       	movw	r4, r18
    1320:	81 e2       	ldi	r24, 0x21	; 33
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    1328:	ec 01       	movw	r28, r24
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	09 f4       	brne	.+2      	; 0x1330 <xTaskGenericCreate+0x38>
    132e:	da c0       	rjmp	.+436    	; 0x14e4 <xTaskGenericCreate+0x1ec>
    1330:	c1 14       	cp	r12, r1
    1332:	d1 04       	cpc	r13, r1
    1334:	09 f0       	breq	.+2      	; 0x1338 <xTaskGenericCreate+0x40>
    1336:	d3 c0       	rjmp	.+422    	; 0x14de <xTaskGenericCreate+0x1e6>
    1338:	c5 01       	movw	r24, r10
    133a:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    133e:	6c 01       	movw	r12, r24
    1340:	98 8f       	std	Y+24, r25	; 0x18
    1342:	8f 8b       	std	Y+23, r24	; 0x17
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	21 f4       	brne	.+8      	; 0x1350 <xTaskGenericCreate+0x58>
    1348:	ce 01       	movw	r24, r28
    134a:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    134e:	ca c0       	rjmp	.+404    	; 0x14e4 <xTaskGenericCreate+0x1ec>
    1350:	a5 01       	movw	r20, r10
    1352:	65 ea       	ldi	r22, 0xA5	; 165
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	c6 01       	movw	r24, r12
    1358:	0c d3       	rcall	.+1560   	; 0x1972 <memset>
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	a8 1a       	sub	r10, r24
    135e:	b1 08       	sbc	r11, r1
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	a8 0e       	add	r10, r24
    1366:	b9 1e       	adc	r11, r25
    1368:	48 e0       	ldi	r20, 0x08	; 8
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	b3 01       	movw	r22, r6
    136e:	ce 01       	movw	r24, r28
    1370:	49 96       	adiw	r24, 0x19	; 25
    1372:	06 d3       	rcall	.+1548   	; 0x1980 <strncpy>
    1374:	18 a2       	std	Y+32, r1	; 0x20
    1376:	10 2f       	mov	r17, r16
    1378:	04 30       	cpi	r16, 0x04	; 4
    137a:	08 f0       	brcs	.+2      	; 0x137e <xTaskGenericCreate+0x86>
    137c:	13 e0       	ldi	r17, 0x03	; 3
    137e:	1e 8b       	std	Y+22, r17	; 0x16
    1380:	6e 01       	movw	r12, r28
    1382:	e2 e0       	ldi	r30, 0x02	; 2
    1384:	ce 0e       	add	r12, r30
    1386:	d1 1c       	adc	r13, r1
    1388:	c6 01       	movw	r24, r12
    138a:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    138e:	ce 01       	movw	r24, r28
    1390:	0c 96       	adiw	r24, 0x0c	; 12
    1392:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    1396:	d9 87       	std	Y+9, r29	; 0x09
    1398:	c8 87       	std	Y+8, r28	; 0x08
    139a:	84 e0       	ldi	r24, 0x04	; 4
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	81 1b       	sub	r24, r17
    13a0:	91 09       	sbc	r25, r1
    13a2:	9d 87       	std	Y+13, r25	; 0x0d
    13a4:	8c 87       	std	Y+12, r24	; 0x0c
    13a6:	db 8b       	std	Y+19, r29	; 0x13
    13a8:	ca 8b       	std	Y+18, r28	; 0x12
    13aa:	a2 01       	movw	r20, r4
    13ac:	b4 01       	movw	r22, r8
    13ae:	c5 01       	movw	r24, r10
    13b0:	eb dd       	rcall	.-1066   	; 0xf88 <pxPortInitialiseStack>
    13b2:	99 83       	std	Y+1, r25	; 0x01
    13b4:	88 83       	st	Y, r24
    13b6:	e1 14       	cp	r14, r1
    13b8:	f1 04       	cpc	r15, r1
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <xTaskGenericCreate+0xca>
    13bc:	f7 01       	movw	r30, r14
    13be:	d1 83       	std	Z+1, r29	; 0x01
    13c0:	c0 83       	st	Z, r28
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	0f 92       	push	r0
    13c8:	80 91 7e 08 	lds	r24, 0x087E
    13cc:	8f 5f       	subi	r24, 0xFF	; 255
    13ce:	80 93 7e 08 	sts	0x087E, r24
    13d2:	80 91 84 08 	lds	r24, 0x0884
    13d6:	90 91 85 08 	lds	r25, 0x0885
    13da:	89 2b       	or	r24, r25
    13dc:	e1 f5       	brne	.+120    	; 0x1456 <xTaskGenericCreate+0x15e>
    13de:	d0 93 85 08 	sts	0x0885, r29
    13e2:	c0 93 84 08 	sts	0x0884, r28
    13e6:	80 91 7e 08 	lds	r24, 0x087E
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <xTaskGenericCreate+0xf8>
    13ee:	42 c0       	rjmp	.+132    	; 0x1474 <xTaskGenericCreate+0x17c>
    13f0:	e1 2c       	mov	r14, r1
    13f2:	f1 2c       	mov	r15, r1
    13f4:	c7 01       	movw	r24, r14
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	8e 0d       	add	r24, r14
    1404:	9f 1d       	adc	r25, r15
    1406:	88 57       	subi	r24, 0x78	; 120
    1408:	97 4f       	sbci	r25, 0xF7	; 247
    140a:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    140e:	ff ef       	ldi	r31, 0xFF	; 255
    1410:	ef 1a       	sub	r14, r31
    1412:	ff 0a       	sbc	r15, r31
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	e8 16       	cp	r14, r24
    1418:	f1 04       	cpc	r15, r1
    141a:	61 f7       	brne	.-40     	; 0x13f4 <xTaskGenericCreate+0xfc>
    141c:	8c ea       	ldi	r24, 0xAC	; 172
    141e:	98 e0       	ldi	r25, 0x08	; 8
    1420:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1424:	85 eb       	ldi	r24, 0xB5	; 181
    1426:	98 e0       	ldi	r25, 0x08	; 8
    1428:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    142c:	8e eb       	ldi	r24, 0xBE	; 190
    142e:	98 e0       	ldi	r25, 0x08	; 8
    1430:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1434:	87 ec       	ldi	r24, 0xC7	; 199
    1436:	98 e0       	ldi	r25, 0x08	; 8
    1438:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    143c:	8c ea       	ldi	r24, 0xAC	; 172
    143e:	98 e0       	ldi	r25, 0x08	; 8
    1440:	90 93 83 08 	sts	0x0883, r25
    1444:	80 93 82 08 	sts	0x0882, r24
    1448:	85 eb       	ldi	r24, 0xB5	; 181
    144a:	98 e0       	ldi	r25, 0x08	; 8
    144c:	90 93 81 08 	sts	0x0881, r25
    1450:	80 93 80 08 	sts	0x0880, r24
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <xTaskGenericCreate+0x17c>
    1456:	80 91 7a 08 	lds	r24, 0x087A
    145a:	81 11       	cpse	r24, r1
    145c:	0b c0       	rjmp	.+22     	; 0x1474 <xTaskGenericCreate+0x17c>
    145e:	e0 91 84 08 	lds	r30, 0x0884
    1462:	f0 91 85 08 	lds	r31, 0x0885
    1466:	86 89       	ldd	r24, Z+22	; 0x16
    1468:	08 17       	cp	r16, r24
    146a:	20 f0       	brcs	.+8      	; 0x1474 <xTaskGenericCreate+0x17c>
    146c:	d0 93 85 08 	sts	0x0885, r29
    1470:	c0 93 84 08 	sts	0x0884, r28
    1474:	8e 89       	ldd	r24, Y+22	; 0x16
    1476:	90 91 86 08 	lds	r25, 0x0886
    147a:	98 17       	cp	r25, r24
    147c:	10 f4       	brcc	.+4      	; 0x1482 <xTaskGenericCreate+0x18a>
    147e:	80 93 86 08 	sts	0x0886, r24
    1482:	90 91 87 08 	lds	r25, 0x0887
    1486:	9f 5f       	subi	r25, 0xFF	; 255
    1488:	90 93 87 08 	sts	0x0887, r25
    148c:	90 91 7b 08 	lds	r25, 0x087B
    1490:	98 17       	cp	r25, r24
    1492:	10 f4       	brcc	.+4      	; 0x1498 <xTaskGenericCreate+0x1a0>
    1494:	80 93 7b 08 	sts	0x087B, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9c 01       	movw	r18, r24
    149c:	22 0f       	add	r18, r18
    149e:	33 1f       	adc	r19, r19
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	22 0f       	add	r18, r18
    14a6:	33 1f       	adc	r19, r19
    14a8:	82 0f       	add	r24, r18
    14aa:	93 1f       	adc	r25, r19
    14ac:	b6 01       	movw	r22, r12
    14ae:	88 57       	subi	r24, 0x78	; 120
    14b0:	97 4f       	sbci	r25, 0xF7	; 247
    14b2:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	80 91 7a 08 	lds	r24, 0x087A
    14be:	88 23       	and	r24, r24
    14c0:	51 f0       	breq	.+20     	; 0x14d6 <xTaskGenericCreate+0x1de>
    14c2:	e0 91 84 08 	lds	r30, 0x0884
    14c6:	f0 91 85 08 	lds	r31, 0x0885
    14ca:	86 89       	ldd	r24, Z+22	; 0x16
    14cc:	80 17       	cp	r24, r16
    14ce:	28 f4       	brcc	.+10     	; 0x14da <xTaskGenericCreate+0x1e2>
    14d0:	29 de       	rcall	.-942    	; 0x1124 <vPortYield>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <xTaskGenericCreate+0x1ee>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <xTaskGenericCreate+0x1ee>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <xTaskGenericCreate+0x1ee>
    14de:	d8 8e       	std	Y+24, r13	; 0x18
    14e0:	cf 8a       	std	Y+23, r12	; 0x17
    14e2:	36 cf       	rjmp	.-404    	; 0x1350 <xTaskGenericCreate+0x58>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	7f 90       	pop	r7
    1500:	6f 90       	pop	r6
    1502:	5f 90       	pop	r5
    1504:	4f 90       	pop	r4
    1506:	08 95       	ret

00001508 <vTaskStartScheduler>:
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	a1 2c       	mov	r10, r1
    1518:	b1 2c       	mov	r11, r1
    151a:	c1 2c       	mov	r12, r1
    151c:	d1 2c       	mov	r13, r1
    151e:	e1 2c       	mov	r14, r1
    1520:	f1 2c       	mov	r15, r1
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	45 e5       	ldi	r20, 0x55	; 85
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	62 e9       	ldi	r22, 0x92	; 146
    152e:	72 e0       	ldi	r23, 0x02	; 2
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	9c e0       	ldi	r25, 0x0C	; 12
    1534:	e1 de       	rcall	.-574    	; 0x12f8 <xTaskGenericCreate>
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	41 f4       	brne	.+16     	; 0x154a <vTaskStartScheduler+0x42>
    153a:	f8 94       	cli
    153c:	80 93 7a 08 	sts	0x087A, r24
    1540:	10 92 7d 08 	sts	0x087D, r1
    1544:	10 92 7c 08 	sts	0x087C, r1
    1548:	b3 dd       	rcall	.-1178   	; 0x10b0 <xPortStartScheduler>
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	08 95       	ret

0000155a <vTaskSuspendAll>:
    155a:	80 91 79 08 	lds	r24, 0x0879
    155e:	8f 5f       	subi	r24, 0xFF	; 255
    1560:	80 93 79 08 	sts	0x0879, r24
    1564:	08 95       	ret

00001566 <vTaskIncrementTick>:
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	80 91 79 08 	lds	r24, 0x0879
    1572:	81 11       	cpse	r24, r1
    1574:	b2 c0       	rjmp	.+356    	; 0x16da <vTaskIncrementTick+0x174>
    1576:	80 91 7c 08 	lds	r24, 0x087C
    157a:	90 91 7d 08 	lds	r25, 0x087D
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	90 93 7d 08 	sts	0x087D, r25
    1584:	80 93 7c 08 	sts	0x087C, r24
    1588:	80 91 7c 08 	lds	r24, 0x087C
    158c:	90 91 7d 08 	lds	r25, 0x087D
    1590:	89 2b       	or	r24, r25
    1592:	99 f5       	brne	.+102    	; 0x15fa <vTaskIncrementTick+0x94>
    1594:	80 91 82 08 	lds	r24, 0x0882
    1598:	90 91 83 08 	lds	r25, 0x0883
    159c:	20 91 80 08 	lds	r18, 0x0880
    15a0:	30 91 81 08 	lds	r19, 0x0881
    15a4:	30 93 83 08 	sts	0x0883, r19
    15a8:	20 93 82 08 	sts	0x0882, r18
    15ac:	90 93 81 08 	sts	0x0881, r25
    15b0:	80 93 80 08 	sts	0x0880, r24
    15b4:	80 91 76 08 	lds	r24, 0x0876
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 76 08 	sts	0x0876, r24
    15be:	e0 91 82 08 	lds	r30, 0x0882
    15c2:	f0 91 83 08 	lds	r31, 0x0883
    15c6:	80 81       	ld	r24, Z
    15c8:	81 11       	cpse	r24, r1
    15ca:	07 c0       	rjmp	.+14     	; 0x15da <vTaskIncrementTick+0x74>
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	9f ef       	ldi	r25, 0xFF	; 255
    15d0:	90 93 46 01 	sts	0x0146, r25
    15d4:	80 93 45 01 	sts	0x0145, r24
    15d8:	10 c0       	rjmp	.+32     	; 0x15fa <vTaskIncrementTick+0x94>
    15da:	e0 91 82 08 	lds	r30, 0x0882
    15de:	f0 91 83 08 	lds	r31, 0x0883
    15e2:	05 80       	ldd	r0, Z+5	; 0x05
    15e4:	f6 81       	ldd	r31, Z+6	; 0x06
    15e6:	e0 2d       	mov	r30, r0
    15e8:	06 80       	ldd	r0, Z+6	; 0x06
    15ea:	f7 81       	ldd	r31, Z+7	; 0x07
    15ec:	e0 2d       	mov	r30, r0
    15ee:	82 81       	ldd	r24, Z+2	; 0x02
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	90 93 46 01 	sts	0x0146, r25
    15f6:	80 93 45 01 	sts	0x0145, r24
    15fa:	20 91 7c 08 	lds	r18, 0x087C
    15fe:	30 91 7d 08 	lds	r19, 0x087D
    1602:	80 91 45 01 	lds	r24, 0x0145
    1606:	90 91 46 01 	lds	r25, 0x0146
    160a:	28 17       	cp	r18, r24
    160c:	39 07       	cpc	r19, r25
    160e:	08 f4       	brcc	.+2      	; 0x1612 <vTaskIncrementTick+0xac>
    1610:	69 c0       	rjmp	.+210    	; 0x16e4 <vTaskIncrementTick+0x17e>
    1612:	e0 91 82 08 	lds	r30, 0x0882
    1616:	f0 91 83 08 	lds	r31, 0x0883
    161a:	80 81       	ld	r24, Z
    161c:	88 23       	and	r24, r24
    161e:	99 f0       	breq	.+38     	; 0x1646 <vTaskIncrementTick+0xe0>
    1620:	e0 91 82 08 	lds	r30, 0x0882
    1624:	f0 91 83 08 	lds	r31, 0x0883
    1628:	05 80       	ldd	r0, Z+5	; 0x05
    162a:	f6 81       	ldd	r31, Z+6	; 0x06
    162c:	e0 2d       	mov	r30, r0
    162e:	c6 81       	ldd	r28, Z+6	; 0x06
    1630:	d7 81       	ldd	r29, Z+7	; 0x07
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	20 91 7c 08 	lds	r18, 0x087C
    163a:	30 91 7d 08 	lds	r19, 0x087D
    163e:	28 17       	cp	r18, r24
    1640:	39 07       	cpc	r19, r25
    1642:	f8 f4       	brcc	.+62     	; 0x1682 <vTaskIncrementTick+0x11c>
    1644:	19 c0       	rjmp	.+50     	; 0x1678 <vTaskIncrementTick+0x112>
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	90 93 46 01 	sts	0x0146, r25
    164e:	80 93 45 01 	sts	0x0145, r24
    1652:	48 c0       	rjmp	.+144    	; 0x16e4 <vTaskIncrementTick+0x17e>
    1654:	e0 91 82 08 	lds	r30, 0x0882
    1658:	f0 91 83 08 	lds	r31, 0x0883
    165c:	05 80       	ldd	r0, Z+5	; 0x05
    165e:	f6 81       	ldd	r31, Z+6	; 0x06
    1660:	e0 2d       	mov	r30, r0
    1662:	c6 81       	ldd	r28, Z+6	; 0x06
    1664:	d7 81       	ldd	r29, Z+7	; 0x07
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	9b 81       	ldd	r25, Y+3	; 0x03
    166a:	20 91 7c 08 	lds	r18, 0x087C
    166e:	30 91 7d 08 	lds	r19, 0x087D
    1672:	28 17       	cp	r18, r24
    1674:	39 07       	cpc	r19, r25
    1676:	28 f4       	brcc	.+10     	; 0x1682 <vTaskIncrementTick+0x11c>
    1678:	90 93 46 01 	sts	0x0146, r25
    167c:	80 93 45 01 	sts	0x0145, r24
    1680:	31 c0       	rjmp	.+98     	; 0x16e4 <vTaskIncrementTick+0x17e>
    1682:	8e 01       	movw	r16, r28
    1684:	0e 5f       	subi	r16, 0xFE	; 254
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	c8 01       	movw	r24, r16
    168a:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    168e:	8c 89       	ldd	r24, Y+20	; 0x14
    1690:	9d 89       	ldd	r25, Y+21	; 0x15
    1692:	89 2b       	or	r24, r25
    1694:	21 f0       	breq	.+8      	; 0x169e <vTaskIncrementTick+0x138>
    1696:	ce 01       	movw	r24, r28
    1698:	0c 96       	adiw	r24, 0x0c	; 12
    169a:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    169e:	8e 89       	ldd	r24, Y+22	; 0x16
    16a0:	90 91 7b 08 	lds	r25, 0x087B
    16a4:	98 17       	cp	r25, r24
    16a6:	10 f4       	brcc	.+4      	; 0x16ac <vTaskIncrementTick+0x146>
    16a8:	80 93 7b 08 	sts	0x087B, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 01       	movw	r18, r24
    16b0:	22 0f       	add	r18, r18
    16b2:	33 1f       	adc	r19, r19
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	22 0f       	add	r18, r18
    16ba:	33 1f       	adc	r19, r19
    16bc:	82 0f       	add	r24, r18
    16be:	93 1f       	adc	r25, r19
    16c0:	b8 01       	movw	r22, r16
    16c2:	88 57       	subi	r24, 0x78	; 120
    16c4:	97 4f       	sbci	r25, 0xF7	; 247
    16c6:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    16ca:	e0 91 82 08 	lds	r30, 0x0882
    16ce:	f0 91 83 08 	lds	r31, 0x0883
    16d2:	80 81       	ld	r24, Z
    16d4:	81 11       	cpse	r24, r1
    16d6:	be cf       	rjmp	.-132    	; 0x1654 <vTaskIncrementTick+0xee>
    16d8:	b6 cf       	rjmp	.-148    	; 0x1646 <vTaskIncrementTick+0xe0>
    16da:	80 91 78 08 	lds	r24, 0x0878
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	80 93 78 08 	sts	0x0878, r24
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <xTaskResumeAll>:
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	0f 92       	push	r0
    1708:	80 91 79 08 	lds	r24, 0x0879
    170c:	81 50       	subi	r24, 0x01	; 1
    170e:	80 93 79 08 	sts	0x0879, r24
    1712:	80 91 79 08 	lds	r24, 0x0879
    1716:	81 11       	cpse	r24, r1
    1718:	66 c0       	rjmp	.+204    	; 0x17e6 <xTaskResumeAll+0xf8>
    171a:	80 91 7e 08 	lds	r24, 0x087E
    171e:	81 11       	cpse	r24, r1
    1720:	30 c0       	rjmp	.+96     	; 0x1782 <xTaskResumeAll+0x94>
    1722:	64 c0       	rjmp	.+200    	; 0x17ec <xTaskResumeAll+0xfe>
    1724:	d6 01       	movw	r26, r12
    1726:	ed 91       	ld	r30, X+
    1728:	fc 91       	ld	r31, X
    172a:	c6 81       	ldd	r28, Z+6	; 0x06
    172c:	d7 81       	ldd	r29, Z+7	; 0x07
    172e:	ce 01       	movw	r24, r28
    1730:	0c 96       	adiw	r24, 0x0c	; 12
    1732:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    1736:	8e 01       	movw	r16, r28
    1738:	0e 5f       	subi	r16, 0xFE	; 254
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	c8 01       	movw	r24, r16
    173e:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    1742:	8e 89       	ldd	r24, Y+22	; 0x16
    1744:	90 91 7b 08 	lds	r25, 0x087B
    1748:	98 17       	cp	r25, r24
    174a:	10 f4       	brcc	.+4      	; 0x1750 <xTaskResumeAll+0x62>
    174c:	80 93 7b 08 	sts	0x087B, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9c 01       	movw	r18, r24
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	22 0f       	add	r18, r18
    175a:	33 1f       	adc	r19, r19
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	82 0f       	add	r24, r18
    1762:	93 1f       	adc	r25, r19
    1764:	b8 01       	movw	r22, r16
    1766:	88 57       	subi	r24, 0x78	; 120
    1768:	97 4f       	sbci	r25, 0xF7	; 247
    176a:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    176e:	e0 91 84 08 	lds	r30, 0x0884
    1772:	f0 91 85 08 	lds	r31, 0x0885
    1776:	9e 89       	ldd	r25, Y+22	; 0x16
    1778:	86 89       	ldd	r24, Z+22	; 0x16
    177a:	98 17       	cp	r25, r24
    177c:	88 f0       	brcs	.+34     	; 0x17a0 <xTaskResumeAll+0xb2>
    177e:	ba 2c       	mov	r11, r10
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <xTaskResumeAll+0xb2>
    1782:	b1 2c       	mov	r11, r1
    1784:	0f 2e       	mov	r0, r31
    1786:	fe eb       	ldi	r31, 0xBE	; 190
    1788:	ef 2e       	mov	r14, r31
    178a:	f8 e0       	ldi	r31, 0x08	; 8
    178c:	ff 2e       	mov	r15, r31
    178e:	f0 2d       	mov	r31, r0
    1790:	0f 2e       	mov	r0, r31
    1792:	f3 ec       	ldi	r31, 0xC3	; 195
    1794:	cf 2e       	mov	r12, r31
    1796:	f8 e0       	ldi	r31, 0x08	; 8
    1798:	df 2e       	mov	r13, r31
    179a:	f0 2d       	mov	r31, r0
    179c:	aa 24       	eor	r10, r10
    179e:	a3 94       	inc	r10
    17a0:	f7 01       	movw	r30, r14
    17a2:	80 81       	ld	r24, Z
    17a4:	81 11       	cpse	r24, r1
    17a6:	be cf       	rjmp	.-132    	; 0x1724 <xTaskResumeAll+0x36>
    17a8:	80 91 78 08 	lds	r24, 0x0878
    17ac:	88 23       	and	r24, r24
    17ae:	79 f0       	breq	.+30     	; 0x17ce <xTaskResumeAll+0xe0>
    17b0:	80 91 78 08 	lds	r24, 0x0878
    17b4:	88 23       	and	r24, r24
    17b6:	91 f0       	breq	.+36     	; 0x17dc <xTaskResumeAll+0xee>
    17b8:	d6 de       	rcall	.-596    	; 0x1566 <vTaskIncrementTick>
    17ba:	80 91 78 08 	lds	r24, 0x0878
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	80 93 78 08 	sts	0x0878, r24
    17c4:	80 91 78 08 	lds	r24, 0x0878
    17c8:	81 11       	cpse	r24, r1
    17ca:	f6 cf       	rjmp	.-20     	; 0x17b8 <xTaskResumeAll+0xca>
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <xTaskResumeAll+0xee>
    17ce:	f1 e0       	ldi	r31, 0x01	; 1
    17d0:	bf 16       	cp	r11, r31
    17d2:	21 f0       	breq	.+8      	; 0x17dc <xTaskResumeAll+0xee>
    17d4:	80 91 77 08 	lds	r24, 0x0877
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	39 f4       	brne	.+14     	; 0x17ea <xTaskResumeAll+0xfc>
    17dc:	10 92 77 08 	sts	0x0877, r1
    17e0:	a1 dc       	rcall	.-1726   	; 0x1124 <vPortYield>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <xTaskResumeAll+0xfe>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <xTaskResumeAll+0xfe>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	08 95       	ret

00001806 <prvIdleTask>:
    1806:	0f 2e       	mov	r0, r31
    1808:	f7 ec       	ldi	r31, 0xC7	; 199
    180a:	ef 2e       	mov	r14, r31
    180c:	f8 e0       	ldi	r31, 0x08	; 8
    180e:	ff 2e       	mov	r15, r31
    1810:	f0 2d       	mov	r31, r0
    1812:	0f 2e       	mov	r0, r31
    1814:	fc ec       	ldi	r31, 0xCC	; 204
    1816:	cf 2e       	mov	r12, r31
    1818:	f8 e0       	ldi	r31, 0x08	; 8
    181a:	df 2e       	mov	r13, r31
    181c:	f0 2d       	mov	r31, r0
    181e:	c8 e8       	ldi	r28, 0x88	; 136
    1820:	d8 e0       	ldi	r29, 0x08	; 8
    1822:	80 91 7f 08 	lds	r24, 0x087F
    1826:	88 23       	and	r24, r24
    1828:	31 f1       	breq	.+76     	; 0x1876 <prvIdleTask+0x70>
    182a:	97 de       	rcall	.-722    	; 0x155a <vTaskSuspendAll>
    182c:	d7 01       	movw	r26, r14
    182e:	1c 91       	ld	r17, X
    1830:	5e df       	rcall	.-324    	; 0x16ee <xTaskResumeAll>
    1832:	11 23       	and	r17, r17
    1834:	01 f1       	breq	.+64     	; 0x1876 <prvIdleTask+0x70>
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	0f 92       	push	r0
    183c:	d6 01       	movw	r26, r12
    183e:	ed 91       	ld	r30, X+
    1840:	fc 91       	ld	r31, X
    1842:	06 81       	ldd	r16, Z+6	; 0x06
    1844:	17 81       	ldd	r17, Z+7	; 0x07
    1846:	c8 01       	movw	r24, r16
    1848:	02 96       	adiw	r24, 0x02	; 2
    184a:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    184e:	80 91 7e 08 	lds	r24, 0x087E
    1852:	81 50       	subi	r24, 0x01	; 1
    1854:	80 93 7e 08 	sts	0x087E, r24
    1858:	80 91 7f 08 	lds	r24, 0x087F
    185c:	81 50       	subi	r24, 0x01	; 1
    185e:	80 93 7f 08 	sts	0x087F, r24
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	f8 01       	movw	r30, r16
    1868:	87 89       	ldd	r24, Z+23	; 0x17
    186a:	90 8d       	ldd	r25, Z+24	; 0x18
    186c:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    1870:	c8 01       	movw	r24, r16
    1872:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    1876:	88 81       	ld	r24, Y
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	98 f2       	brcs	.-90     	; 0x1822 <prvIdleTask+0x1c>
    187c:	53 dc       	rcall	.-1882   	; 0x1124 <vPortYield>
    187e:	d1 cf       	rjmp	.-94     	; 0x1822 <prvIdleTask+0x1c>

00001880 <vTaskDelay>:
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	ec 01       	movw	r28, r24
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	99 f0       	breq	.+38     	; 0x18b0 <vTaskDelay+0x30>
    188a:	67 de       	rcall	.-818    	; 0x155a <vTaskSuspendAll>
    188c:	80 91 7c 08 	lds	r24, 0x087C
    1890:	90 91 7d 08 	lds	r25, 0x087D
    1894:	c8 0f       	add	r28, r24
    1896:	d9 1f       	adc	r29, r25
    1898:	80 91 84 08 	lds	r24, 0x0884
    189c:	90 91 85 08 	lds	r25, 0x0885
    18a0:	02 96       	adiw	r24, 0x02	; 2
    18a2:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    18a6:	ce 01       	movw	r24, r28
    18a8:	f0 dc       	rcall	.-1568   	; 0x128a <prvAddCurrentTaskToDelayedList>
    18aa:	21 df       	rcall	.-446    	; 0x16ee <xTaskResumeAll>
    18ac:	81 11       	cpse	r24, r1
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <vTaskDelay+0x32>
    18b0:	39 dc       	rcall	.-1934   	; 0x1124 <vPortYield>
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    18b8:	80 91 79 08 	lds	r24, 0x0879
    18bc:	81 11       	cpse	r24, r1
    18be:	13 c0       	rjmp	.+38     	; 0x18e6 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    18c0:	80 91 7b 08 	lds	r24, 0x087B
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	fc 01       	movw	r30, r24
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	8e 0f       	add	r24, r30
    18d6:	9f 1f       	adc	r25, r31
    18d8:	fc 01       	movw	r30, r24
    18da:	e8 57       	subi	r30, 0x78	; 120
    18dc:	f7 4f       	sbci	r31, 0xF7	; 247
    18de:	80 81       	ld	r24, Z
    18e0:	88 23       	and	r24, r24
    18e2:	29 f0       	breq	.+10     	; 0x18ee <vTaskSwitchContext+0x36>
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 77 08 	sts	0x0877, r24
    18ec:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    18ee:	80 91 7b 08 	lds	r24, 0x087B
    18f2:	81 50       	subi	r24, 0x01	; 1
    18f4:	80 93 7b 08 	sts	0x087B, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    18f8:	80 91 7b 08 	lds	r24, 0x087B
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	fc 01       	movw	r30, r24
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	8e 0f       	add	r24, r30
    190e:	9f 1f       	adc	r25, r31
    1910:	fc 01       	movw	r30, r24
    1912:	e8 57       	subi	r30, 0x78	; 120
    1914:	f7 4f       	sbci	r31, 0xF7	; 247
    1916:	80 81       	ld	r24, Z
    1918:	88 23       	and	r24, r24
    191a:	49 f3       	breq	.-46     	; 0x18ee <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    191c:	e0 91 7b 08 	lds	r30, 0x087B
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	cf 01       	movw	r24, r30
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	e8 0f       	add	r30, r24
    1932:	f9 1f       	adc	r31, r25
    1934:	e8 57       	subi	r30, 0x78	; 120
    1936:	f7 4f       	sbci	r31, 0xF7	; 247
    1938:	a1 81       	ldd	r26, Z+1	; 0x01
    193a:	b2 81       	ldd	r27, Z+2	; 0x02
    193c:	12 96       	adiw	r26, 0x02	; 2
    193e:	0d 90       	ld	r0, X+
    1940:	bc 91       	ld	r27, X
    1942:	a0 2d       	mov	r26, r0
    1944:	b2 83       	std	Z+2, r27	; 0x02
    1946:	a1 83       	std	Z+1, r26	; 0x01
    1948:	cf 01       	movw	r24, r30
    194a:	03 96       	adiw	r24, 0x03	; 3
    194c:	a8 17       	cp	r26, r24
    194e:	b9 07       	cpc	r27, r25
    1950:	31 f4       	brne	.+12     	; 0x195e <vTaskSwitchContext+0xa6>
    1952:	12 96       	adiw	r26, 0x02	; 2
    1954:	8d 91       	ld	r24, X+
    1956:	9c 91       	ld	r25, X
    1958:	13 97       	sbiw	r26, 0x03	; 3
    195a:	92 83       	std	Z+2, r25	; 0x02
    195c:	81 83       	std	Z+1, r24	; 0x01
    195e:	01 80       	ldd	r0, Z+1	; 0x01
    1960:	f2 81       	ldd	r31, Z+2	; 0x02
    1962:	e0 2d       	mov	r30, r0
    1964:	86 81       	ldd	r24, Z+6	; 0x06
    1966:	97 81       	ldd	r25, Z+7	; 0x07
    1968:	90 93 85 08 	sts	0x0885, r25
    196c:	80 93 84 08 	sts	0x0884, r24
    1970:	08 95       	ret

00001972 <memset>:
    1972:	dc 01       	movw	r26, r24
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <memset+0x6>
    1976:	6d 93       	st	X+, r22
    1978:	41 50       	subi	r20, 0x01	; 1
    197a:	50 40       	sbci	r21, 0x00	; 0
    197c:	e0 f7       	brcc	.-8      	; 0x1976 <memset+0x4>
    197e:	08 95       	ret

00001980 <strncpy>:
    1980:	fb 01       	movw	r30, r22
    1982:	dc 01       	movw	r26, r24
    1984:	41 50       	subi	r20, 0x01	; 1
    1986:	50 40       	sbci	r21, 0x00	; 0
    1988:	48 f0       	brcs	.+18     	; 0x199c <strncpy+0x1c>
    198a:	01 90       	ld	r0, Z+
    198c:	0d 92       	st	X+, r0
    198e:	00 20       	and	r0, r0
    1990:	c9 f7       	brne	.-14     	; 0x1984 <strncpy+0x4>
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <strncpy+0x16>
    1994:	1d 92       	st	X+, r1
    1996:	41 50       	subi	r20, 0x01	; 1
    1998:	50 40       	sbci	r21, 0x00	; 0
    199a:	e0 f7       	brcc	.-8      	; 0x1994 <strncpy+0x14>
    199c:	08 95       	ret

0000199e <snprintf>:
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	2e 97       	sbiw	r28, 0x0e	; 14
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	0d 89       	ldd	r16, Y+21	; 0x15
    19b8:	1e 89       	ldd	r17, Y+22	; 0x16
    19ba:	8f 89       	ldd	r24, Y+23	; 0x17
    19bc:	98 8d       	ldd	r25, Y+24	; 0x18
    19be:	26 e0       	ldi	r18, 0x06	; 6
    19c0:	2c 83       	std	Y+4, r18	; 0x04
    19c2:	1a 83       	std	Y+2, r17	; 0x02
    19c4:	09 83       	std	Y+1, r16	; 0x01
    19c6:	97 ff       	sbrs	r25, 7
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <snprintf+0x30>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e8       	ldi	r25, 0x80	; 128
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	ce 01       	movw	r24, r28
    19d6:	4b 96       	adiw	r24, 0x1b	; 27
    19d8:	ac 01       	movw	r20, r24
    19da:	69 8d       	ldd	r22, Y+25	; 0x19
    19dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19de:	ce 01       	movw	r24, r28
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	19 d0       	rcall	.+50     	; 0x1a16 <vfprintf>
    19e4:	4d 81       	ldd	r20, Y+5	; 0x05
    19e6:	5e 81       	ldd	r21, Y+6	; 0x06
    19e8:	57 fd       	sbrc	r21, 7
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <snprintf+0x62>
    19ec:	2f 81       	ldd	r18, Y+7	; 0x07
    19ee:	38 85       	ldd	r19, Y+8	; 0x08
    19f0:	42 17       	cp	r20, r18
    19f2:	53 07       	cpc	r21, r19
    19f4:	0c f4       	brge	.+2      	; 0x19f8 <snprintf+0x5a>
    19f6:	9a 01       	movw	r18, r20
    19f8:	f8 01       	movw	r30, r16
    19fa:	e2 0f       	add	r30, r18
    19fc:	f3 1f       	adc	r31, r19
    19fe:	10 82       	st	Z, r1
    1a00:	2e 96       	adiw	r28, 0x0e	; 14
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <vfprintf>:
    1a16:	2f 92       	push	r2
    1a18:	3f 92       	push	r3
    1a1a:	4f 92       	push	r4
    1a1c:	5f 92       	push	r5
    1a1e:	6f 92       	push	r6
    1a20:	7f 92       	push	r7
    1a22:	8f 92       	push	r8
    1a24:	9f 92       	push	r9
    1a26:	af 92       	push	r10
    1a28:	bf 92       	push	r11
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	2c 97       	sbiw	r28, 0x0c	; 12
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	7c 01       	movw	r14, r24
    1a4c:	6b 01       	movw	r12, r22
    1a4e:	8a 01       	movw	r16, r20
    1a50:	fc 01       	movw	r30, r24
    1a52:	17 82       	std	Z+7, r1	; 0x07
    1a54:	16 82       	std	Z+6, r1	; 0x06
    1a56:	83 81       	ldd	r24, Z+3	; 0x03
    1a58:	81 ff       	sbrs	r24, 1
    1a5a:	b9 c1       	rjmp	.+882    	; 0x1dce <vfprintf+0x3b8>
    1a5c:	88 24       	eor	r8, r8
    1a5e:	83 94       	inc	r8
    1a60:	91 2c       	mov	r9, r1
    1a62:	8c 0e       	add	r8, r28
    1a64:	9d 1e       	adc	r9, r29
    1a66:	f7 01       	movw	r30, r14
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	f6 01       	movw	r30, r12
    1a6c:	93 fd       	sbrc	r25, 3
    1a6e:	85 91       	lpm	r24, Z+
    1a70:	93 ff       	sbrs	r25, 3
    1a72:	81 91       	ld	r24, Z+
    1a74:	6f 01       	movw	r12, r30
    1a76:	88 23       	and	r24, r24
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <vfprintf+0x66>
    1a7a:	a5 c1       	rjmp	.+842    	; 0x1dc6 <vfprintf+0x3b0>
    1a7c:	85 32       	cpi	r24, 0x25	; 37
    1a7e:	39 f4       	brne	.+14     	; 0x1a8e <vfprintf+0x78>
    1a80:	93 fd       	sbrc	r25, 3
    1a82:	85 91       	lpm	r24, Z+
    1a84:	93 ff       	sbrs	r25, 3
    1a86:	81 91       	ld	r24, Z+
    1a88:	6f 01       	movw	r12, r30
    1a8a:	85 32       	cpi	r24, 0x25	; 37
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <vfprintf+0x80>
    1a8e:	b7 01       	movw	r22, r14
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	cf d1       	rcall	.+926    	; 0x1e32 <fputc>
    1a94:	e8 cf       	rjmp	.-48     	; 0x1a66 <vfprintf+0x50>
    1a96:	51 2c       	mov	r5, r1
    1a98:	31 2c       	mov	r3, r1
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	20 32       	cpi	r18, 0x20	; 32
    1a9e:	a8 f4       	brcc	.+42     	; 0x1aca <vfprintf+0xb4>
    1aa0:	8b 32       	cpi	r24, 0x2B	; 43
    1aa2:	61 f0       	breq	.+24     	; 0x1abc <vfprintf+0xa6>
    1aa4:	28 f4       	brcc	.+10     	; 0x1ab0 <vfprintf+0x9a>
    1aa6:	80 32       	cpi	r24, 0x20	; 32
    1aa8:	51 f0       	breq	.+20     	; 0x1abe <vfprintf+0xa8>
    1aaa:	83 32       	cpi	r24, 0x23	; 35
    1aac:	71 f4       	brne	.+28     	; 0x1aca <vfprintf+0xb4>
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <vfprintf+0xb0>
    1ab0:	8d 32       	cpi	r24, 0x2D	; 45
    1ab2:	39 f0       	breq	.+14     	; 0x1ac2 <vfprintf+0xac>
    1ab4:	80 33       	cpi	r24, 0x30	; 48
    1ab6:	49 f4       	brne	.+18     	; 0x1aca <vfprintf+0xb4>
    1ab8:	21 60       	ori	r18, 0x01	; 1
    1aba:	28 c0       	rjmp	.+80     	; 0x1b0c <vfprintf+0xf6>
    1abc:	22 60       	ori	r18, 0x02	; 2
    1abe:	24 60       	ori	r18, 0x04	; 4
    1ac0:	25 c0       	rjmp	.+74     	; 0x1b0c <vfprintf+0xf6>
    1ac2:	28 60       	ori	r18, 0x08	; 8
    1ac4:	23 c0       	rjmp	.+70     	; 0x1b0c <vfprintf+0xf6>
    1ac6:	20 61       	ori	r18, 0x10	; 16
    1ac8:	21 c0       	rjmp	.+66     	; 0x1b0c <vfprintf+0xf6>
    1aca:	27 fd       	sbrc	r18, 7
    1acc:	27 c0       	rjmp	.+78     	; 0x1b1c <vfprintf+0x106>
    1ace:	38 2f       	mov	r19, r24
    1ad0:	30 53       	subi	r19, 0x30	; 48
    1ad2:	3a 30       	cpi	r19, 0x0A	; 10
    1ad4:	78 f4       	brcc	.+30     	; 0x1af4 <vfprintf+0xde>
    1ad6:	26 ff       	sbrs	r18, 6
    1ad8:	06 c0       	rjmp	.+12     	; 0x1ae6 <vfprintf+0xd0>
    1ada:	fa e0       	ldi	r31, 0x0A	; 10
    1adc:	5f 9e       	mul	r5, r31
    1ade:	30 0d       	add	r19, r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	53 2e       	mov	r5, r19
    1ae4:	13 c0       	rjmp	.+38     	; 0x1b0c <vfprintf+0xf6>
    1ae6:	8a e0       	ldi	r24, 0x0A	; 10
    1ae8:	38 9e       	mul	r3, r24
    1aea:	30 0d       	add	r19, r0
    1aec:	11 24       	eor	r1, r1
    1aee:	33 2e       	mov	r3, r19
    1af0:	20 62       	ori	r18, 0x20	; 32
    1af2:	0c c0       	rjmp	.+24     	; 0x1b0c <vfprintf+0xf6>
    1af4:	8e 32       	cpi	r24, 0x2E	; 46
    1af6:	21 f4       	brne	.+8      	; 0x1b00 <vfprintf+0xea>
    1af8:	26 fd       	sbrc	r18, 6
    1afa:	65 c1       	rjmp	.+714    	; 0x1dc6 <vfprintf+0x3b0>
    1afc:	20 64       	ori	r18, 0x40	; 64
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <vfprintf+0xf6>
    1b00:	8c 36       	cpi	r24, 0x6C	; 108
    1b02:	11 f4       	brne	.+4      	; 0x1b08 <vfprintf+0xf2>
    1b04:	20 68       	ori	r18, 0x80	; 128
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <vfprintf+0xf6>
    1b08:	88 36       	cpi	r24, 0x68	; 104
    1b0a:	41 f4       	brne	.+16     	; 0x1b1c <vfprintf+0x106>
    1b0c:	f6 01       	movw	r30, r12
    1b0e:	93 fd       	sbrc	r25, 3
    1b10:	85 91       	lpm	r24, Z+
    1b12:	93 ff       	sbrs	r25, 3
    1b14:	81 91       	ld	r24, Z+
    1b16:	6f 01       	movw	r12, r30
    1b18:	81 11       	cpse	r24, r1
    1b1a:	c0 cf       	rjmp	.-128    	; 0x1a9c <vfprintf+0x86>
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	95 54       	subi	r25, 0x45	; 69
    1b20:	93 30       	cpi	r25, 0x03	; 3
    1b22:	18 f0       	brcs	.+6      	; 0x1b2a <vfprintf+0x114>
    1b24:	90 52       	subi	r25, 0x20	; 32
    1b26:	93 30       	cpi	r25, 0x03	; 3
    1b28:	28 f4       	brcc	.+10     	; 0x1b34 <vfprintf+0x11e>
    1b2a:	0c 5f       	subi	r16, 0xFC	; 252
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	ff e3       	ldi	r31, 0x3F	; 63
    1b30:	f9 83       	std	Y+1, r31	; 0x01
    1b32:	0d c0       	rjmp	.+26     	; 0x1b4e <vfprintf+0x138>
    1b34:	83 36       	cpi	r24, 0x63	; 99
    1b36:	31 f0       	breq	.+12     	; 0x1b44 <vfprintf+0x12e>
    1b38:	83 37       	cpi	r24, 0x73	; 115
    1b3a:	71 f0       	breq	.+28     	; 0x1b58 <vfprintf+0x142>
    1b3c:	83 35       	cpi	r24, 0x53	; 83
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <vfprintf+0x12c>
    1b40:	5a c0       	rjmp	.+180    	; 0x1bf6 <vfprintf+0x1e0>
    1b42:	22 c0       	rjmp	.+68     	; 0x1b88 <vfprintf+0x172>
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 81       	ld	r24, Z
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	0e 5f       	subi	r16, 0xFE	; 254
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	44 24       	eor	r4, r4
    1b50:	43 94       	inc	r4
    1b52:	51 2c       	mov	r5, r1
    1b54:	54 01       	movw	r10, r8
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <vfprintf+0x16a>
    1b58:	38 01       	movw	r6, r16
    1b5a:	f2 e0       	ldi	r31, 0x02	; 2
    1b5c:	6f 0e       	add	r6, r31
    1b5e:	71 1c       	adc	r7, r1
    1b60:	f8 01       	movw	r30, r16
    1b62:	a0 80       	ld	r10, Z
    1b64:	b1 80       	ldd	r11, Z+1	; 0x01
    1b66:	26 ff       	sbrs	r18, 6
    1b68:	03 c0       	rjmp	.+6      	; 0x1b70 <vfprintf+0x15a>
    1b6a:	65 2d       	mov	r22, r5
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x15e>
    1b70:	6f ef       	ldi	r22, 0xFF	; 255
    1b72:	7f ef       	ldi	r23, 0xFF	; 255
    1b74:	c5 01       	movw	r24, r10
    1b76:	2c 87       	std	Y+12, r18	; 0x0c
    1b78:	51 d1       	rcall	.+674    	; 0x1e1c <strnlen>
    1b7a:	2c 01       	movw	r4, r24
    1b7c:	83 01       	movw	r16, r6
    1b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b80:	6f e7       	ldi	r22, 0x7F	; 127
    1b82:	26 2e       	mov	r2, r22
    1b84:	22 22       	and	r2, r18
    1b86:	17 c0       	rjmp	.+46     	; 0x1bb6 <vfprintf+0x1a0>
    1b88:	38 01       	movw	r6, r16
    1b8a:	f2 e0       	ldi	r31, 0x02	; 2
    1b8c:	6f 0e       	add	r6, r31
    1b8e:	71 1c       	adc	r7, r1
    1b90:	f8 01       	movw	r30, r16
    1b92:	a0 80       	ld	r10, Z
    1b94:	b1 80       	ldd	r11, Z+1	; 0x01
    1b96:	26 ff       	sbrs	r18, 6
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <vfprintf+0x18a>
    1b9a:	65 2d       	mov	r22, r5
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <vfprintf+0x18e>
    1ba0:	6f ef       	ldi	r22, 0xFF	; 255
    1ba2:	7f ef       	ldi	r23, 0xFF	; 255
    1ba4:	c5 01       	movw	r24, r10
    1ba6:	2c 87       	std	Y+12, r18	; 0x0c
    1ba8:	2e d1       	rcall	.+604    	; 0x1e06 <strnlen_P>
    1baa:	2c 01       	movw	r4, r24
    1bac:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bae:	50 e8       	ldi	r21, 0x80	; 128
    1bb0:	25 2e       	mov	r2, r21
    1bb2:	22 2a       	or	r2, r18
    1bb4:	83 01       	movw	r16, r6
    1bb6:	23 fc       	sbrc	r2, 3
    1bb8:	1a c0       	rjmp	.+52     	; 0x1bee <vfprintf+0x1d8>
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <vfprintf+0x1b0>
    1bbc:	b7 01       	movw	r22, r14
    1bbe:	80 e2       	ldi	r24, 0x20	; 32
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	37 d1       	rcall	.+622    	; 0x1e32 <fputc>
    1bc4:	3a 94       	dec	r3
    1bc6:	83 2d       	mov	r24, r3
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	48 16       	cp	r4, r24
    1bcc:	59 06       	cpc	r5, r25
    1bce:	b0 f3       	brcs	.-20     	; 0x1bbc <vfprintf+0x1a6>
    1bd0:	0e c0       	rjmp	.+28     	; 0x1bee <vfprintf+0x1d8>
    1bd2:	f5 01       	movw	r30, r10
    1bd4:	27 fc       	sbrc	r2, 7
    1bd6:	85 91       	lpm	r24, Z+
    1bd8:	27 fe       	sbrs	r2, 7
    1bda:	81 91       	ld	r24, Z+
    1bdc:	5f 01       	movw	r10, r30
    1bde:	b7 01       	movw	r22, r14
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	27 d1       	rcall	.+590    	; 0x1e32 <fputc>
    1be4:	31 10       	cpse	r3, r1
    1be6:	3a 94       	dec	r3
    1be8:	f1 e0       	ldi	r31, 0x01	; 1
    1bea:	4f 1a       	sub	r4, r31
    1bec:	51 08       	sbc	r5, r1
    1bee:	41 14       	cp	r4, r1
    1bf0:	51 04       	cpc	r5, r1
    1bf2:	79 f7       	brne	.-34     	; 0x1bd2 <vfprintf+0x1bc>
    1bf4:	e5 c0       	rjmp	.+458    	; 0x1dc0 <vfprintf+0x3aa>
    1bf6:	84 36       	cpi	r24, 0x64	; 100
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <vfprintf+0x1e8>
    1bfa:	89 36       	cpi	r24, 0x69	; 105
    1bfc:	39 f5       	brne	.+78     	; 0x1c4c <vfprintf+0x236>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	27 ff       	sbrs	r18, 7
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <vfprintf+0x1fc>
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	0c 5f       	subi	r16, 0xFC	; 252
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	08 c0       	rjmp	.+16     	; 0x1c22 <vfprintf+0x20c>
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	88 27       	eor	r24, r24
    1c18:	77 fd       	sbrc	r23, 7
    1c1a:	80 95       	com	r24
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	0e 5f       	subi	r16, 0xFE	; 254
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	4f e6       	ldi	r20, 0x6F	; 111
    1c24:	b4 2e       	mov	r11, r20
    1c26:	b2 22       	and	r11, r18
    1c28:	97 ff       	sbrs	r25, 7
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <vfprintf+0x228>
    1c2c:	90 95       	com	r25
    1c2e:	80 95       	com	r24
    1c30:	70 95       	com	r23
    1c32:	61 95       	neg	r22
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	8f 4f       	sbci	r24, 0xFF	; 255
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	f0 e8       	ldi	r31, 0x80	; 128
    1c3c:	bf 2a       	or	r11, r31
    1c3e:	2a e0       	ldi	r18, 0x0A	; 10
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	a4 01       	movw	r20, r8
    1c44:	22 d1       	rcall	.+580    	; 0x1e8a <__ultoa_invert>
    1c46:	a8 2e       	mov	r10, r24
    1c48:	a8 18       	sub	r10, r8
    1c4a:	42 c0       	rjmp	.+132    	; 0x1cd0 <vfprintf+0x2ba>
    1c4c:	85 37       	cpi	r24, 0x75	; 117
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <vfprintf+0x246>
    1c50:	3f ee       	ldi	r19, 0xEF	; 239
    1c52:	b3 2e       	mov	r11, r19
    1c54:	b2 22       	and	r11, r18
    1c56:	2a e0       	ldi	r18, 0x0A	; 10
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	24 c0       	rjmp	.+72     	; 0x1ca4 <vfprintf+0x28e>
    1c5c:	99 ef       	ldi	r25, 0xF9	; 249
    1c5e:	b9 2e       	mov	r11, r25
    1c60:	b2 22       	and	r11, r18
    1c62:	8f 36       	cpi	r24, 0x6F	; 111
    1c64:	b9 f0       	breq	.+46     	; 0x1c94 <vfprintf+0x27e>
    1c66:	20 f4       	brcc	.+8      	; 0x1c70 <vfprintf+0x25a>
    1c68:	88 35       	cpi	r24, 0x58	; 88
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <vfprintf+0x258>
    1c6c:	ac c0       	rjmp	.+344    	; 0x1dc6 <vfprintf+0x3b0>
    1c6e:	0d c0       	rjmp	.+26     	; 0x1c8a <vfprintf+0x274>
    1c70:	80 37       	cpi	r24, 0x70	; 112
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <vfprintf+0x266>
    1c74:	88 37       	cpi	r24, 0x78	; 120
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <vfprintf+0x264>
    1c78:	a6 c0       	rjmp	.+332    	; 0x1dc6 <vfprintf+0x3b0>
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <vfprintf+0x26a>
    1c7c:	20 e1       	ldi	r18, 0x10	; 16
    1c7e:	b2 2a       	or	r11, r18
    1c80:	b4 fe       	sbrs	r11, 4
    1c82:	0b c0       	rjmp	.+22     	; 0x1c9a <vfprintf+0x284>
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	b8 2a       	or	r11, r24
    1c88:	08 c0       	rjmp	.+16     	; 0x1c9a <vfprintf+0x284>
    1c8a:	24 ff       	sbrs	r18, 4
    1c8c:	09 c0       	rjmp	.+18     	; 0x1ca0 <vfprintf+0x28a>
    1c8e:	e6 e0       	ldi	r30, 0x06	; 6
    1c90:	be 2a       	or	r11, r30
    1c92:	06 c0       	rjmp	.+12     	; 0x1ca0 <vfprintf+0x28a>
    1c94:	28 e0       	ldi	r18, 0x08	; 8
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <vfprintf+0x28e>
    1c9a:	20 e1       	ldi	r18, 0x10	; 16
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0x28e>
    1ca0:	20 e1       	ldi	r18, 0x10	; 16
    1ca2:	32 e0       	ldi	r19, 0x02	; 2
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	b7 fe       	sbrs	r11, 7
    1ca8:	07 c0       	rjmp	.+14     	; 0x1cb8 <vfprintf+0x2a2>
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	0c 5f       	subi	r16, 0xFC	; 252
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <vfprintf+0x2ae>
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 5f       	subi	r16, 0xFE	; 254
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	a4 01       	movw	r20, r8
    1cc6:	e1 d0       	rcall	.+450    	; 0x1e8a <__ultoa_invert>
    1cc8:	a8 2e       	mov	r10, r24
    1cca:	a8 18       	sub	r10, r8
    1ccc:	ff e7       	ldi	r31, 0x7F	; 127
    1cce:	bf 22       	and	r11, r31
    1cd0:	b6 fe       	sbrs	r11, 6
    1cd2:	0b c0       	rjmp	.+22     	; 0x1cea <vfprintf+0x2d4>
    1cd4:	2b 2d       	mov	r18, r11
    1cd6:	2e 7f       	andi	r18, 0xFE	; 254
    1cd8:	a5 14       	cp	r10, r5
    1cda:	50 f4       	brcc	.+20     	; 0x1cf0 <vfprintf+0x2da>
    1cdc:	b4 fe       	sbrs	r11, 4
    1cde:	0a c0       	rjmp	.+20     	; 0x1cf4 <vfprintf+0x2de>
    1ce0:	b2 fc       	sbrc	r11, 2
    1ce2:	08 c0       	rjmp	.+16     	; 0x1cf4 <vfprintf+0x2de>
    1ce4:	2b 2d       	mov	r18, r11
    1ce6:	2e 7e       	andi	r18, 0xEE	; 238
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <vfprintf+0x2de>
    1cea:	7a 2c       	mov	r7, r10
    1cec:	2b 2d       	mov	r18, r11
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <vfprintf+0x2e0>
    1cf0:	7a 2c       	mov	r7, r10
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <vfprintf+0x2e0>
    1cf4:	75 2c       	mov	r7, r5
    1cf6:	24 ff       	sbrs	r18, 4
    1cf8:	0d c0       	rjmp	.+26     	; 0x1d14 <vfprintf+0x2fe>
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ea 0d       	add	r30, r10
    1cfe:	f1 1d       	adc	r31, r1
    1d00:	80 81       	ld	r24, Z
    1d02:	80 33       	cpi	r24, 0x30	; 48
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <vfprintf+0x2f4>
    1d06:	29 7e       	andi	r18, 0xE9	; 233
    1d08:	09 c0       	rjmp	.+18     	; 0x1d1c <vfprintf+0x306>
    1d0a:	22 ff       	sbrs	r18, 2
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <vfprintf+0x304>
    1d0e:	73 94       	inc	r7
    1d10:	73 94       	inc	r7
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <vfprintf+0x306>
    1d14:	82 2f       	mov	r24, r18
    1d16:	86 78       	andi	r24, 0x86	; 134
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <vfprintf+0x306>
    1d1a:	73 94       	inc	r7
    1d1c:	23 fd       	sbrc	r18, 3
    1d1e:	13 c0       	rjmp	.+38     	; 0x1d46 <vfprintf+0x330>
    1d20:	20 ff       	sbrs	r18, 0
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <vfprintf+0x32a>
    1d24:	5a 2c       	mov	r5, r10
    1d26:	73 14       	cp	r7, r3
    1d28:	58 f4       	brcc	.+22     	; 0x1d40 <vfprintf+0x32a>
    1d2a:	53 0c       	add	r5, r3
    1d2c:	57 18       	sub	r5, r7
    1d2e:	73 2c       	mov	r7, r3
    1d30:	07 c0       	rjmp	.+14     	; 0x1d40 <vfprintf+0x32a>
    1d32:	b7 01       	movw	r22, r14
    1d34:	80 e2       	ldi	r24, 0x20	; 32
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	2c 87       	std	Y+12, r18	; 0x0c
    1d3a:	7b d0       	rcall	.+246    	; 0x1e32 <fputc>
    1d3c:	73 94       	inc	r7
    1d3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d40:	73 14       	cp	r7, r3
    1d42:	b8 f3       	brcs	.-18     	; 0x1d32 <vfprintf+0x31c>
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <vfprintf+0x338>
    1d46:	73 14       	cp	r7, r3
    1d48:	10 f4       	brcc	.+4      	; 0x1d4e <vfprintf+0x338>
    1d4a:	37 18       	sub	r3, r7
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <vfprintf+0x33a>
    1d4e:	31 2c       	mov	r3, r1
    1d50:	24 ff       	sbrs	r18, 4
    1d52:	11 c0       	rjmp	.+34     	; 0x1d76 <vfprintf+0x360>
    1d54:	b7 01       	movw	r22, r14
    1d56:	80 e3       	ldi	r24, 0x30	; 48
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	2c 87       	std	Y+12, r18	; 0x0c
    1d5c:	6a d0       	rcall	.+212    	; 0x1e32 <fputc>
    1d5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d60:	22 ff       	sbrs	r18, 2
    1d62:	1c c0       	rjmp	.+56     	; 0x1d9c <vfprintf+0x386>
    1d64:	21 ff       	sbrs	r18, 1
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <vfprintf+0x358>
    1d68:	88 e5       	ldi	r24, 0x58	; 88
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <vfprintf+0x35c>
    1d6e:	88 e7       	ldi	r24, 0x78	; 120
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	b7 01       	movw	r22, r14
    1d74:	0c c0       	rjmp	.+24     	; 0x1d8e <vfprintf+0x378>
    1d76:	82 2f       	mov	r24, r18
    1d78:	86 78       	andi	r24, 0x86	; 134
    1d7a:	81 f0       	breq	.+32     	; 0x1d9c <vfprintf+0x386>
    1d7c:	21 fd       	sbrc	r18, 1
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <vfprintf+0x36e>
    1d80:	80 e2       	ldi	r24, 0x20	; 32
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <vfprintf+0x370>
    1d84:	8b e2       	ldi	r24, 0x2B	; 43
    1d86:	27 fd       	sbrc	r18, 7
    1d88:	8d e2       	ldi	r24, 0x2D	; 45
    1d8a:	b7 01       	movw	r22, r14
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	51 d0       	rcall	.+162    	; 0x1e32 <fputc>
    1d90:	05 c0       	rjmp	.+10     	; 0x1d9c <vfprintf+0x386>
    1d92:	b7 01       	movw	r22, r14
    1d94:	80 e3       	ldi	r24, 0x30	; 48
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	4c d0       	rcall	.+152    	; 0x1e32 <fputc>
    1d9a:	5a 94       	dec	r5
    1d9c:	a5 14       	cp	r10, r5
    1d9e:	c8 f3       	brcs	.-14     	; 0x1d92 <vfprintf+0x37c>
    1da0:	aa 94       	dec	r10
    1da2:	f4 01       	movw	r30, r8
    1da4:	ea 0d       	add	r30, r10
    1da6:	f1 1d       	adc	r31, r1
    1da8:	b7 01       	movw	r22, r14
    1daa:	80 81       	ld	r24, Z
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	41 d0       	rcall	.+130    	; 0x1e32 <fputc>
    1db0:	a1 10       	cpse	r10, r1
    1db2:	f6 cf       	rjmp	.-20     	; 0x1da0 <vfprintf+0x38a>
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <vfprintf+0x3aa>
    1db6:	b7 01       	movw	r22, r14
    1db8:	80 e2       	ldi	r24, 0x20	; 32
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	3a d0       	rcall	.+116    	; 0x1e32 <fputc>
    1dbe:	3a 94       	dec	r3
    1dc0:	31 10       	cpse	r3, r1
    1dc2:	f9 cf       	rjmp	.-14     	; 0x1db6 <vfprintf+0x3a0>
    1dc4:	50 ce       	rjmp	.-864    	; 0x1a66 <vfprintf+0x50>
    1dc6:	f7 01       	movw	r30, r14
    1dc8:	26 81       	ldd	r18, Z+6	; 0x06
    1dca:	37 81       	ldd	r19, Z+7	; 0x07
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <vfprintf+0x3bc>
    1dce:	2f ef       	ldi	r18, 0xFF	; 255
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	c9 01       	movw	r24, r18
    1dd4:	2c 96       	adiw	r28, 0x0c	; 12
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	df 90       	pop	r13
    1dee:	cf 90       	pop	r12
    1df0:	bf 90       	pop	r11
    1df2:	af 90       	pop	r10
    1df4:	9f 90       	pop	r9
    1df6:	8f 90       	pop	r8
    1df8:	7f 90       	pop	r7
    1dfa:	6f 90       	pop	r6
    1dfc:	5f 90       	pop	r5
    1dfe:	4f 90       	pop	r4
    1e00:	3f 90       	pop	r3
    1e02:	2f 90       	pop	r2
    1e04:	08 95       	ret

00001e06 <strnlen_P>:
    1e06:	fc 01       	movw	r30, r24
    1e08:	05 90       	lpm	r0, Z+
    1e0a:	61 50       	subi	r22, 0x01	; 1
    1e0c:	70 40       	sbci	r23, 0x00	; 0
    1e0e:	01 10       	cpse	r0, r1
    1e10:	d8 f7       	brcc	.-10     	; 0x1e08 <strnlen_P+0x2>
    1e12:	80 95       	com	r24
    1e14:	90 95       	com	r25
    1e16:	8e 0f       	add	r24, r30
    1e18:	9f 1f       	adc	r25, r31
    1e1a:	08 95       	ret

00001e1c <strnlen>:
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	61 50       	subi	r22, 0x01	; 1
    1e20:	70 40       	sbci	r23, 0x00	; 0
    1e22:	01 90       	ld	r0, Z+
    1e24:	01 10       	cpse	r0, r1
    1e26:	d8 f7       	brcc	.-10     	; 0x1e1e <strnlen+0x2>
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	8e 0f       	add	r24, r30
    1e2e:	9f 1f       	adc	r25, r31
    1e30:	08 95       	ret

00001e32 <fputc>:
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	eb 01       	movw	r28, r22
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	81 fd       	sbrc	r24, 1
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <fputc+0x18>
    1e44:	0f ef       	ldi	r16, 0xFF	; 255
    1e46:	1f ef       	ldi	r17, 0xFF	; 255
    1e48:	1a c0       	rjmp	.+52     	; 0x1e7e <fputc+0x4c>
    1e4a:	82 ff       	sbrs	r24, 2
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <fputc+0x36>
    1e4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e50:	3f 81       	ldd	r19, Y+7	; 0x07
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	9d 81       	ldd	r25, Y+5	; 0x05
    1e56:	28 17       	cp	r18, r24
    1e58:	39 07       	cpc	r19, r25
    1e5a:	64 f4       	brge	.+24     	; 0x1e74 <fputc+0x42>
    1e5c:	e8 81       	ld	r30, Y
    1e5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e60:	01 93       	st	Z+, r16
    1e62:	f9 83       	std	Y+1, r31	; 0x01
    1e64:	e8 83       	st	Y, r30
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <fputc+0x42>
    1e68:	e8 85       	ldd	r30, Y+8	; 0x08
    1e6a:	f9 85       	ldd	r31, Y+9	; 0x09
    1e6c:	80 2f       	mov	r24, r16
    1e6e:	09 95       	icall
    1e70:	89 2b       	or	r24, r25
    1e72:	41 f7       	brne	.-48     	; 0x1e44 <fputc+0x12>
    1e74:	8e 81       	ldd	r24, Y+6	; 0x06
    1e76:	9f 81       	ldd	r25, Y+7	; 0x07
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	9f 83       	std	Y+7, r25	; 0x07
    1e7c:	8e 83       	std	Y+6, r24	; 0x06
    1e7e:	c8 01       	movw	r24, r16
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	08 95       	ret

00001e8a <__ultoa_invert>:
    1e8a:	fa 01       	movw	r30, r20
    1e8c:	aa 27       	eor	r26, r26
    1e8e:	28 30       	cpi	r18, 0x08	; 8
    1e90:	51 f1       	breq	.+84     	; 0x1ee6 <__ultoa_invert+0x5c>
    1e92:	20 31       	cpi	r18, 0x10	; 16
    1e94:	81 f1       	breq	.+96     	; 0x1ef6 <__ultoa_invert+0x6c>
    1e96:	e8 94       	clt
    1e98:	6f 93       	push	r22
    1e9a:	6e 7f       	andi	r22, 0xFE	; 254
    1e9c:	6e 5f       	subi	r22, 0xFE	; 254
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	af 4f       	sbci	r26, 0xFF	; 255
    1ea6:	b1 e0       	ldi	r27, 0x01	; 1
    1ea8:	3e d0       	rcall	.+124    	; 0x1f26 <__ultoa_invert+0x9c>
    1eaa:	b4 e0       	ldi	r27, 0x04	; 4
    1eac:	3c d0       	rcall	.+120    	; 0x1f26 <__ultoa_invert+0x9c>
    1eae:	67 0f       	add	r22, r23
    1eb0:	78 1f       	adc	r23, r24
    1eb2:	89 1f       	adc	r24, r25
    1eb4:	9a 1f       	adc	r25, r26
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	68 0f       	add	r22, r24
    1eba:	79 1f       	adc	r23, r25
    1ebc:	8a 1f       	adc	r24, r26
    1ebe:	91 1d       	adc	r25, r1
    1ec0:	a1 1d       	adc	r26, r1
    1ec2:	6a 0f       	add	r22, r26
    1ec4:	71 1d       	adc	r23, r1
    1ec6:	81 1d       	adc	r24, r1
    1ec8:	91 1d       	adc	r25, r1
    1eca:	a1 1d       	adc	r26, r1
    1ecc:	20 d0       	rcall	.+64     	; 0x1f0e <__ultoa_invert+0x84>
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <__ultoa_invert+0x48>
    1ed0:	68 94       	set
    1ed2:	3f 91       	pop	r19
    1ed4:	2a e0       	ldi	r18, 0x0A	; 10
    1ed6:	26 9f       	mul	r18, r22
    1ed8:	11 24       	eor	r1, r1
    1eda:	30 19       	sub	r19, r0
    1edc:	30 5d       	subi	r19, 0xD0	; 208
    1ede:	31 93       	st	Z+, r19
    1ee0:	de f6       	brtc	.-74     	; 0x1e98 <__ultoa_invert+0xe>
    1ee2:	cf 01       	movw	r24, r30
    1ee4:	08 95       	ret
    1ee6:	46 2f       	mov	r20, r22
    1ee8:	47 70       	andi	r20, 0x07	; 7
    1eea:	40 5d       	subi	r20, 0xD0	; 208
    1eec:	41 93       	st	Z+, r20
    1eee:	b3 e0       	ldi	r27, 0x03	; 3
    1ef0:	0f d0       	rcall	.+30     	; 0x1f10 <__ultoa_invert+0x86>
    1ef2:	c9 f7       	brne	.-14     	; 0x1ee6 <__ultoa_invert+0x5c>
    1ef4:	f6 cf       	rjmp	.-20     	; 0x1ee2 <__ultoa_invert+0x58>
    1ef6:	46 2f       	mov	r20, r22
    1ef8:	4f 70       	andi	r20, 0x0F	; 15
    1efa:	40 5d       	subi	r20, 0xD0	; 208
    1efc:	4a 33       	cpi	r20, 0x3A	; 58
    1efe:	18 f0       	brcs	.+6      	; 0x1f06 <__ultoa_invert+0x7c>
    1f00:	49 5d       	subi	r20, 0xD9	; 217
    1f02:	31 fd       	sbrc	r19, 1
    1f04:	40 52       	subi	r20, 0x20	; 32
    1f06:	41 93       	st	Z+, r20
    1f08:	02 d0       	rcall	.+4      	; 0x1f0e <__ultoa_invert+0x84>
    1f0a:	a9 f7       	brne	.-22     	; 0x1ef6 <__ultoa_invert+0x6c>
    1f0c:	ea cf       	rjmp	.-44     	; 0x1ee2 <__ultoa_invert+0x58>
    1f0e:	b4 e0       	ldi	r27, 0x04	; 4
    1f10:	a6 95       	lsr	r26
    1f12:	97 95       	ror	r25
    1f14:	87 95       	ror	r24
    1f16:	77 95       	ror	r23
    1f18:	67 95       	ror	r22
    1f1a:	ba 95       	dec	r27
    1f1c:	c9 f7       	brne	.-14     	; 0x1f10 <__ultoa_invert+0x86>
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	61 05       	cpc	r22, r1
    1f22:	71 05       	cpc	r23, r1
    1f24:	08 95       	ret
    1f26:	9b 01       	movw	r18, r22
    1f28:	ac 01       	movw	r20, r24
    1f2a:	0a 2e       	mov	r0, r26
    1f2c:	06 94       	lsr	r0
    1f2e:	57 95       	ror	r21
    1f30:	47 95       	ror	r20
    1f32:	37 95       	ror	r19
    1f34:	27 95       	ror	r18
    1f36:	ba 95       	dec	r27
    1f38:	c9 f7       	brne	.-14     	; 0x1f2c <__ultoa_invert+0xa2>
    1f3a:	62 0f       	add	r22, r18
    1f3c:	73 1f       	adc	r23, r19
    1f3e:	84 1f       	adc	r24, r20
    1f40:	95 1f       	adc	r25, r21
    1f42:	a0 1d       	adc	r26, r0
    1f44:	08 95       	ret

00001f46 <_exit>:
    1f46:	f8 94       	cli

00001f48 <__stop_program>:
    1f48:	ff cf       	rjmp	.-2      	; 0x1f48 <__stop_program>
