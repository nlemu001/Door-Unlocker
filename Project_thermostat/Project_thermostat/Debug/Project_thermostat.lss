
Project_thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000011c6  0000125a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000644  00800130  00800130  0000128a  2**0
                  ALLOC
  3 .stab         00000888  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001f4  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  00001d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000041b6  00000000  00000000  00002107  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000109a  00000000  00000000  000062bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002bed  00000000  00000000  00007357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a1c  00000000  00000000  00009f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012d7  00000000  00000000  0000a960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000032d4  00000000  00000000  0000bc37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f8  00000000  00000000  0000ef0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	51 c5       	rjmp	.+2722   	; 0xad8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ec       	ldi	r30, 0xC6	; 198
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 33       	cpi	r26, 0x30	; 48
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a0 e3       	ldi	r26, 0x30	; 48
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 37       	cpi	r26, 0x74	; 116
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	7c d3       	rcall	.+1784   	; 0x7bc <main>
      c4:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
      d0:	60 d6       	rcall	.+3264   	; 0xd92 <vTaskSuspendAll>
      d2:	40 91 30 01 	lds	r20, 0x0130
      d6:	50 91 31 01 	lds	r21, 0x0131
      da:	9e 01       	movw	r18, r28
      dc:	24 0f       	add	r18, r20
      de:	35 1f       	adc	r19, r21
      e0:	2c 3d       	cpi	r18, 0xDC	; 220
      e2:	85 e0       	ldi	r24, 0x05	; 5
      e4:	38 07       	cpc	r19, r24
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	42 17       	cp	r20, r18
      ea:	53 07       	cpc	r21, r19
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
      ee:	ea 01       	movw	r28, r20
      f0:	ce 5c       	subi	r28, 0xCE	; 206
      f2:	de 4f       	sbci	r29, 0xFE	; 254
      f4:	30 93 31 01 	sts	0x0131, r19
      f8:	20 93 30 01 	sts	0x0130, r18
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	0b d7       	rcall	.+3606   	; 0xf20 <xTaskResumeAll>
     10a:	8c 2f       	mov	r24, r28
     10c:	9d 2f       	mov	r25, r29
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <vPortFree>:
     114:	08 95       	ret

00000116 <vListInitialise>:
     116:	fc 01       	movw	r30, r24
     118:	03 96       	adiw	r24, 0x03	; 3
     11a:	92 83       	std	Z+2, r25	; 0x02
     11c:	81 83       	std	Z+1, r24	; 0x01
     11e:	2f ef       	ldi	r18, 0xFF	; 255
     120:	3f ef       	ldi	r19, 0xFF	; 255
     122:	34 83       	std	Z+4, r19	; 0x04
     124:	23 83       	std	Z+3, r18	; 0x03
     126:	96 83       	std	Z+6, r25	; 0x06
     128:	85 83       	std	Z+5, r24	; 0x05
     12a:	90 87       	std	Z+8, r25	; 0x08
     12c:	87 83       	std	Z+7, r24	; 0x07
     12e:	10 82       	st	Z, r1
     130:	08 95       	ret

00000132 <vListInitialiseItem>:
     132:	fc 01       	movw	r30, r24
     134:	11 86       	std	Z+9, r1	; 0x09
     136:	10 86       	std	Z+8, r1	; 0x08
     138:	08 95       	ret

0000013a <vListInsertEnd>:
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	fc 01       	movw	r30, r24
     140:	db 01       	movw	r26, r22
     142:	21 81       	ldd	r18, Z+1	; 0x01
     144:	32 81       	ldd	r19, Z+2	; 0x02
     146:	e9 01       	movw	r28, r18
     148:	8a 81       	ldd	r24, Y+2	; 0x02
     14a:	9b 81       	ldd	r25, Y+3	; 0x03
     14c:	13 96       	adiw	r26, 0x03	; 3
     14e:	9c 93       	st	X, r25
     150:	8e 93       	st	-X, r24
     152:	12 97       	sbiw	r26, 0x02	; 2
     154:	81 81       	ldd	r24, Z+1	; 0x01
     156:	92 81       	ldd	r25, Z+2	; 0x02
     158:	15 96       	adiw	r26, 0x05	; 5
     15a:	9c 93       	st	X, r25
     15c:	8e 93       	st	-X, r24
     15e:	14 97       	sbiw	r26, 0x04	; 4
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	ec 01       	movw	r28, r24
     166:	7d 83       	std	Y+5, r23	; 0x05
     168:	6c 83       	std	Y+4, r22	; 0x04
     16a:	e9 01       	movw	r28, r18
     16c:	7b 83       	std	Y+3, r23	; 0x03
     16e:	6a 83       	std	Y+2, r22	; 0x02
     170:	72 83       	std	Z+2, r23	; 0x02
     172:	61 83       	std	Z+1, r22	; 0x01
     174:	19 96       	adiw	r26, 0x09	; 9
     176:	fc 93       	st	X, r31
     178:	ee 93       	st	-X, r30
     17a:	18 97       	sbiw	r26, 0x08	; 8
     17c:	80 81       	ld	r24, Z
     17e:	8f 5f       	subi	r24, 0xFF	; 255
     180:	80 83       	st	Z, r24
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <vListInsert>:
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	eb 01       	movw	r28, r22
     18e:	48 81       	ld	r20, Y
     190:	59 81       	ldd	r21, Y+1	; 0x01
     192:	4f 3f       	cpi	r20, 0xFF	; 255
     194:	2f ef       	ldi	r18, 0xFF	; 255
     196:	52 07       	cpc	r21, r18
     198:	31 f4       	brne	.+12     	; 0x1a6 <vListInsert+0x1e>
     19a:	dc 01       	movw	r26, r24
     19c:	17 96       	adiw	r26, 0x07	; 7
     19e:	ed 91       	ld	r30, X+
     1a0:	fc 91       	ld	r31, X
     1a2:	18 97       	sbiw	r26, 0x08	; 8
     1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <vListInsert+0x4c>
     1a6:	fc 01       	movw	r30, r24
     1a8:	33 96       	adiw	r30, 0x03	; 3
     1aa:	dc 01       	movw	r26, r24
     1ac:	15 96       	adiw	r26, 0x05	; 5
     1ae:	2d 91       	ld	r18, X+
     1b0:	3c 91       	ld	r19, X
     1b2:	16 97       	sbiw	r26, 0x06	; 6
     1b4:	d9 01       	movw	r26, r18
     1b6:	2d 91       	ld	r18, X+
     1b8:	3c 91       	ld	r19, X
     1ba:	42 17       	cp	r20, r18
     1bc:	53 07       	cpc	r21, r19
     1be:	50 f0       	brcs	.+20     	; 0x1d4 <vListInsert+0x4c>
     1c0:	02 80       	ldd	r0, Z+2	; 0x02
     1c2:	f3 81       	ldd	r31, Z+3	; 0x03
     1c4:	e0 2d       	mov	r30, r0
     1c6:	a2 81       	ldd	r26, Z+2	; 0x02
     1c8:	b3 81       	ldd	r27, Z+3	; 0x03
     1ca:	2d 91       	ld	r18, X+
     1cc:	3c 91       	ld	r19, X
     1ce:	42 17       	cp	r20, r18
     1d0:	53 07       	cpc	r21, r19
     1d2:	b0 f7       	brcc	.-20     	; 0x1c0 <vListInsert+0x38>
     1d4:	a2 81       	ldd	r26, Z+2	; 0x02
     1d6:	b3 81       	ldd	r27, Z+3	; 0x03
     1d8:	bb 83       	std	Y+3, r27	; 0x03
     1da:	aa 83       	std	Y+2, r26	; 0x02
     1dc:	15 96       	adiw	r26, 0x05	; 5
     1de:	dc 93       	st	X, r29
     1e0:	ce 93       	st	-X, r28
     1e2:	14 97       	sbiw	r26, 0x04	; 4
     1e4:	fd 83       	std	Y+5, r31	; 0x05
     1e6:	ec 83       	std	Y+4, r30	; 0x04
     1e8:	d3 83       	std	Z+3, r29	; 0x03
     1ea:	c2 83       	std	Z+2, r28	; 0x02
     1ec:	99 87       	std	Y+9, r25	; 0x09
     1ee:	88 87       	std	Y+8, r24	; 0x08
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 81       	ld	r18, Z
     1f4:	2f 5f       	subi	r18, 0xFF	; 255
     1f6:	20 83       	st	Z, r18
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <vListRemove>:
     1fe:	fc 01       	movw	r30, r24
     200:	a2 81       	ldd	r26, Z+2	; 0x02
     202:	b3 81       	ldd	r27, Z+3	; 0x03
     204:	84 81       	ldd	r24, Z+4	; 0x04
     206:	95 81       	ldd	r25, Z+5	; 0x05
     208:	15 96       	adiw	r26, 0x05	; 5
     20a:	9c 93       	st	X, r25
     20c:	8e 93       	st	-X, r24
     20e:	14 97       	sbiw	r26, 0x04	; 4
     210:	a4 81       	ldd	r26, Z+4	; 0x04
     212:	b5 81       	ldd	r27, Z+5	; 0x05
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	13 96       	adiw	r26, 0x03	; 3
     21a:	9c 93       	st	X, r25
     21c:	8e 93       	st	-X, r24
     21e:	12 97       	sbiw	r26, 0x02	; 2
     220:	a0 85       	ldd	r26, Z+8	; 0x08
     222:	b1 85       	ldd	r27, Z+9	; 0x09
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	8d 91       	ld	r24, X+
     228:	9c 91       	ld	r25, X
     22a:	12 97       	sbiw	r26, 0x02	; 2
     22c:	8e 17       	cp	r24, r30
     22e:	9f 07       	cpc	r25, r31
     230:	31 f4       	brne	.+12     	; 0x23e <vListRemove+0x40>
     232:	84 81       	ldd	r24, Z+4	; 0x04
     234:	95 81       	ldd	r25, Z+5	; 0x05
     236:	12 96       	adiw	r26, 0x02	; 2
     238:	9c 93       	st	X, r25
     23a:	8e 93       	st	-X, r24
     23c:	11 97       	sbiw	r26, 0x01	; 1
     23e:	11 86       	std	Z+9, r1	; 0x09
     240:	10 86       	std	Z+8, r1	; 0x08
     242:	8c 91       	ld	r24, X
     244:	81 50       	subi	r24, 0x01	; 1
     246:	8c 93       	st	X, r24
     248:	08 95       	ret

0000024a <initUSART>:
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	81 f0       	breq	.+32     	; 0x26e <initUSART+0x24>
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	88 61       	ori	r24, 0x18	; 24
     256:	80 83       	st	Z, r24
     258:	e2 ec       	ldi	r30, 0xC2	; 194
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	86 60       	ori	r24, 0x06	; 6
     260:	80 83       	st	Z, r24
     262:	83 e3       	ldi	r24, 0x33	; 51
     264:	80 93 c4 00 	sts	0x00C4, r24
     268:	10 92 c5 00 	sts	0x00C5, r1
     26c:	08 95       	ret
     26e:	e9 ec       	ldi	r30, 0xC9	; 201
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     274:	88 61       	ori	r24, 0x18	; 24
     276:	80 83       	st	Z, r24
     278:	ea ec       	ldi	r30, 0xCA	; 202
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	86 60       	ori	r24, 0x06	; 6
     280:	80 83       	st	Z, r24
     282:	83 e3       	ldi	r24, 0x33	; 51
     284:	80 93 cc 00 	sts	0x00CC, r24
     288:	10 92 cd 00 	sts	0x00CD, r1
     28c:	08 95       	ret

0000028e <USART_IsSendReady>:
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	21 f0       	breq	.+8      	; 0x29a <USART_IsSendReady+0xc>
     292:	80 91 c0 00 	lds	r24, 0x00C0
     296:	80 72       	andi	r24, 0x20	; 32
     298:	08 95       	ret
     29a:	80 91 c8 00 	lds	r24, 0x00C8
     29e:	80 72       	andi	r24, 0x20	; 32
     2a0:	08 95       	ret

000002a2 <USART_HasTransmitted>:
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	21 f0       	breq	.+8      	; 0x2ae <USART_HasTransmitted+0xc>
     2a6:	80 91 c0 00 	lds	r24, 0x00C0
     2aa:	80 74       	andi	r24, 0x40	; 64
     2ac:	08 95       	ret
     2ae:	80 91 c8 00 	lds	r24, 0x00C8
     2b2:	80 74       	andi	r24, 0x40	; 64
     2b4:	08 95       	ret

000002b6 <USART_HasReceived>:
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <USART_HasReceived+0xc>
     2ba:	80 91 c0 00 	lds	r24, 0x00C0
     2be:	80 78       	andi	r24, 0x80	; 128
     2c0:	08 95       	ret
     2c2:	80 91 c8 00 	lds	r24, 0x00C8
     2c6:	80 78       	andi	r24, 0x80	; 128
     2c8:	08 95       	ret

000002ca <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     2ca:	61 30       	cpi	r22, 0x01	; 1
     2cc:	41 f0       	breq	.+16     	; 0x2de <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     2ce:	e0 ec       	ldi	r30, 0xC0	; 192
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	90 81       	ld	r25, Z
     2d4:	95 ff       	sbrs	r25, 5
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <USART_Send+0x8>
		UDR0 = sendMe;
     2d8:	80 93 c6 00 	sts	0x00C6, r24
     2dc:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     2de:	e8 ec       	ldi	r30, 0xC8	; 200
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	90 81       	ld	r25, Z
     2e4:	95 ff       	sbrs	r25, 5
     2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <USART_Send+0x18>
		UDR1 = sendMe;
     2e8:	80 93 ce 00 	sts	0x00CE, r24
     2ec:	08 95       	ret

000002ee <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	41 f0       	breq	.+16     	; 0x302 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     2f2:	e0 ec       	ldi	r30, 0xC0	; 192
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	88 23       	and	r24, r24
     2fa:	ec f7       	brge	.-6      	; 0x2f6 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     2fc:	80 91 c6 00 	lds	r24, 0x00C6
     300:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     302:	e8 ec       	ldi	r30, 0xC8	; 200
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	88 23       	and	r24, r24
     30a:	ec f7       	brge	.-6      	; 0x306 <USART_Receive+0x18>
		return UDR1;
     30c:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     310:	08 95       	ret

00000312 <num_to_sevseg>:
enum sendState 	{send_init, send} send_state;

// Helper methods
unsigned char num_to_sevseg(unsigned char input)
{
	switch(input)
     312:	85 30       	cpi	r24, 0x05	; 5
     314:	d9 f0       	breq	.+54     	; 0x34c <num_to_sevseg+0x3a>
     316:	58 f4       	brcc	.+22     	; 0x32e <num_to_sevseg+0x1c>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	91 f0       	breq	.+36     	; 0x340 <num_to_sevseg+0x2e>
     31c:	18 f4       	brcc	.+6      	; 0x324 <num_to_sevseg+0x12>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	69 f4       	brne	.+26     	; 0x33c <num_to_sevseg+0x2a>
     322:	1e c0       	rjmp	.+60     	; 0x360 <num_to_sevseg+0x4e>
     324:	83 30       	cpi	r24, 0x03	; 3
     326:	71 f0       	breq	.+28     	; 0x344 <num_to_sevseg+0x32>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	41 f4       	brne	.+16     	; 0x33c <num_to_sevseg+0x2a>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <num_to_sevseg+0x36>
     32e:	87 30       	cpi	r24, 0x07	; 7
     330:	89 f0       	breq	.+34     	; 0x354 <num_to_sevseg+0x42>
     332:	70 f0       	brcs	.+28     	; 0x350 <num_to_sevseg+0x3e>
     334:	88 30       	cpi	r24, 0x08	; 8
     336:	81 f0       	breq	.+32     	; 0x358 <num_to_sevseg+0x46>
     338:	89 30       	cpi	r24, 0x09	; 9
     33a:	81 f0       	breq	.+32     	; 0x35c <num_to_sevseg+0x4a>
	{
		case 0:
			return 0x77;
     33c:	87 e7       	ldi	r24, 0x77	; 119
     33e:	08 95       	ret
		case 1:
			return 0x14;
		case 2:
			return 0xB3;
     340:	83 eb       	ldi	r24, 0xB3	; 179
     342:	08 95       	ret
		case 3:
			return 0xB6;
     344:	86 eb       	ldi	r24, 0xB6	; 182
     346:	08 95       	ret
		case 4:
			return 0xD4;
     348:	84 ed       	ldi	r24, 0xD4	; 212
     34a:	08 95       	ret
		case 5:
			return 0xE6;
     34c:	86 ee       	ldi	r24, 0xE6	; 230
     34e:	08 95       	ret
		case 6:
			return 0xE7;
     350:	87 ee       	ldi	r24, 0xE7	; 231
     352:	08 95       	ret
		case 7:
			return 0x34;
     354:	84 e3       	ldi	r24, 0x34	; 52
     356:	08 95       	ret
		case 8:
			return 0xF7;
     358:	87 ef       	ldi	r24, 0xF7	; 247
     35a:	08 95       	ret
		case 9:
			return 0xF6;
     35c:	86 ef       	ldi	r24, 0xF6	; 246
     35e:	08 95       	ret
	switch(input)
	{
		case 0:
			return 0x77;
		case 1:
			return 0x14;
     360:	84 e1       	ldi	r24, 0x14	; 20
		case 9:
			return 0xF6;
		default:
			return 0x77;
	}
}
     362:	08 95       	ret

00000364 <transmit_data>:

void transmit_data(volatile uint8_t *port, unsigned char data, unsigned char reg) 
{
     364:	fc 01       	movw	r30, r24
	int i;
	for (i = 7; i >= 0 ; --i) {
     366:	87 e0       	ldi	r24, 0x07	; 7
     368:	90 e0       	ldi	r25, 0x00	; 0
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		if(reg == 1){*port = 0x08;}
     36a:	b8 e0       	ldi	r27, 0x08	; 8
		else {*port = 0x20;}
		// set SER = next bit of data to be sent.
		*port |= ((data >> i) & 0x01);
     36c:	70 e0       	ldi	r23, 0x00	; 0
	int i;
	for (i = 7; i >= 0 ; --i) {
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		if(reg == 1){*port = 0x08;}
		else {*port = 0x20;}
     36e:	a0 e2       	ldi	r26, 0x20	; 32
{
	int i;
	for (i = 7; i >= 0 ; --i) {
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		if(reg == 1){*port = 0x08;}
     370:	41 30       	cpi	r20, 0x01	; 1
     372:	99 f4       	brne	.+38     	; 0x39a <transmit_data+0x36>
     374:	b0 83       	st	Z, r27
		else {*port = 0x20;}
		// set SER = next bit of data to be sent.
		*port |= ((data >> i) & 0x01);
     376:	50 81       	ld	r21, Z
     378:	9b 01       	movw	r18, r22
     37a:	08 2e       	mov	r0, r24
     37c:	02 c0       	rjmp	.+4      	; 0x382 <transmit_data+0x1e>
     37e:	35 95       	asr	r19
     380:	27 95       	ror	r18
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <transmit_data+0x1a>
     386:	21 70       	andi	r18, 0x01	; 1
     388:	33 27       	eor	r19, r19
     38a:	25 2b       	or	r18, r21
     38c:	20 83       	st	Z, r18
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		*port |= 0x04;
     38e:	20 81       	ld	r18, Z
     390:	24 60       	ori	r18, 0x04	; 4
     392:	20 83       	st	Z, r18
}

void transmit_data(volatile uint8_t *port, unsigned char data, unsigned char reg) 
{
	int i;
	for (i = 7; i >= 0 ; --i) {
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	60 f7       	brcc	.-40     	; 0x370 <transmit_data+0xc>
     398:	13 c0       	rjmp	.+38     	; 0x3c0 <transmit_data+0x5c>
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		if(reg == 1){*port = 0x08;}
		else {*port = 0x20;}
     39a:	a0 83       	st	Z, r26
		// set SER = next bit of data to be sent.
		*port |= ((data >> i) & 0x01);
     39c:	50 81       	ld	r21, Z
     39e:	9b 01       	movw	r18, r22
     3a0:	08 2e       	mov	r0, r24
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <transmit_data+0x44>
     3a4:	35 95       	asr	r19
     3a6:	27 95       	ror	r18
     3a8:	0a 94       	dec	r0
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <transmit_data+0x40>
     3ac:	21 70       	andi	r18, 0x01	; 1
     3ae:	33 27       	eor	r19, r19
     3b0:	25 2b       	or	r18, r21
     3b2:	20 83       	st	Z, r18
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		*port |= 0x04;
     3b4:	20 81       	ld	r18, Z
     3b6:	24 60       	ori	r18, 0x04	; 4
     3b8:	20 83       	st	Z, r18
}

void transmit_data(volatile uint8_t *port, unsigned char data, unsigned char reg) 
{
	int i;
	for (i = 7; i >= 0 ; --i) {
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	c8 f6       	brcc	.-78     	; 0x370 <transmit_data+0xc>
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <transmit_data+0x64>
		*port |= ((data >> i) & 0x01);
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		*port |= 0x04;
	}
	// set RCLK = 1. Rising edge copies data from the ?Shift? register to the ?Storage? register
	if(reg == 1){*port |= 0x02;}
     3c0:	80 81       	ld	r24, Z
     3c2:	82 60       	ori	r24, 0x02	; 2
     3c4:	80 83       	st	Z, r24
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <transmit_data+0x6a>
	else {*port |= 0x10;}
     3c8:	80 81       	ld	r24, Z
     3ca:	80 61       	ori	r24, 0x10	; 16
     3cc:	80 83       	st	Z, r24
	// clears all lines in preparation of a new transmission
	*port = 0x00;
     3ce:	10 82       	st	Z, r1
     3d0:	08 95       	ret

000003d2 <receive_SM>:

// State Machines
void receive_SM()
{
	// SM Transitions
	switch(rec_state)
     3d2:	80 91 6c 07 	lds	r24, 0x076C
     3d6:	88 23       	and	r24, r24
     3d8:	19 f0       	breq	.+6      	; 0x3e0 <receive_SM+0xe>
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	79 f4       	brne	.+30     	; 0x3fc <receive_SM+0x2a>
     3de:	0b c0       	rjmp	.+22     	; 0x3f6 <receive_SM+0x24>
	{
		case rec_init:
			if (USART_HasReceived(0)) {rec_state = receive;}
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	69 df       	rcall	.-302    	; 0x2b6 <USART_HasReceived>
     3e4:	88 23       	and	r24, r24
     3e6:	21 f0       	breq	.+8      	; 0x3f0 <receive_SM+0x1e>
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 6c 07 	sts	0x076C, r24
     3ee:	08 c0       	rjmp	.+16     	; 0x400 <receive_SM+0x2e>
			else rec_state = rec_init;
     3f0:	10 92 6c 07 	sts	0x076C, r1
     3f4:	08 95       	ret
			break;
		case receive:
			rec_state = rec_init;
     3f6:	10 92 6c 07 	sts	0x076C, r1
			break;
     3fa:	08 95       	ret
		default:
			break;
	}
	
	// SM Actions
	switch(rec_state)
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	29 f5       	brne	.+74     	; 0x44a <receive_SM+0x78>
	{
		case rec_init:
			break;
		case receive:
			desired_temp = USART_Receive(0);
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	75 df       	rcall	.-278    	; 0x2ee <USART_Receive>
     404:	80 93 70 07 	sts	0x0770, r24
			first_digit = desired_temp / 10;
     408:	9d ec       	ldi	r25, 0xCD	; 205
     40a:	89 9f       	mul	r24, r25
     40c:	91 2d       	mov	r25, r1
     40e:	11 24       	eor	r1, r1
     410:	96 95       	lsr	r25
     412:	96 95       	lsr	r25
     414:	96 95       	lsr	r25
     416:	90 93 6a 07 	sts	0x076A, r25
			second_digit = desired_temp % 10;
     41a:	29 2f       	mov	r18, r25
     41c:	22 0f       	add	r18, r18
     41e:	32 2f       	mov	r19, r18
     420:	33 0f       	add	r19, r19
     422:	33 0f       	add	r19, r19
     424:	23 0f       	add	r18, r19
     426:	82 1b       	sub	r24, r18
     428:	80 93 6b 07 	sts	0x076B, r24
			transmit_data(&PORTB, num_to_sevseg(first_digit), 1);
     42c:	89 2f       	mov	r24, r25
     42e:	71 df       	rcall	.-286    	; 0x312 <num_to_sevseg>
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	68 2f       	mov	r22, r24
     434:	85 e2       	ldi	r24, 0x25	; 37
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	95 df       	rcall	.-214    	; 0x364 <transmit_data>
			transmit_data(&PORTB, num_to_sevseg(second_digit), 2);
     43a:	80 91 6b 07 	lds	r24, 0x076B
     43e:	69 df       	rcall	.-302    	; 0x312 <num_to_sevseg>
     440:	42 e0       	ldi	r20, 0x02	; 2
     442:	68 2f       	mov	r22, r24
     444:	85 e2       	ldi	r24, 0x25	; 37
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	8d cf       	rjmp	.-230    	; 0x364 <transmit_data>
     44a:	08 95       	ret

0000044c <RecTask>:
}

// Tasks
void RecTask() 
{
	rec_state = rec_init;
     44c:	10 92 6c 07 	sts	0x076C, r1
	first_digit = 7;
     450:	87 e0       	ldi	r24, 0x07	; 7
     452:	80 93 6a 07 	sts	0x076A, r24
	second_digit = 2;
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	80 93 6b 07 	sts	0x076B, r24
	transmit_data(&PORTB, num_to_sevseg(first_digit), 1);
     45c:	87 e0       	ldi	r24, 0x07	; 7
     45e:	59 df       	rcall	.-334    	; 0x312 <num_to_sevseg>
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	68 2f       	mov	r22, r24
     464:	85 e2       	ldi	r24, 0x25	; 37
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	7d df       	rcall	.-262    	; 0x364 <transmit_data>
	transmit_data(&PORTB, num_to_sevseg(second_digit), 2);
     46a:	80 91 6b 07 	lds	r24, 0x076B
     46e:	51 df       	rcall	.-350    	; 0x312 <num_to_sevseg>
     470:	42 e0       	ldi	r20, 0x02	; 2
     472:	68 2f       	mov	r22, r24
     474:	85 e2       	ldi	r24, 0x25	; 37
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	75 df       	rcall	.-278    	; 0x364 <transmit_data>
	
	initUSART(0);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	e6 de       	rcall	.-564    	; 0x24a <initUSART>
	for (;;) 
	{
		receive_SM();
     47e:	a9 df       	rcall	.-174    	; 0x3d2 <receive_SM>
		vTaskDelay(90);
     480:	8a e5       	ldi	r24, 0x5A	; 90
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	10 d6       	rcall	.+3104   	; 0x10a6 <vTaskDelay>
     486:	fb cf       	rjmp	.-10     	; 0x47e <RecTask+0x32>

00000488 <temp_SM>:
}

void temp_SM()
{
	// Actions
	switch(temp_state)
     488:	80 91 73 07 	lds	r24, 0x0773
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	19 f0       	breq	.+6      	; 0x496 <temp_SM+0xe>
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	69 f4       	brne	.+26     	; 0x4ae <temp_SM+0x26>
     494:	06 c0       	rjmp	.+12     	; 0x4a2 <temp_SM+0x1a>
	{
		case temp_init:
			break;
		case temp_increase:
			curr_temp = curr_temp + 1;
     496:	80 91 72 07 	lds	r24, 0x0772
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	80 93 72 07 	sts	0x0772, r24
     4a0:	18 c0       	rjmp	.+48     	; 0x4d2 <temp_SM+0x4a>
			//transmit_data(&PORTC, curr_temp, 1);
			break;
		case temp_decrease:
			curr_temp = curr_temp - 1;
     4a2:	80 91 72 07 	lds	r24, 0x0772
     4a6:	81 50       	subi	r24, 0x01	; 1
     4a8:	80 93 72 07 	sts	0x0772, r24
     4ac:	21 c0       	rjmp	.+66     	; 0x4f0 <temp_SM+0x68>
		default:
			break;
	}

	// Transitions
	switch(temp_state)
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	81 f0       	breq	.+32     	; 0x4d2 <temp_SM+0x4a>
     4b2:	18 f0       	brcs	.+6      	; 0x4ba <temp_SM+0x32>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	51 f5       	brne	.+84     	; 0x50c <temp_SM+0x84>
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <temp_SM+0x68>
	{
		case temp_init:
			if(~PINA & 0x01)
     4ba:	00 99       	sbic	0x00, 0	; 0
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <temp_SM+0x3e>
				temp_state = temp_increase;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 93 73 07 	sts	0x0773, r24
     4c4:	08 95       	ret
			else if(~PINA & 0x02)
     4c6:	01 99       	sbic	0x00, 1	; 0
     4c8:	21 c0       	rjmp	.+66     	; 0x50c <temp_SM+0x84>
				temp_state = temp_decrease;
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	80 93 73 07 	sts	0x0773, r24
     4d0:	08 95       	ret
			else
				break;
			break;
		case temp_increase:
			if(~PINA & 0x01)
     4d2:	00 99       	sbic	0x00, 0	; 0
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <temp_SM+0x56>
				temp_state = temp_increase;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 73 07 	sts	0x0773, r24
     4dc:	08 95       	ret
			else if(~PINA & 0x02)
     4de:	01 99       	sbic	0x00, 1	; 0
     4e0:	04 c0       	rjmp	.+8      	; 0x4ea <temp_SM+0x62>
				temp_state = temp_decrease;
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	80 93 73 07 	sts	0x0773, r24
     4e8:	08 95       	ret
			else
				temp_state = temp_init;
     4ea:	10 92 73 07 	sts	0x0773, r1
     4ee:	08 95       	ret
			break;
		case temp_decrease:
			if(~PINA & 0x01)
     4f0:	00 99       	sbic	0x00, 0	; 0
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <temp_SM+0x74>
				temp_state = temp_increase;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 73 07 	sts	0x0773, r24
     4fa:	08 95       	ret
			else if(~PINA & 0x02)
     4fc:	01 99       	sbic	0x00, 1	; 0
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <temp_SM+0x80>
				temp_state = temp_decrease;
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	80 93 73 07 	sts	0x0773, r24
     506:	08 95       	ret
			else
				temp_state = temp_init;
     508:	10 92 73 07 	sts	0x0773, r1
     50c:	08 95       	ret

0000050e <TempTask>:
	}
}

void TempTask()
{
	curr_temp = 72;
     50e:	88 e4       	ldi	r24, 0x48	; 72
     510:	80 93 72 07 	sts	0x0772, r24
	desired_temp = 72;
     514:	80 93 70 07 	sts	0x0770, r24
	temp_state = temp_init;
     518:	10 92 73 07 	sts	0x0773, r1
	transmit_data(&PORTC, curr_temp, 1);
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	68 e4       	ldi	r22, 0x48	; 72
     520:	88 e2       	ldi	r24, 0x28	; 40
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	1f df       	rcall	.-450    	; 0x364 <transmit_data>
	for(;;)
	{
		temp_SM();
     526:	b0 df       	rcall	.-160    	; 0x488 <temp_SM>
		transmit_data(&PORTC, curr_temp, 1);
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	60 91 72 07 	lds	r22, 0x0772
     52e:	88 e2       	ldi	r24, 0x28	; 40
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	18 df       	rcall	.-464    	; 0x364 <transmit_data>
		//transmit_data(&PORTC, 0x06, 2);
		vTaskDelay(250);
     534:	8a ef       	ldi	r24, 0xFA	; 250
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	b6 d5       	rcall	.+2924   	; 0x10a6 <vTaskDelay>
     53a:	f5 cf       	rjmp	.-22     	; 0x526 <TempTask+0x18>

0000053c <send_tick>:
}

void send_tick ()
{
	// Actions
	switch(send_state)
     53c:	80 91 71 07 	lds	r24, 0x0771
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	21 f4       	brne	.+8      	; 0x54c <send_tick+0x10>
	{
		case send_init:
			break;
		case send:
			USART_Send(fan, 0);
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	80 91 6d 07 	lds	r24, 0x076D
     54a:	bf de       	rcall	.-642    	; 0x2ca <USART_Send>
		default:
			break;
	}

	// Transitions
	switch(send_state)
     54c:	80 91 71 07 	lds	r24, 0x0771
     550:	88 23       	and	r24, r24
     552:	19 f0       	breq	.+6      	; 0x55a <send_tick+0x1e>
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	c1 f4       	brne	.+48     	; 0x588 <send_tick+0x4c>
     558:	0f c0       	rjmp	.+30     	; 0x578 <send_tick+0x3c>
	{
		case send_init:
			if (USART_IsSendReady(0) && send_byte)
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	98 de       	rcall	.-720    	; 0x28e <USART_IsSendReady>
     55e:	88 23       	and	r24, r24
     560:	41 f0       	breq	.+16     	; 0x572 <send_tick+0x36>
     562:	80 91 69 07 	lds	r24, 0x0769
     566:	88 23       	and	r24, r24
     568:	21 f0       	breq	.+8      	; 0x572 <send_tick+0x36>
				send_state = send;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 71 07 	sts	0x0771, r24
     570:	08 95       	ret
			else 
				send_state = send_init;
     572:	10 92 71 07 	sts	0x0771, r1
     576:	08 95       	ret
			break;
		case send:
			while(!USART_HasTransmitted(0)){}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	93 de       	rcall	.-730    	; 0x2a2 <USART_HasTransmitted>
     57c:	88 23       	and	r24, r24
     57e:	e1 f3       	breq	.-8      	; 0x578 <send_tick+0x3c>
			send_state = send_init;
     580:	10 92 71 07 	sts	0x0771, r1
			send_byte = false;
     584:	10 92 69 07 	sts	0x0769, r1
     588:	08 95       	ret

0000058a <SendTask>:
	}
}

void SendTask() 
{
	send_state = send_init;
     58a:	10 92 71 07 	sts	0x0771, r1
	send_byte = false;
     58e:	10 92 69 07 	sts	0x0769, r1
	initUSART(0);
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	5a de       	rcall	.-844    	; 0x24a <initUSART>
	for ( ; ; ) 
	{
		send_tick();
     596:	d2 df       	rcall	.-92     	; 0x53c <send_tick>
		vTaskDelay(300);
     598:	8c e2       	ldi	r24, 0x2C	; 44
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	84 d5       	rcall	.+2824   	; 0x10a6 <vTaskDelay>
     59e:	fb cf       	rjmp	.-10     	; 0x596 <SendTask+0xc>

000005a0 <fan_SM>:
}

void fan_SM()
{
	// Actions
	switch(fan_state)
     5a0:	80 91 68 07 	lds	r24, 0x0768
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	01 f1       	breq	.+64     	; 0x5e8 <fan_SM+0x48>
     5a8:	30 f4       	brcc	.+12     	; 0x5b6 <fan_SM+0x16>
     5aa:	88 23       	and	r24, r24
     5ac:	51 f0       	breq	.+20     	; 0x5c2 <fan_SM+0x22>
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <fan_SM+0x14>
     5b2:	48 c0       	rjmp	.+144    	; 0x644 <fan_SM+0xa4>
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <fan_SM+0x30>
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	41 f1       	breq	.+80     	; 0x60a <fan_SM+0x6a>
     5ba:	84 30       	cpi	r24, 0x04	; 4
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <fan_SM+0x20>
     5be:	42 c0       	rjmp	.+132    	; 0x644 <fan_SM+0xa4>
     5c0:	31 c0       	rjmp	.+98     	; 0x624 <fan_SM+0x84>
	{
		case fan_init:
			cnt = 0;
     5c2:	10 92 6f 07 	sts	0x076F, r1
     5c6:	10 92 6e 07 	sts	0x076E, r1
			fan = 0;
     5ca:	10 92 6d 07 	sts	0x076D, r1

			break;
     5ce:	3a c0       	rjmp	.+116    	; 0x644 <fan_SM+0xa4>
		case AC_message:
			fan = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	80 93 6d 07 	sts	0x076D, r24
			send_byte = true;
     5d6:	80 93 69 07 	sts	0x0769, r24
			PORTA = PORTA | 0x04;
     5da:	12 9a       	sbi	0x02, 2	; 2
			transmit_data(&PORTC, 0x0E, 2);
     5dc:	42 e0       	ldi	r20, 0x02	; 2
     5de:	6e e0       	ldi	r22, 0x0E	; 14
     5e0:	88 e2       	ldi	r24, 0x28	; 40
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	bf de       	rcall	.-642    	; 0x364 <transmit_data>
			break;
     5e6:	2e c0       	rjmp	.+92     	; 0x644 <fan_SM+0xa4>
		case cool_room:
			if(cnt == 20)
     5e8:	80 91 6e 07 	lds	r24, 0x076E
     5ec:	90 91 6f 07 	lds	r25, 0x076F
     5f0:	44 97       	sbiw	r24, 0x14	; 20
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <fan_SM+0x56>
     5f4:	57 c0       	rjmp	.+174    	; 0x6a4 <fan_SM+0x104>
			{
				curr_temp = curr_temp - 1;
     5f6:	80 91 72 07 	lds	r24, 0x0772
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	80 93 72 07 	sts	0x0772, r24
				cnt = 0;
     600:	10 92 6f 07 	sts	0x076F, r1
     604:	10 92 6e 07 	sts	0x076E, r1
     608:	1d c0       	rjmp	.+58     	; 0x644 <fan_SM+0xa4>
			}
			break;
		case Heat_message:
			fan = 3;
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	80 93 6d 07 	sts	0x076D, r24
			send_byte = true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 69 07 	sts	0x0769, r24
			PORTA = PORTA | 0x08;
     616:	13 9a       	sbi	0x02, 3	; 2
			transmit_data(&PORTC, 0x36, 2);
     618:	42 e0       	ldi	r20, 0x02	; 2
     61a:	66 e3       	ldi	r22, 0x36	; 54
     61c:	88 e2       	ldi	r24, 0x28	; 40
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a1 de       	rcall	.-702    	; 0x364 <transmit_data>
			break;
     622:	10 c0       	rjmp	.+32     	; 0x644 <fan_SM+0xa4>
		case heat_room:
			if(cnt == 20)
     624:	80 91 6e 07 	lds	r24, 0x076E
     628:	90 91 6f 07 	lds	r25, 0x076F
     62c:	44 97       	sbiw	r24, 0x14	; 20
     62e:	09 f0       	breq	.+2      	; 0x632 <fan_SM+0x92>
     630:	5d c0       	rjmp	.+186    	; 0x6ec <fan_SM+0x14c>
			{
				curr_temp = curr_temp + 1;
     632:	80 91 72 07 	lds	r24, 0x0772
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	80 93 72 07 	sts	0x0772, r24
				cnt = 0;
     63c:	10 92 6f 07 	sts	0x076F, r1
     640:	10 92 6e 07 	sts	0x076E, r1
		default:
			break;
	}

	// Transitions
	switch(fan_state)
     644:	80 91 68 07 	lds	r24, 0x0768
     648:	82 30       	cpi	r24, 0x02	; 2
     64a:	61 f1       	breq	.+88     	; 0x6a4 <fan_SM+0x104>
     64c:	30 f4       	brcc	.+12     	; 0x65a <fan_SM+0xba>
     64e:	88 23       	and	r24, r24
     650:	59 f0       	breq	.+22     	; 0x668 <fan_SM+0xc8>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	09 f0       	breq	.+2      	; 0x658 <fan_SM+0xb8>
     656:	6a c0       	rjmp	.+212    	; 0x72c <fan_SM+0x18c>
     658:	21 c0       	rjmp	.+66     	; 0x69c <fan_SM+0xfc>
     65a:	83 30       	cpi	r24, 0x03	; 3
     65c:	09 f4       	brne	.+2      	; 0x660 <fan_SM+0xc0>
     65e:	42 c0       	rjmp	.+132    	; 0x6e4 <fan_SM+0x144>
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	09 f0       	breq	.+2      	; 0x666 <fan_SM+0xc6>
     664:	63 c0       	rjmp	.+198    	; 0x72c <fan_SM+0x18c>
     666:	42 c0       	rjmp	.+132    	; 0x6ec <fan_SM+0x14c>
	{
		case fan_init:
			if(curr_temp >=(desired_temp + 2))
     668:	80 91 72 07 	lds	r24, 0x0772
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	20 91 70 07 	lds	r18, 0x0770
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	a9 01       	movw	r20, r18
     676:	4e 5f       	subi	r20, 0xFE	; 254
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	84 17       	cp	r24, r20
     67c:	95 07       	cpc	r25, r21
     67e:	24 f0       	brlt	.+8      	; 0x688 <fan_SM+0xe8>
				fan_state = AC_message;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 68 07 	sts	0x0768, r24
     686:	08 95       	ret
			else if(curr_temp <= (desired_temp - 2))
     688:	22 50       	subi	r18, 0x02	; 2
     68a:	31 09       	sbc	r19, r1
     68c:	28 17       	cp	r18, r24
     68e:	39 07       	cpc	r19, r25
     690:	0c f4       	brge	.+2      	; 0x694 <fan_SM+0xf4>
     692:	4c c0       	rjmp	.+152    	; 0x72c <fan_SM+0x18c>
				fan_state = Heat_message;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	80 93 68 07 	sts	0x0768, r24
     69a:	08 95       	ret
			else
				break;
			break;
		case AC_message:
			fan_state = cool_room;
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	80 93 68 07 	sts	0x0768, r24
			break;
     6a2:	08 95       	ret
		case cool_room:
			if(curr_temp > desired_temp)
     6a4:	90 91 72 07 	lds	r25, 0x0772
     6a8:	80 91 70 07 	lds	r24, 0x0770
     6ac:	89 17       	cp	r24, r25
     6ae:	50 f4       	brcc	.+20     	; 0x6c4 <fan_SM+0x124>
				cnt = cnt + 1;
     6b0:	80 91 6e 07 	lds	r24, 0x076E
     6b4:	90 91 6f 07 	lds	r25, 0x076F
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	90 93 6f 07 	sts	0x076F, r25
     6be:	80 93 6e 07 	sts	0x076E, r24
     6c2:	08 95       	ret
			else
			{
				fan = 2;
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	80 93 6d 07 	sts	0x076D, r24
				send_byte = true;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 69 07 	sts	0x0769, r24
				fan_state = fan_init;
     6d0:	10 92 68 07 	sts	0x0768, r1
				PORTA = PORTA & 0x03;
     6d4:	82 b1       	in	r24, 0x02	; 2
     6d6:	83 70       	andi	r24, 0x03	; 3
     6d8:	82 b9       	out	0x02, r24	; 2
				transmit_data(&PORTC, 0x06, 2);
     6da:	42 e0       	ldi	r20, 0x02	; 2
     6dc:	66 e0       	ldi	r22, 0x06	; 6
     6de:	88 e2       	ldi	r24, 0x28	; 40
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	40 ce       	rjmp	.-896    	; 0x364 <transmit_data>
			}
			break;
		case Heat_message:
			fan_state = heat_room;
     6e4:	84 e0       	ldi	r24, 0x04	; 4
     6e6:	80 93 68 07 	sts	0x0768, r24
			break;
     6ea:	08 95       	ret
		case heat_room:
			if(curr_temp < desired_temp)
     6ec:	90 91 72 07 	lds	r25, 0x0772
     6f0:	80 91 70 07 	lds	r24, 0x0770
     6f4:	98 17       	cp	r25, r24
     6f6:	50 f4       	brcc	.+20     	; 0x70c <fan_SM+0x16c>
				cnt = cnt + 1;
     6f8:	80 91 6e 07 	lds	r24, 0x076E
     6fc:	90 91 6f 07 	lds	r25, 0x076F
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	90 93 6f 07 	sts	0x076F, r25
     706:	80 93 6e 07 	sts	0x076E, r24
     70a:	08 95       	ret
			else
			{
				fan = 4;
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	80 93 6d 07 	sts	0x076D, r24
				send_byte = true;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	80 93 69 07 	sts	0x0769, r24
				fan_state = fan_init;
     718:	10 92 68 07 	sts	0x0768, r1
				PORTA = PORTA & 0x03;
     71c:	82 b1       	in	r24, 0x02	; 2
     71e:	83 70       	andi	r24, 0x03	; 3
     720:	82 b9       	out	0x02, r24	; 2
				transmit_data(&PORTC, 0x06, 2);
     722:	42 e0       	ldi	r20, 0x02	; 2
     724:	66 e0       	ldi	r22, 0x06	; 6
     726:	88 e2       	ldi	r24, 0x28	; 40
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	1c ce       	rjmp	.-968    	; 0x364 <transmit_data>
     72c:	08 95       	ret

0000072e <FanTask>:
	}
}

void FanTask()
{
	fan_state = fan_init;
     72e:	10 92 68 07 	sts	0x0768, r1
	cnt = 0;
     732:	10 92 6f 07 	sts	0x076F, r1
     736:	10 92 6e 07 	sts	0x076E, r1
	for(;;)
	{
		fan_SM();
     73a:	32 df       	rcall	.-412    	; 0x5a0 <fan_SM>
		vTaskDelay(500);
     73c:	84 ef       	ldi	r24, 0xF4	; 244
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	b2 d4       	rcall	.+2404   	; 0x10a6 <vTaskDelay>
     742:	fb cf       	rjmp	.-10     	; 0x73a <FanTask+0xc>

00000744 <StartSecPulse>:
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	cf 93       	push	r28
	//xTaskCreate(LedSecTask, (signed portCHAR *)"LedSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
	xTaskCreate(RecTask, 	(signed portCHAR *)"RecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     754:	a1 2c       	mov	r10, r1
     756:	b1 2c       	mov	r11, r1
     758:	c1 2c       	mov	r12, r1
     75a:	d1 2c       	mov	r13, r1
     75c:	e1 2c       	mov	r14, r1
     75e:	f1 2c       	mov	r15, r1
     760:	08 2f       	mov	r16, r24
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	45 e5       	ldi	r20, 0x55	; 85
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	68 e0       	ldi	r22, 0x08	; 8
     76c:	71 e0       	ldi	r23, 0x01	; 1
     76e:	86 e2       	ldi	r24, 0x26	; 38
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	e9 d1       	rcall	.+978    	; 0xb46 <xTaskGenericCreate>
	xTaskCreate(SendTask, 		(signed portCHAR *)"SendTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	45 e5       	ldi	r20, 0x55	; 85
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	60 e1       	ldi	r22, 0x10	; 16
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	85 ec       	ldi	r24, 0xC5	; 197
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	e0 d1       	rcall	.+960    	; 0xb46 <xTaskGenericCreate>
	xTaskCreate(TempTask,	(signed portCHAR *)"TempTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	45 e5       	ldi	r20, 0x55	; 85
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	69 e1       	ldi	r22, 0x19	; 25
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	87 e8       	ldi	r24, 0x87	; 135
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	d7 d1       	rcall	.+942    	; 0xb46 <xTaskGenericCreate>
	xTaskCreate(FanTask,	(signed portCHAR *)"FanTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	45 e5       	ldi	r20, 0x55	; 85
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	62 e2       	ldi	r22, 0x22	; 34
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	87 e9       	ldi	r24, 0x97	; 151
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	ce d1       	rcall	.+924    	; 0xb46 <xTaskGenericCreate>
}	
     7aa:	cf 91       	pop	r28
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	08 95       	ret

000007bc <main>:

int main(void) 
{ 
   DDRA = 0xFC; PORTA=0x03;
     7bc:	8c ef       	ldi	r24, 0xFC	; 252
     7be:	81 b9       	out	0x01, r24	; 1
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	82 b9       	out	0x02, r24	; 2
   DDRB = 0xFF; PORTB=0x00;
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	84 b9       	out	0x04, r24	; 4
     7c8:	15 b8       	out	0x05, r1	; 5
   DDRC = 0xFF; PORTC=0x00;
     7ca:	87 b9       	out	0x07, r24	; 7
     7cc:	18 b8       	out	0x08, r1	; 8
   
   //Start Tasks  
   StartSecPulse(1);
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	b9 df       	rcall	.-142    	; 0x744 <StartSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
     7d2:	b6 d2       	rcall	.+1388   	; 0xd40 <vTaskStartScheduler>
 
   return 0; 
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	08 95       	ret

000007da <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     7da:	31 e1       	ldi	r19, 0x11	; 17
     7dc:	fc 01       	movw	r30, r24
     7de:	30 83       	st	Z, r19
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	22 e2       	ldi	r18, 0x22	; 34
     7e4:	20 83       	st	Z, r18
     7e6:	fc 01       	movw	r30, r24
     7e8:	32 97       	sbiw	r30, 0x02	; 2
     7ea:	a3 e3       	ldi	r26, 0x33	; 51
     7ec:	a0 83       	st	Z, r26
     7ee:	fc 01       	movw	r30, r24
     7f0:	33 97       	sbiw	r30, 0x03	; 3
     7f2:	60 83       	st	Z, r22
     7f4:	fc 01       	movw	r30, r24
     7f6:	34 97       	sbiw	r30, 0x04	; 4
     7f8:	70 83       	st	Z, r23
     7fa:	fc 01       	movw	r30, r24
     7fc:	35 97       	sbiw	r30, 0x05	; 5
     7fe:	10 82       	st	Z, r1
     800:	fc 01       	movw	r30, r24
     802:	36 97       	sbiw	r30, 0x06	; 6
     804:	60 e8       	ldi	r22, 0x80	; 128
     806:	60 83       	st	Z, r22
     808:	fc 01       	movw	r30, r24
     80a:	37 97       	sbiw	r30, 0x07	; 7
     80c:	10 82       	st	Z, r1
     80e:	fc 01       	movw	r30, r24
     810:	38 97       	sbiw	r30, 0x08	; 8
     812:	62 e0       	ldi	r22, 0x02	; 2
     814:	60 83       	st	Z, r22
     816:	fc 01       	movw	r30, r24
     818:	39 97       	sbiw	r30, 0x09	; 9
     81a:	63 e0       	ldi	r22, 0x03	; 3
     81c:	60 83       	st	Z, r22
     81e:	fc 01       	movw	r30, r24
     820:	3a 97       	sbiw	r30, 0x0a	; 10
     822:	64 e0       	ldi	r22, 0x04	; 4
     824:	60 83       	st	Z, r22
     826:	fc 01       	movw	r30, r24
     828:	3b 97       	sbiw	r30, 0x0b	; 11
     82a:	65 e0       	ldi	r22, 0x05	; 5
     82c:	60 83       	st	Z, r22
     82e:	fc 01       	movw	r30, r24
     830:	3c 97       	sbiw	r30, 0x0c	; 12
     832:	66 e0       	ldi	r22, 0x06	; 6
     834:	60 83       	st	Z, r22
     836:	fc 01       	movw	r30, r24
     838:	3d 97       	sbiw	r30, 0x0d	; 13
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	60 83       	st	Z, r22
     83e:	fc 01       	movw	r30, r24
     840:	3e 97       	sbiw	r30, 0x0e	; 14
     842:	68 e0       	ldi	r22, 0x08	; 8
     844:	60 83       	st	Z, r22
     846:	fc 01       	movw	r30, r24
     848:	3f 97       	sbiw	r30, 0x0f	; 15
     84a:	69 e0       	ldi	r22, 0x09	; 9
     84c:	60 83       	st	Z, r22
     84e:	fc 01       	movw	r30, r24
     850:	70 97       	sbiw	r30, 0x10	; 16
     852:	60 e1       	ldi	r22, 0x10	; 16
     854:	60 83       	st	Z, r22
     856:	fc 01       	movw	r30, r24
     858:	71 97       	sbiw	r30, 0x11	; 17
     85a:	30 83       	st	Z, r19
     85c:	fc 01       	movw	r30, r24
     85e:	72 97       	sbiw	r30, 0x12	; 18
     860:	32 e1       	ldi	r19, 0x12	; 18
     862:	30 83       	st	Z, r19
     864:	fc 01       	movw	r30, r24
     866:	73 97       	sbiw	r30, 0x13	; 19
     868:	33 e1       	ldi	r19, 0x13	; 19
     86a:	30 83       	st	Z, r19
     86c:	fc 01       	movw	r30, r24
     86e:	74 97       	sbiw	r30, 0x14	; 20
     870:	34 e1       	ldi	r19, 0x14	; 20
     872:	30 83       	st	Z, r19
     874:	fc 01       	movw	r30, r24
     876:	75 97       	sbiw	r30, 0x15	; 21
     878:	35 e1       	ldi	r19, 0x15	; 21
     87a:	30 83       	st	Z, r19
     87c:	fc 01       	movw	r30, r24
     87e:	76 97       	sbiw	r30, 0x16	; 22
     880:	36 e1       	ldi	r19, 0x16	; 22
     882:	30 83       	st	Z, r19
     884:	fc 01       	movw	r30, r24
     886:	77 97       	sbiw	r30, 0x17	; 23
     888:	37 e1       	ldi	r19, 0x17	; 23
     88a:	30 83       	st	Z, r19
     88c:	fc 01       	movw	r30, r24
     88e:	78 97       	sbiw	r30, 0x18	; 24
     890:	38 e1       	ldi	r19, 0x18	; 24
     892:	30 83       	st	Z, r19
     894:	fc 01       	movw	r30, r24
     896:	79 97       	sbiw	r30, 0x19	; 25
     898:	39 e1       	ldi	r19, 0x19	; 25
     89a:	30 83       	st	Z, r19
     89c:	fc 01       	movw	r30, r24
     89e:	7a 97       	sbiw	r30, 0x1a	; 26
     8a0:	30 e2       	ldi	r19, 0x20	; 32
     8a2:	30 83       	st	Z, r19
     8a4:	fc 01       	movw	r30, r24
     8a6:	7b 97       	sbiw	r30, 0x1b	; 27
     8a8:	31 e2       	ldi	r19, 0x21	; 33
     8aa:	30 83       	st	Z, r19
     8ac:	fc 01       	movw	r30, r24
     8ae:	7c 97       	sbiw	r30, 0x1c	; 28
     8b0:	20 83       	st	Z, r18
     8b2:	fc 01       	movw	r30, r24
     8b4:	7d 97       	sbiw	r30, 0x1d	; 29
     8b6:	23 e2       	ldi	r18, 0x23	; 35
     8b8:	20 83       	st	Z, r18
     8ba:	fc 01       	movw	r30, r24
     8bc:	7e 97       	sbiw	r30, 0x1e	; 30
     8be:	40 83       	st	Z, r20
     8c0:	fc 01       	movw	r30, r24
     8c2:	7f 97       	sbiw	r30, 0x1f	; 31
     8c4:	50 83       	st	Z, r21
     8c6:	fc 01       	movw	r30, r24
     8c8:	b0 97       	sbiw	r30, 0x20	; 32
     8ca:	26 e2       	ldi	r18, 0x26	; 38
     8cc:	20 83       	st	Z, r18
     8ce:	fc 01       	movw	r30, r24
     8d0:	b1 97       	sbiw	r30, 0x21	; 33
     8d2:	27 e2       	ldi	r18, 0x27	; 39
     8d4:	20 83       	st	Z, r18
     8d6:	fc 01       	movw	r30, r24
     8d8:	b2 97       	sbiw	r30, 0x22	; 34
     8da:	28 e2       	ldi	r18, 0x28	; 40
     8dc:	20 83       	st	Z, r18
     8de:	fc 01       	movw	r30, r24
     8e0:	b3 97       	sbiw	r30, 0x23	; 35
     8e2:	29 e2       	ldi	r18, 0x29	; 41
     8e4:	20 83       	st	Z, r18
     8e6:	fc 01       	movw	r30, r24
     8e8:	b4 97       	sbiw	r30, 0x24	; 36
     8ea:	20 e3       	ldi	r18, 0x30	; 48
     8ec:	20 83       	st	Z, r18
     8ee:	fc 01       	movw	r30, r24
     8f0:	b5 97       	sbiw	r30, 0x25	; 37
     8f2:	21 e3       	ldi	r18, 0x31	; 49
     8f4:	20 83       	st	Z, r18
     8f6:	9c 01       	movw	r18, r24
     8f8:	26 52       	subi	r18, 0x26	; 38
     8fa:	31 09       	sbc	r19, r1
     8fc:	82 2f       	mov	r24, r18
     8fe:	93 2f       	mov	r25, r19
     900:	08 95       	ret

00000902 <xPortStartScheduler>:
     902:	10 92 89 00 	sts	0x0089, r1
     906:	8c e7       	ldi	r24, 0x7C	; 124
     908:	80 93 88 00 	sts	0x0088, r24
     90c:	8b e0       	ldi	r24, 0x0B	; 11
     90e:	80 93 81 00 	sts	0x0081, r24
     912:	ef e6       	ldi	r30, 0x6F	; 111
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	82 60       	ori	r24, 0x02	; 2
     91a:	80 83       	st	Z, r24
     91c:	a0 91 1c 07 	lds	r26, 0x071C
     920:	b0 91 1d 07 	lds	r27, 0x071D
     924:	cd 91       	ld	r28, X+
     926:	cd bf       	out	0x3d, r28	; 61
     928:	dd 91       	ld	r29, X+
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	ff 91       	pop	r31
     92e:	ef 91       	pop	r30
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	bf 90       	pop	r11
     956:	af 90       	pop	r10
     958:	9f 90       	pop	r9
     95a:	8f 90       	pop	r8
     95c:	7f 90       	pop	r7
     95e:	6f 90       	pop	r6
     960:	5f 90       	pop	r5
     962:	4f 90       	pop	r4
     964:	3f 90       	pop	r3
     966:	2f 90       	pop	r2
     968:	1f 90       	pop	r1
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	08 95       	ret
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	08 95       	ret

00000976 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	0f 92       	push	r0
     97e:	1f 92       	push	r1
     980:	11 24       	eor	r1, r1
     982:	2f 92       	push	r2
     984:	3f 92       	push	r3
     986:	4f 92       	push	r4
     988:	5f 92       	push	r5
     98a:	6f 92       	push	r6
     98c:	7f 92       	push	r7
     98e:	8f 92       	push	r8
     990:	9f 92       	push	r9
     992:	af 92       	push	r10
     994:	bf 92       	push	r11
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	2f 93       	push	r18
     9a4:	3f 93       	push	r19
     9a6:	4f 93       	push	r20
     9a8:	5f 93       	push	r21
     9aa:	6f 93       	push	r22
     9ac:	7f 93       	push	r23
     9ae:	8f 93       	push	r24
     9b0:	9f 93       	push	r25
     9b2:	af 93       	push	r26
     9b4:	bf 93       	push	r27
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
     9be:	a0 91 1c 07 	lds	r26, 0x071C
     9c2:	b0 91 1d 07 	lds	r27, 0x071D
     9c6:	0d b6       	in	r0, 0x3d	; 61
     9c8:	0d 92       	st	X+, r0
     9ca:	0e b6       	in	r0, 0x3e	; 62
     9cc:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     9ce:	86 d3       	rcall	.+1804   	; 0x10dc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     9d0:	a0 91 1c 07 	lds	r26, 0x071C
     9d4:	b0 91 1d 07 	lds	r27, 0x071D
     9d8:	cd 91       	ld	r28, X+
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	dd 91       	ld	r29, X+
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	ff 91       	pop	r31
     9e2:	ef 91       	pop	r30
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	bf 91       	pop	r27
     9ea:	af 91       	pop	r26
     9ec:	9f 91       	pop	r25
     9ee:	8f 91       	pop	r24
     9f0:	7f 91       	pop	r23
     9f2:	6f 91       	pop	r22
     9f4:	5f 91       	pop	r21
     9f6:	4f 91       	pop	r20
     9f8:	3f 91       	pop	r19
     9fa:	2f 91       	pop	r18
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	7f 90       	pop	r7
     a12:	6f 90       	pop	r6
     a14:	5f 90       	pop	r5
     a16:	4f 90       	pop	r4
     a18:	3f 90       	pop	r3
     a1a:	2f 90       	pop	r2
     a1c:	1f 90       	pop	r1
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a24:	08 95       	ret

00000a26 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	0f 92       	push	r0
     a2e:	1f 92       	push	r1
     a30:	11 24       	eor	r1, r1
     a32:	2f 92       	push	r2
     a34:	3f 92       	push	r3
     a36:	4f 92       	push	r4
     a38:	5f 92       	push	r5
     a3a:	6f 92       	push	r6
     a3c:	7f 92       	push	r7
     a3e:	8f 92       	push	r8
     a40:	9f 92       	push	r9
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
     a6e:	a0 91 1c 07 	lds	r26, 0x071C
     a72:	b0 91 1d 07 	lds	r27, 0x071D
     a76:	0d b6       	in	r0, 0x3d	; 61
     a78:	0d 92       	st	X+, r0
     a7a:	0e b6       	in	r0, 0x3e	; 62
     a7c:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     a7e:	8f d1       	rcall	.+798    	; 0xd9e <vTaskIncrementTick>
	vTaskSwitchContext();
     a80:	2d d3       	rcall	.+1626   	; 0x10dc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     a82:	a0 91 1c 07 	lds	r26, 0x071C
     a86:	b0 91 1d 07 	lds	r27, 0x071D
     a8a:	cd 91       	ld	r28, X+
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	dd 91       	ld	r29, X+
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	bf 91       	pop	r27
     a9c:	af 91       	pop	r26
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	7f 91       	pop	r23
     aa4:	6f 91       	pop	r22
     aa6:	5f 91       	pop	r21
     aa8:	4f 91       	pop	r20
     aaa:	3f 91       	pop	r19
     aac:	2f 91       	pop	r18
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	9f 90       	pop	r9
     ac0:	8f 90       	pop	r8
     ac2:	7f 90       	pop	r7
     ac4:	6f 90       	pop	r6
     ac6:	5f 90       	pop	r5
     ac8:	4f 90       	pop	r4
     aca:	3f 90       	pop	r3
     acc:	2f 90       	pop	r2
     ace:	1f 90       	pop	r1
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ad6:	08 95       	ret

00000ad8 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     ad8:	a6 df       	rcall	.-180    	; 0xa26 <vPortYieldFromTick>
		asm volatile ( "reti" );
     ada:	18 95       	reti

00000adc <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	e0 91 1c 07 	lds	r30, 0x071C
     ae6:	f0 91 1d 07 	lds	r31, 0x071D
     aea:	93 83       	std	Z+3, r25	; 0x03
     aec:	82 83       	std	Z+2, r24	; 0x02
     aee:	80 91 14 07 	lds	r24, 0x0714
     af2:	90 91 15 07 	lds	r25, 0x0715
     af6:	c8 17       	cp	r28, r24
     af8:	d9 07       	cpc	r29, r25
     afa:	60 f4       	brcc	.+24     	; 0xb14 <prvAddCurrentTaskToDelayedList+0x38>
     afc:	60 91 1c 07 	lds	r22, 0x071C
     b00:	70 91 1d 07 	lds	r23, 0x071D
     b04:	80 91 18 07 	lds	r24, 0x0718
     b08:	90 91 19 07 	lds	r25, 0x0719
     b0c:	6e 5f       	subi	r22, 0xFE	; 254
     b0e:	7f 4f       	sbci	r23, 0xFF	; 255
     b10:	3b db       	rcall	.-2442   	; 0x188 <vListInsert>
     b12:	16 c0       	rjmp	.+44     	; 0xb40 <prvAddCurrentTaskToDelayedList+0x64>
     b14:	60 91 1c 07 	lds	r22, 0x071C
     b18:	70 91 1d 07 	lds	r23, 0x071D
     b1c:	80 91 1a 07 	lds	r24, 0x071A
     b20:	90 91 1b 07 	lds	r25, 0x071B
     b24:	6e 5f       	subi	r22, 0xFE	; 254
     b26:	7f 4f       	sbci	r23, 0xFF	; 255
     b28:	2f db       	rcall	.-2466   	; 0x188 <vListInsert>
     b2a:	80 91 06 01 	lds	r24, 0x0106
     b2e:	90 91 07 01 	lds	r25, 0x0107
     b32:	c8 17       	cp	r28, r24
     b34:	d9 07       	cpc	r29, r25
     b36:	20 f4       	brcc	.+8      	; 0xb40 <prvAddCurrentTaskToDelayedList+0x64>
     b38:	d0 93 07 01 	sts	0x0107, r29
     b3c:	c0 93 06 01 	sts	0x0106, r28
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <xTaskGenericCreate>:
     b46:	4f 92       	push	r4
     b48:	5f 92       	push	r5
     b4a:	6f 92       	push	r6
     b4c:	7f 92       	push	r7
     b4e:	8f 92       	push	r8
     b50:	9f 92       	push	r9
     b52:	af 92       	push	r10
     b54:	bf 92       	push	r11
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	4c 01       	movw	r8, r24
     b68:	3b 01       	movw	r6, r22
     b6a:	5a 01       	movw	r10, r20
     b6c:	29 01       	movw	r4, r18
     b6e:	81 e2       	ldi	r24, 0x21	; 33
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	ab da       	rcall	.-2730   	; 0xca <pvPortMalloc>
     b74:	ec 01       	movw	r28, r24
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	09 f4       	brne	.+2      	; 0xb7c <xTaskGenericCreate+0x36>
     b7a:	d0 c0       	rjmp	.+416    	; 0xd1c <xTaskGenericCreate+0x1d6>
     b7c:	c1 14       	cp	r12, r1
     b7e:	d1 04       	cpc	r13, r1
     b80:	09 f0       	breq	.+2      	; 0xb84 <xTaskGenericCreate+0x3e>
     b82:	c9 c0       	rjmp	.+402    	; 0xd16 <xTaskGenericCreate+0x1d0>
     b84:	c5 01       	movw	r24, r10
     b86:	a1 da       	rcall	.-2750   	; 0xca <pvPortMalloc>
     b88:	6c 01       	movw	r12, r24
     b8a:	98 8f       	std	Y+24, r25	; 0x18
     b8c:	8f 8b       	std	Y+23, r24	; 0x17
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	19 f4       	brne	.+6      	; 0xb98 <xTaskGenericCreate+0x52>
     b92:	ce 01       	movw	r24, r28
     b94:	bf da       	rcall	.-2690   	; 0x114 <vPortFree>
     b96:	c2 c0       	rjmp	.+388    	; 0xd1c <xTaskGenericCreate+0x1d6>
     b98:	a5 01       	movw	r20, r10
     b9a:	65 ea       	ldi	r22, 0xA5	; 165
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	c6 01       	movw	r24, r12
     ba0:	fa d2       	rcall	.+1524   	; 0x1196 <memset>
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	a8 1a       	sub	r10, r24
     ba6:	b1 08       	sbc	r11, r1
     ba8:	8f 89       	ldd	r24, Y+23	; 0x17
     baa:	98 8d       	ldd	r25, Y+24	; 0x18
     bac:	a8 0e       	add	r10, r24
     bae:	b9 1e       	adc	r11, r25
     bb0:	48 e0       	ldi	r20, 0x08	; 8
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	b3 01       	movw	r22, r6
     bb6:	ce 01       	movw	r24, r28
     bb8:	49 96       	adiw	r24, 0x19	; 25
     bba:	f4 d2       	rcall	.+1512   	; 0x11a4 <strncpy>
     bbc:	18 a2       	std	Y+32, r1	; 0x20
     bbe:	10 2f       	mov	r17, r16
     bc0:	04 30       	cpi	r16, 0x04	; 4
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <xTaskGenericCreate+0x80>
     bc4:	13 e0       	ldi	r17, 0x03	; 3
     bc6:	1e 8b       	std	Y+22, r17	; 0x16
     bc8:	6e 01       	movw	r12, r28
     bca:	e2 e0       	ldi	r30, 0x02	; 2
     bcc:	ce 0e       	add	r12, r30
     bce:	d1 1c       	adc	r13, r1
     bd0:	c6 01       	movw	r24, r12
     bd2:	af da       	rcall	.-2722   	; 0x132 <vListInitialiseItem>
     bd4:	ce 01       	movw	r24, r28
     bd6:	0c 96       	adiw	r24, 0x0c	; 12
     bd8:	ac da       	rcall	.-2728   	; 0x132 <vListInitialiseItem>
     bda:	d9 87       	std	Y+9, r29	; 0x09
     bdc:	c8 87       	std	Y+8, r28	; 0x08
     bde:	84 e0       	ldi	r24, 0x04	; 4
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	81 1b       	sub	r24, r17
     be4:	91 09       	sbc	r25, r1
     be6:	9d 87       	std	Y+13, r25	; 0x0d
     be8:	8c 87       	std	Y+12, r24	; 0x0c
     bea:	db 8b       	std	Y+19, r29	; 0x13
     bec:	ca 8b       	std	Y+18, r28	; 0x12
     bee:	a2 01       	movw	r20, r4
     bf0:	b4 01       	movw	r22, r8
     bf2:	c5 01       	movw	r24, r10
     bf4:	f2 dd       	rcall	.-1052   	; 0x7da <pxPortInitialiseStack>
     bf6:	99 83       	std	Y+1, r25	; 0x01
     bf8:	88 83       	st	Y, r24
     bfa:	e1 14       	cp	r14, r1
     bfc:	f1 04       	cpc	r15, r1
     bfe:	19 f0       	breq	.+6      	; 0xc06 <xTaskGenericCreate+0xc0>
     c00:	f7 01       	movw	r30, r14
     c02:	d1 83       	std	Z+1, r29	; 0x01
     c04:	c0 83       	st	Z, r28
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	0f 92       	push	r0
     c0c:	80 91 16 07 	lds	r24, 0x0716
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 93 16 07 	sts	0x0716, r24
     c16:	80 91 1c 07 	lds	r24, 0x071C
     c1a:	90 91 1d 07 	lds	r25, 0x071D
     c1e:	89 2b       	or	r24, r25
     c20:	b9 f5       	brne	.+110    	; 0xc90 <xTaskGenericCreate+0x14a>
     c22:	d0 93 1d 07 	sts	0x071D, r29
     c26:	c0 93 1c 07 	sts	0x071C, r28
     c2a:	80 91 16 07 	lds	r24, 0x0716
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	09 f0       	breq	.+2      	; 0xc34 <xTaskGenericCreate+0xee>
     c32:	3d c0       	rjmp	.+122    	; 0xcae <xTaskGenericCreate+0x168>
     c34:	e1 2c       	mov	r14, r1
     c36:	f1 2c       	mov	r15, r1
     c38:	c7 01       	movw	r24, r14
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	8e 0d       	add	r24, r14
     c48:	9f 1d       	adc	r25, r15
     c4a:	80 5e       	subi	r24, 0xE0	; 224
     c4c:	98 4f       	sbci	r25, 0xF8	; 248
     c4e:	63 da       	rcall	.-2874   	; 0x116 <vListInitialise>
     c50:	ff ef       	ldi	r31, 0xFF	; 255
     c52:	ef 1a       	sub	r14, r31
     c54:	ff 0a       	sbc	r15, r31
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	e8 16       	cp	r14, r24
     c5a:	f1 04       	cpc	r15, r1
     c5c:	69 f7       	brne	.-38     	; 0xc38 <xTaskGenericCreate+0xf2>
     c5e:	84 e4       	ldi	r24, 0x44	; 68
     c60:	97 e0       	ldi	r25, 0x07	; 7
     c62:	59 da       	rcall	.-2894   	; 0x116 <vListInitialise>
     c64:	8d e4       	ldi	r24, 0x4D	; 77
     c66:	97 e0       	ldi	r25, 0x07	; 7
     c68:	56 da       	rcall	.-2900   	; 0x116 <vListInitialise>
     c6a:	86 e5       	ldi	r24, 0x56	; 86
     c6c:	97 e0       	ldi	r25, 0x07	; 7
     c6e:	53 da       	rcall	.-2906   	; 0x116 <vListInitialise>
     c70:	8f e5       	ldi	r24, 0x5F	; 95
     c72:	97 e0       	ldi	r25, 0x07	; 7
     c74:	50 da       	rcall	.-2912   	; 0x116 <vListInitialise>
     c76:	84 e4       	ldi	r24, 0x44	; 68
     c78:	97 e0       	ldi	r25, 0x07	; 7
     c7a:	90 93 1b 07 	sts	0x071B, r25
     c7e:	80 93 1a 07 	sts	0x071A, r24
     c82:	8d e4       	ldi	r24, 0x4D	; 77
     c84:	97 e0       	ldi	r25, 0x07	; 7
     c86:	90 93 19 07 	sts	0x0719, r25
     c8a:	80 93 18 07 	sts	0x0718, r24
     c8e:	0f c0       	rjmp	.+30     	; 0xcae <xTaskGenericCreate+0x168>
     c90:	80 91 12 07 	lds	r24, 0x0712
     c94:	81 11       	cpse	r24, r1
     c96:	0b c0       	rjmp	.+22     	; 0xcae <xTaskGenericCreate+0x168>
     c98:	e0 91 1c 07 	lds	r30, 0x071C
     c9c:	f0 91 1d 07 	lds	r31, 0x071D
     ca0:	86 89       	ldd	r24, Z+22	; 0x16
     ca2:	08 17       	cp	r16, r24
     ca4:	20 f0       	brcs	.+8      	; 0xcae <xTaskGenericCreate+0x168>
     ca6:	d0 93 1d 07 	sts	0x071D, r29
     caa:	c0 93 1c 07 	sts	0x071C, r28
     cae:	8e 89       	ldd	r24, Y+22	; 0x16
     cb0:	90 91 1e 07 	lds	r25, 0x071E
     cb4:	98 17       	cp	r25, r24
     cb6:	10 f4       	brcc	.+4      	; 0xcbc <xTaskGenericCreate+0x176>
     cb8:	80 93 1e 07 	sts	0x071E, r24
     cbc:	90 91 1f 07 	lds	r25, 0x071F
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	90 93 1f 07 	sts	0x071F, r25
     cc6:	90 91 13 07 	lds	r25, 0x0713
     cca:	98 17       	cp	r25, r24
     ccc:	10 f4       	brcc	.+4      	; 0xcd2 <xTaskGenericCreate+0x18c>
     cce:	80 93 13 07 	sts	0x0713, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9c 01       	movw	r18, r24
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	82 0f       	add	r24, r18
     ce4:	93 1f       	adc	r25, r19
     ce6:	b6 01       	movw	r22, r12
     ce8:	80 5e       	subi	r24, 0xE0	; 224
     cea:	98 4f       	sbci	r25, 0xF8	; 248
     cec:	26 da       	rcall	.-2996   	; 0x13a <vListInsertEnd>
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	80 91 12 07 	lds	r24, 0x0712
     cf6:	88 23       	and	r24, r24
     cf8:	51 f0       	breq	.+20     	; 0xd0e <xTaskGenericCreate+0x1c8>
     cfa:	e0 91 1c 07 	lds	r30, 0x071C
     cfe:	f0 91 1d 07 	lds	r31, 0x071D
     d02:	86 89       	ldd	r24, Z+22	; 0x16
     d04:	80 17       	cp	r24, r16
     d06:	28 f4       	brcc	.+10     	; 0xd12 <xTaskGenericCreate+0x1cc>
     d08:	36 de       	rcall	.-916    	; 0x976 <vPortYield>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 c0       	rjmp	.+16     	; 0xd1e <xTaskGenericCreate+0x1d8>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	06 c0       	rjmp	.+12     	; 0xd1e <xTaskGenericCreate+0x1d8>
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <xTaskGenericCreate+0x1d8>
     d16:	d8 8e       	std	Y+24, r13	; 0x18
     d18:	cf 8a       	std	Y+23, r12	; 0x17
     d1a:	3e cf       	rjmp	.-388    	; 0xb98 <xTaskGenericCreate+0x52>
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	7f 90       	pop	r7
     d38:	6f 90       	pop	r6
     d3a:	5f 90       	pop	r5
     d3c:	4f 90       	pop	r4
     d3e:	08 95       	ret

00000d40 <vTaskStartScheduler>:
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	a1 2c       	mov	r10, r1
     d50:	b1 2c       	mov	r11, r1
     d52:	c1 2c       	mov	r12, r1
     d54:	d1 2c       	mov	r13, r1
     d56:	e1 2c       	mov	r14, r1
     d58:	f1 2c       	mov	r15, r1
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	45 e5       	ldi	r20, 0x55	; 85
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	6a e2       	ldi	r22, 0x2A	; 42
     d66:	71 e0       	ldi	r23, 0x01	; 1
     d68:	89 e1       	ldi	r24, 0x19	; 25
     d6a:	98 e0       	ldi	r25, 0x08	; 8
     d6c:	ec de       	rcall	.-552    	; 0xb46 <xTaskGenericCreate>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	41 f4       	brne	.+16     	; 0xd82 <vTaskStartScheduler+0x42>
     d72:	f8 94       	cli
     d74:	80 93 12 07 	sts	0x0712, r24
     d78:	10 92 15 07 	sts	0x0715, r1
     d7c:	10 92 14 07 	sts	0x0714, r1
     d80:	c0 dd       	rcall	.-1152   	; 0x902 <xPortStartScheduler>
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	08 95       	ret

00000d92 <vTaskSuspendAll>:
     d92:	80 91 11 07 	lds	r24, 0x0711
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	80 93 11 07 	sts	0x0711, r24
     d9c:	08 95       	ret

00000d9e <vTaskIncrementTick>:
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	80 91 11 07 	lds	r24, 0x0711
     daa:	81 11       	cpse	r24, r1
     dac:	af c0       	rjmp	.+350    	; 0xf0c <vTaskIncrementTick+0x16e>
     dae:	80 91 14 07 	lds	r24, 0x0714
     db2:	90 91 15 07 	lds	r25, 0x0715
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	90 93 15 07 	sts	0x0715, r25
     dbc:	80 93 14 07 	sts	0x0714, r24
     dc0:	80 91 14 07 	lds	r24, 0x0714
     dc4:	90 91 15 07 	lds	r25, 0x0715
     dc8:	89 2b       	or	r24, r25
     dca:	99 f5       	brne	.+102    	; 0xe32 <vTaskIncrementTick+0x94>
     dcc:	80 91 1a 07 	lds	r24, 0x071A
     dd0:	90 91 1b 07 	lds	r25, 0x071B
     dd4:	20 91 18 07 	lds	r18, 0x0718
     dd8:	30 91 19 07 	lds	r19, 0x0719
     ddc:	30 93 1b 07 	sts	0x071B, r19
     de0:	20 93 1a 07 	sts	0x071A, r18
     de4:	90 93 19 07 	sts	0x0719, r25
     de8:	80 93 18 07 	sts	0x0718, r24
     dec:	80 91 0e 07 	lds	r24, 0x070E
     df0:	8f 5f       	subi	r24, 0xFF	; 255
     df2:	80 93 0e 07 	sts	0x070E, r24
     df6:	e0 91 1a 07 	lds	r30, 0x071A
     dfa:	f0 91 1b 07 	lds	r31, 0x071B
     dfe:	80 81       	ld	r24, Z
     e00:	81 11       	cpse	r24, r1
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <vTaskIncrementTick+0x74>
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	9f ef       	ldi	r25, 0xFF	; 255
     e08:	90 93 07 01 	sts	0x0107, r25
     e0c:	80 93 06 01 	sts	0x0106, r24
     e10:	10 c0       	rjmp	.+32     	; 0xe32 <vTaskIncrementTick+0x94>
     e12:	e0 91 1a 07 	lds	r30, 0x071A
     e16:	f0 91 1b 07 	lds	r31, 0x071B
     e1a:	05 80       	ldd	r0, Z+5	; 0x05
     e1c:	f6 81       	ldd	r31, Z+6	; 0x06
     e1e:	e0 2d       	mov	r30, r0
     e20:	06 80       	ldd	r0, Z+6	; 0x06
     e22:	f7 81       	ldd	r31, Z+7	; 0x07
     e24:	e0 2d       	mov	r30, r0
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	90 93 07 01 	sts	0x0107, r25
     e2e:	80 93 06 01 	sts	0x0106, r24
     e32:	20 91 14 07 	lds	r18, 0x0714
     e36:	30 91 15 07 	lds	r19, 0x0715
     e3a:	80 91 06 01 	lds	r24, 0x0106
     e3e:	90 91 07 01 	lds	r25, 0x0107
     e42:	28 17       	cp	r18, r24
     e44:	39 07       	cpc	r19, r25
     e46:	08 f4       	brcc	.+2      	; 0xe4a <vTaskIncrementTick+0xac>
     e48:	66 c0       	rjmp	.+204    	; 0xf16 <vTaskIncrementTick+0x178>
     e4a:	e0 91 1a 07 	lds	r30, 0x071A
     e4e:	f0 91 1b 07 	lds	r31, 0x071B
     e52:	80 81       	ld	r24, Z
     e54:	88 23       	and	r24, r24
     e56:	99 f0       	breq	.+38     	; 0xe7e <vTaskIncrementTick+0xe0>
     e58:	e0 91 1a 07 	lds	r30, 0x071A
     e5c:	f0 91 1b 07 	lds	r31, 0x071B
     e60:	05 80       	ldd	r0, Z+5	; 0x05
     e62:	f6 81       	ldd	r31, Z+6	; 0x06
     e64:	e0 2d       	mov	r30, r0
     e66:	c6 81       	ldd	r28, Z+6	; 0x06
     e68:	d7 81       	ldd	r29, Z+7	; 0x07
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	9b 81       	ldd	r25, Y+3	; 0x03
     e6e:	20 91 14 07 	lds	r18, 0x0714
     e72:	30 91 15 07 	lds	r19, 0x0715
     e76:	28 17       	cp	r18, r24
     e78:	39 07       	cpc	r19, r25
     e7a:	f8 f4       	brcc	.+62     	; 0xeba <vTaskIncrementTick+0x11c>
     e7c:	19 c0       	rjmp	.+50     	; 0xeb0 <vTaskIncrementTick+0x112>
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	9f ef       	ldi	r25, 0xFF	; 255
     e82:	90 93 07 01 	sts	0x0107, r25
     e86:	80 93 06 01 	sts	0x0106, r24
     e8a:	45 c0       	rjmp	.+138    	; 0xf16 <vTaskIncrementTick+0x178>
     e8c:	e0 91 1a 07 	lds	r30, 0x071A
     e90:	f0 91 1b 07 	lds	r31, 0x071B
     e94:	05 80       	ldd	r0, Z+5	; 0x05
     e96:	f6 81       	ldd	r31, Z+6	; 0x06
     e98:	e0 2d       	mov	r30, r0
     e9a:	c6 81       	ldd	r28, Z+6	; 0x06
     e9c:	d7 81       	ldd	r29, Z+7	; 0x07
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	9b 81       	ldd	r25, Y+3	; 0x03
     ea2:	20 91 14 07 	lds	r18, 0x0714
     ea6:	30 91 15 07 	lds	r19, 0x0715
     eaa:	28 17       	cp	r18, r24
     eac:	39 07       	cpc	r19, r25
     eae:	28 f4       	brcc	.+10     	; 0xeba <vTaskIncrementTick+0x11c>
     eb0:	90 93 07 01 	sts	0x0107, r25
     eb4:	80 93 06 01 	sts	0x0106, r24
     eb8:	2e c0       	rjmp	.+92     	; 0xf16 <vTaskIncrementTick+0x178>
     eba:	8e 01       	movw	r16, r28
     ebc:	0e 5f       	subi	r16, 0xFE	; 254
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	c8 01       	movw	r24, r16
     ec2:	9d d9       	rcall	.-3270   	; 0x1fe <vListRemove>
     ec4:	8c 89       	ldd	r24, Y+20	; 0x14
     ec6:	9d 89       	ldd	r25, Y+21	; 0x15
     ec8:	89 2b       	or	r24, r25
     eca:	19 f0       	breq	.+6      	; 0xed2 <vTaskIncrementTick+0x134>
     ecc:	ce 01       	movw	r24, r28
     ece:	0c 96       	adiw	r24, 0x0c	; 12
     ed0:	96 d9       	rcall	.-3284   	; 0x1fe <vListRemove>
     ed2:	8e 89       	ldd	r24, Y+22	; 0x16
     ed4:	90 91 13 07 	lds	r25, 0x0713
     ed8:	98 17       	cp	r25, r24
     eda:	10 f4       	brcc	.+4      	; 0xee0 <vTaskIncrementTick+0x142>
     edc:	80 93 13 07 	sts	0x0713, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9c 01       	movw	r18, r24
     ee4:	22 0f       	add	r18, r18
     ee6:	33 1f       	adc	r19, r19
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	22 0f       	add	r18, r18
     eee:	33 1f       	adc	r19, r19
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	b8 01       	movw	r22, r16
     ef6:	80 5e       	subi	r24, 0xE0	; 224
     ef8:	98 4f       	sbci	r25, 0xF8	; 248
     efa:	1f d9       	rcall	.-3522   	; 0x13a <vListInsertEnd>
     efc:	e0 91 1a 07 	lds	r30, 0x071A
     f00:	f0 91 1b 07 	lds	r31, 0x071B
     f04:	80 81       	ld	r24, Z
     f06:	81 11       	cpse	r24, r1
     f08:	c1 cf       	rjmp	.-126    	; 0xe8c <vTaskIncrementTick+0xee>
     f0a:	b9 cf       	rjmp	.-142    	; 0xe7e <vTaskIncrementTick+0xe0>
     f0c:	80 91 10 07 	lds	r24, 0x0710
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	80 93 10 07 	sts	0x0710, r24
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <xTaskResumeAll>:
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	0f 92       	push	r0
     f3a:	80 91 11 07 	lds	r24, 0x0711
     f3e:	81 50       	subi	r24, 0x01	; 1
     f40:	80 93 11 07 	sts	0x0711, r24
     f44:	80 91 11 07 	lds	r24, 0x0711
     f48:	81 11       	cpse	r24, r1
     f4a:	63 c0       	rjmp	.+198    	; 0x1012 <xTaskResumeAll+0xf2>
     f4c:	80 91 16 07 	lds	r24, 0x0716
     f50:	81 11       	cpse	r24, r1
     f52:	2d c0       	rjmp	.+90     	; 0xfae <xTaskResumeAll+0x8e>
     f54:	61 c0       	rjmp	.+194    	; 0x1018 <xTaskResumeAll+0xf8>
     f56:	d6 01       	movw	r26, r12
     f58:	ed 91       	ld	r30, X+
     f5a:	fc 91       	ld	r31, X
     f5c:	c6 81       	ldd	r28, Z+6	; 0x06
     f5e:	d7 81       	ldd	r29, Z+7	; 0x07
     f60:	ce 01       	movw	r24, r28
     f62:	0c 96       	adiw	r24, 0x0c	; 12
     f64:	4c d9       	rcall	.-3432   	; 0x1fe <vListRemove>
     f66:	8e 01       	movw	r16, r28
     f68:	0e 5f       	subi	r16, 0xFE	; 254
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	c8 01       	movw	r24, r16
     f6e:	47 d9       	rcall	.-3442   	; 0x1fe <vListRemove>
     f70:	8e 89       	ldd	r24, Y+22	; 0x16
     f72:	90 91 13 07 	lds	r25, 0x0713
     f76:	98 17       	cp	r25, r24
     f78:	10 f4       	brcc	.+4      	; 0xf7e <xTaskResumeAll+0x5e>
     f7a:	80 93 13 07 	sts	0x0713, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9c 01       	movw	r18, r24
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	b8 01       	movw	r22, r16
     f94:	80 5e       	subi	r24, 0xE0	; 224
     f96:	98 4f       	sbci	r25, 0xF8	; 248
     f98:	d0 d8       	rcall	.-3680   	; 0x13a <vListInsertEnd>
     f9a:	e0 91 1c 07 	lds	r30, 0x071C
     f9e:	f0 91 1d 07 	lds	r31, 0x071D
     fa2:	9e 89       	ldd	r25, Y+22	; 0x16
     fa4:	86 89       	ldd	r24, Z+22	; 0x16
     fa6:	98 17       	cp	r25, r24
     fa8:	88 f0       	brcs	.+34     	; 0xfcc <xTaskResumeAll+0xac>
     faa:	ba 2c       	mov	r11, r10
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <xTaskResumeAll+0xac>
     fae:	b1 2c       	mov	r11, r1
     fb0:	0f 2e       	mov	r0, r31
     fb2:	f6 e5       	ldi	r31, 0x56	; 86
     fb4:	ef 2e       	mov	r14, r31
     fb6:	f7 e0       	ldi	r31, 0x07	; 7
     fb8:	ff 2e       	mov	r15, r31
     fba:	f0 2d       	mov	r31, r0
     fbc:	0f 2e       	mov	r0, r31
     fbe:	fb e5       	ldi	r31, 0x5B	; 91
     fc0:	cf 2e       	mov	r12, r31
     fc2:	f7 e0       	ldi	r31, 0x07	; 7
     fc4:	df 2e       	mov	r13, r31
     fc6:	f0 2d       	mov	r31, r0
     fc8:	aa 24       	eor	r10, r10
     fca:	a3 94       	inc	r10
     fcc:	f7 01       	movw	r30, r14
     fce:	80 81       	ld	r24, Z
     fd0:	81 11       	cpse	r24, r1
     fd2:	c1 cf       	rjmp	.-126    	; 0xf56 <xTaskResumeAll+0x36>
     fd4:	80 91 10 07 	lds	r24, 0x0710
     fd8:	88 23       	and	r24, r24
     fda:	79 f0       	breq	.+30     	; 0xffa <xTaskResumeAll+0xda>
     fdc:	80 91 10 07 	lds	r24, 0x0710
     fe0:	88 23       	and	r24, r24
     fe2:	91 f0       	breq	.+36     	; 0x1008 <xTaskResumeAll+0xe8>
     fe4:	dc de       	rcall	.-584    	; 0xd9e <vTaskIncrementTick>
     fe6:	80 91 10 07 	lds	r24, 0x0710
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	80 93 10 07 	sts	0x0710, r24
     ff0:	80 91 10 07 	lds	r24, 0x0710
     ff4:	81 11       	cpse	r24, r1
     ff6:	f6 cf       	rjmp	.-20     	; 0xfe4 <xTaskResumeAll+0xc4>
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <xTaskResumeAll+0xe8>
     ffa:	f1 e0       	ldi	r31, 0x01	; 1
     ffc:	bf 16       	cp	r11, r31
     ffe:	21 f0       	breq	.+8      	; 0x1008 <xTaskResumeAll+0xe8>
    1000:	80 91 0f 07 	lds	r24, 0x070F
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	39 f4       	brne	.+14     	; 0x1016 <xTaskResumeAll+0xf6>
    1008:	10 92 0f 07 	sts	0x070F, r1
    100c:	b4 dc       	rcall	.-1688   	; 0x976 <vPortYield>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <xTaskResumeAll+0xf8>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <xTaskResumeAll+0xf8>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	08 95       	ret

00001032 <prvIdleTask>:
    1032:	0f 2e       	mov	r0, r31
    1034:	ff e5       	ldi	r31, 0x5F	; 95
    1036:	ef 2e       	mov	r14, r31
    1038:	f7 e0       	ldi	r31, 0x07	; 7
    103a:	ff 2e       	mov	r15, r31
    103c:	f0 2d       	mov	r31, r0
    103e:	0f 2e       	mov	r0, r31
    1040:	f4 e6       	ldi	r31, 0x64	; 100
    1042:	cf 2e       	mov	r12, r31
    1044:	f7 e0       	ldi	r31, 0x07	; 7
    1046:	df 2e       	mov	r13, r31
    1048:	f0 2d       	mov	r31, r0
    104a:	c0 e2       	ldi	r28, 0x20	; 32
    104c:	d7 e0       	ldi	r29, 0x07	; 7
    104e:	80 91 17 07 	lds	r24, 0x0717
    1052:	88 23       	and	r24, r24
    1054:	19 f1       	breq	.+70     	; 0x109c <prvIdleTask+0x6a>
    1056:	9d de       	rcall	.-710    	; 0xd92 <vTaskSuspendAll>
    1058:	d7 01       	movw	r26, r14
    105a:	1c 91       	ld	r17, X
    105c:	61 df       	rcall	.-318    	; 0xf20 <xTaskResumeAll>
    105e:	11 23       	and	r17, r17
    1060:	e9 f0       	breq	.+58     	; 0x109c <prvIdleTask+0x6a>
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	0f 92       	push	r0
    1068:	d6 01       	movw	r26, r12
    106a:	ed 91       	ld	r30, X+
    106c:	fc 91       	ld	r31, X
    106e:	06 81       	ldd	r16, Z+6	; 0x06
    1070:	17 81       	ldd	r17, Z+7	; 0x07
    1072:	c8 01       	movw	r24, r16
    1074:	02 96       	adiw	r24, 0x02	; 2
    1076:	c3 d8       	rcall	.-3706   	; 0x1fe <vListRemove>
    1078:	80 91 16 07 	lds	r24, 0x0716
    107c:	81 50       	subi	r24, 0x01	; 1
    107e:	80 93 16 07 	sts	0x0716, r24
    1082:	80 91 17 07 	lds	r24, 0x0717
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	80 93 17 07 	sts	0x0717, r24
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	f8 01       	movw	r30, r16
    1092:	87 89       	ldd	r24, Z+23	; 0x17
    1094:	90 8d       	ldd	r25, Z+24	; 0x18
    1096:	3e d8       	rcall	.-3972   	; 0x114 <vPortFree>
    1098:	c8 01       	movw	r24, r16
    109a:	3c d8       	rcall	.-3976   	; 0x114 <vPortFree>
    109c:	88 81       	ld	r24, Y
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	b0 f2       	brcs	.-84     	; 0x104e <prvIdleTask+0x1c>
    10a2:	69 dc       	rcall	.-1838   	; 0x976 <vPortYield>
    10a4:	d4 cf       	rjmp	.-88     	; 0x104e <prvIdleTask+0x1c>

000010a6 <vTaskDelay>:
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	91 f0       	breq	.+36     	; 0x10d4 <vTaskDelay+0x2e>
    10b0:	70 de       	rcall	.-800    	; 0xd92 <vTaskSuspendAll>
    10b2:	80 91 14 07 	lds	r24, 0x0714
    10b6:	90 91 15 07 	lds	r25, 0x0715
    10ba:	c8 0f       	add	r28, r24
    10bc:	d9 1f       	adc	r29, r25
    10be:	80 91 1c 07 	lds	r24, 0x071C
    10c2:	90 91 1d 07 	lds	r25, 0x071D
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	9a d8       	rcall	.-3788   	; 0x1fe <vListRemove>
    10ca:	ce 01       	movw	r24, r28
    10cc:	07 dd       	rcall	.-1522   	; 0xadc <prvAddCurrentTaskToDelayedList>
    10ce:	28 df       	rcall	.-432    	; 0xf20 <xTaskResumeAll>
    10d0:	81 11       	cpse	r24, r1
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <vTaskDelay+0x30>
    10d4:	50 dc       	rcall	.-1888   	; 0x976 <vPortYield>
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    10dc:	80 91 11 07 	lds	r24, 0x0711
    10e0:	81 11       	cpse	r24, r1
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    10e4:	80 91 13 07 	lds	r24, 0x0713
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	fc 01       	movw	r30, r24
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	8e 0f       	add	r24, r30
    10fa:	9f 1f       	adc	r25, r31
    10fc:	fc 01       	movw	r30, r24
    10fe:	e0 5e       	subi	r30, 0xE0	; 224
    1100:	f8 4f       	sbci	r31, 0xF8	; 248
    1102:	80 81       	ld	r24, Z
    1104:	88 23       	and	r24, r24
    1106:	29 f0       	breq	.+10     	; 0x1112 <vTaskSwitchContext+0x36>
    1108:	1b c0       	rjmp	.+54     	; 0x1140 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 0f 07 	sts	0x070F, r24
    1110:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1112:	80 91 13 07 	lds	r24, 0x0713
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	80 93 13 07 	sts	0x0713, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    111c:	80 91 13 07 	lds	r24, 0x0713
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	fc 01       	movw	r30, r24
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	ee 0f       	add	r30, r30
    112a:	ff 1f       	adc	r31, r31
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	8e 0f       	add	r24, r30
    1132:	9f 1f       	adc	r25, r31
    1134:	fc 01       	movw	r30, r24
    1136:	e0 5e       	subi	r30, 0xE0	; 224
    1138:	f8 4f       	sbci	r31, 0xF8	; 248
    113a:	80 81       	ld	r24, Z
    113c:	88 23       	and	r24, r24
    113e:	49 f3       	breq	.-46     	; 0x1112 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1140:	e0 91 13 07 	lds	r30, 0x0713
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	cf 01       	movw	r24, r30
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	e8 0f       	add	r30, r24
    1156:	f9 1f       	adc	r31, r25
    1158:	e0 5e       	subi	r30, 0xE0	; 224
    115a:	f8 4f       	sbci	r31, 0xF8	; 248
    115c:	a1 81       	ldd	r26, Z+1	; 0x01
    115e:	b2 81       	ldd	r27, Z+2	; 0x02
    1160:	12 96       	adiw	r26, 0x02	; 2
    1162:	0d 90       	ld	r0, X+
    1164:	bc 91       	ld	r27, X
    1166:	a0 2d       	mov	r26, r0
    1168:	b2 83       	std	Z+2, r27	; 0x02
    116a:	a1 83       	std	Z+1, r26	; 0x01
    116c:	cf 01       	movw	r24, r30
    116e:	03 96       	adiw	r24, 0x03	; 3
    1170:	a8 17       	cp	r26, r24
    1172:	b9 07       	cpc	r27, r25
    1174:	31 f4       	brne	.+12     	; 0x1182 <vTaskSwitchContext+0xa6>
    1176:	12 96       	adiw	r26, 0x02	; 2
    1178:	8d 91       	ld	r24, X+
    117a:	9c 91       	ld	r25, X
    117c:	13 97       	sbiw	r26, 0x03	; 3
    117e:	92 83       	std	Z+2, r25	; 0x02
    1180:	81 83       	std	Z+1, r24	; 0x01
    1182:	01 80       	ldd	r0, Z+1	; 0x01
    1184:	f2 81       	ldd	r31, Z+2	; 0x02
    1186:	e0 2d       	mov	r30, r0
    1188:	86 81       	ldd	r24, Z+6	; 0x06
    118a:	97 81       	ldd	r25, Z+7	; 0x07
    118c:	90 93 1d 07 	sts	0x071D, r25
    1190:	80 93 1c 07 	sts	0x071C, r24
    1194:	08 95       	ret

00001196 <memset>:
    1196:	dc 01       	movw	r26, r24
    1198:	01 c0       	rjmp	.+2      	; 0x119c <memset+0x6>
    119a:	6d 93       	st	X+, r22
    119c:	41 50       	subi	r20, 0x01	; 1
    119e:	50 40       	sbci	r21, 0x00	; 0
    11a0:	e0 f7       	brcc	.-8      	; 0x119a <memset+0x4>
    11a2:	08 95       	ret

000011a4 <strncpy>:
    11a4:	fb 01       	movw	r30, r22
    11a6:	dc 01       	movw	r26, r24
    11a8:	41 50       	subi	r20, 0x01	; 1
    11aa:	50 40       	sbci	r21, 0x00	; 0
    11ac:	48 f0       	brcs	.+18     	; 0x11c0 <strncpy+0x1c>
    11ae:	01 90       	ld	r0, Z+
    11b0:	0d 92       	st	X+, r0
    11b2:	00 20       	and	r0, r0
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <strncpy+0x4>
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <strncpy+0x16>
    11b8:	1d 92       	st	X+, r1
    11ba:	41 50       	subi	r20, 0x01	; 1
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	e0 f7       	brcc	.-8      	; 0x11b8 <strncpy+0x14>
    11c0:	08 95       	ret

000011c2 <_exit>:
    11c2:	f8 94       	cli

000011c4 <__stop_program>:
    11c4:	ff cf       	rjmp	.-2      	; 0x11c4 <__stop_program>
